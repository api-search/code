openapi: 3.1.0
info:
  title: Users
  description: Needs a description.
paths:
  /admin/ldap/users/{username}/mapping:
    patch:
      summary: Update LDAP mapping for a user
      description: ''
      operationId: enterprise-admin/update-ldap-mapping-for-user
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/ldap#update-ldap-mapping-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ldap-mapping-user'
              examples:
                default:
                  $ref: '#/components/examples/ldap-mapping-user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ldap_dn:
                  type: string
                  description: >-
                    The [distinguished
                    name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the
                    LDAP entry to map to a team.
              required:
                - ldap_dn
            examples:
              default:
                value:
                  ldap_dn: uid=asdf,ou=users,dc=github,dc=com
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: ldap
  /admin/ldap/users/{username}/sync:
    post:
      summary: Sync LDAP mapping for a user
      description: >-
        Note that this API call does not automatically initiate an LDAP sync.
        Rather, if a `201` is returned, the sync job is queued successfully, and
        is performed when the instance is ready.
      operationId: enterprise-admin/sync-ldap-mapping-for-user
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/ldap#sync-ldap-mapping-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
              examples:
                default:
                  value:
                    status: queued
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: ldap
  /admin/users:
    post:
      summary: Create a user
      description: >-
        If an external authentication mechanism is used, the login name should
        match the login name in the external system. If you are using LDAP
        authentication, you should also [update the LDAP
        mapping](https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/ldap#update-ldap-mapping-for-a-user)
        for the user.


        The login name will be normalized to only contain alphanumeric
        characters or single hyphens. For example, if you send `"octo_cat"` as
        the login, a user named `"octo-cat"` will be created.


        If the login name or email address is already associated with an
        account, the server will return a `422` response.
      operationId: enterprise-admin/create-user
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#create-a-user
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: The user's username.
                email:
                  type: string
                  description: >-
                    **Required for built-in authentication.** The user's email

                    address. This parameter can be omitted when using CAS, LDAP,
                    or SAML.

                    For more information, see "[About authentication for your
                    enterprise](https://docs.github.com/enterprise-server@3.9/admin/identity-and-access-management/managing-iam-for-your-enterprise/about-authentication-for-your-enterprise)."
                suspended:
                  type: boolean
                  description: >-
                    Whether to set the user as suspended when the user is
                    created.
                  default: false
              required:
                - login
            examples:
              default:
                value:
                  login: monalisa
                  email: octocat@github.com
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
  /admin/users/{username}:
    patch:
      summary: Update the username for a user
      description: ''
      operationId: enterprise-admin/update-username-for-user
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#update-the-username-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '202':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  url:
                    type: string
              examples:
                default:
                  value:
                    message: >-
                      Job queued to rename user. It may take a few minutes to
                      complete.
                    url: https://api.github.com/user/1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: The user's new username.
              required:
                - login
            examples:
              default:
                value:
                  login: thenewmonalisa
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
    delete:
      summary: Delete a user
      description: >-
        Deleting a user will delete all their repositories, gists, applications,
        and personal settings. [Suspending a
        user](https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#suspend-a-user)
        is often a better option.


        You can delete any user account except your own.
      operationId: enterprise-admin/delete-user
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#delete-a-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
  /admin/users/{username}/authorizations:
    post:
      summary: Create an impersonation OAuth token
      description: ''
      operationId: enterprise-admin/create-impersonation-o-auth-token
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#create-an-impersonation-oauth-token
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response when getting an existing impersonation OAuth token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authorization'
              examples:
                default:
                  $ref: '#/components/examples/authorization'
        '201':
          description: Response when creating a new impersonation OAuth token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authorization'
              examples:
                default:
                  $ref: '#/components/examples/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                scopes:
                  type: array
                  description: >-
                    A list of
                    [scopes](https://docs.github.com/enterprise-server@3.9/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
                  items:
                    type: string
              required:
                - scopes
            examples:
              default:
                value:
                  scopes:
                    - public_repo
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
    delete:
      summary: Delete an impersonation OAuth token
      description: ''
      operationId: enterprise-admin/delete-impersonation-o-auth-token
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#delete-an-impersonation-oauth-token
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
  /enterprise/stats/users:
    get:
      summary: Get users statistics
      description: ''
      operationId: enterprise-admin/get-user-stats
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/admin-stats#get-users-statistics
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/enterprise-user-overview'
              examples:
                default:
                  value:
                    total_users: 100
                    admin_users: 3
                    suspended_users: 1
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: admin-stats
  /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users:
    get:
      summary: Get users with access to the protected branch
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Lists the people who have push access to this branch.
      tags:
        - - - - repos
      operationId: repos/get-users-with-access-to-protected-branch
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#get-users-with-access-to-the-protected-branch
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    post:
      summary: Add user access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Grants the specified people push access for this branch.


        | Type    |
        Description                                                                                                                  
        |

        | - | -- |

        | `array` | Usernames for people who can have push access. **Note**: The
        list of users, apps, and teams in total is limited to 100 items. |
      tags:
        - - - - repos
      operationId: repos/add-user-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#add-user-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    users:
                      type: array
                      description: The username for users
                      items:
                        type: string
                  required:
                    - users
                  example:
                    users:
                      - mona
                - type: array
                  items:
                    type: string
            examples:
              default:
                summary: Example adding a user in a branch protection rule
                value:
                  users:
                    - octocat
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: users
        category: branches
        subcategory: branch-protection
    put:
      summary: Set user access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Replaces the list of people that have push access to this branch. This
        removes all people that previously had push access and grants push
        access to the new list of people.


        | Type    |
        Description                                                                                                                  
        |

        | - | -- |

        | `array` | Usernames for people who can have push access. **Note**: The
        list of users, apps, and teams in total is limited to 100 items. |
      tags:
        - - - - repos
      operationId: repos/set-user-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#set-user-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    users:
                      type: array
                      description: The username for users
                      items:
                        type: string
                  required:
                    - users
                  example:
                    users:
                      - mona
                - type: array
                  items:
                    type: string
            examples:
              default:
                summary: Example replacing a user in a branch protection rule
                value:
                  users:
                    - octocat
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: users
        category: branches
        subcategory: branch-protection
    delete:
      summary: Remove user access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Removes the ability of a user to push to this branch.


        | Type    |
        Description                                                                                                                                  
        |

        | - |

        |

        | `array` | Usernames of the people who should no longer have push
        access. **Note**: The list of users, apps, and teams in total is limited
        to 100 items. |
      tags:
        - - - - repos
      operationId: repos/remove-user-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#remove-user-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    users:
                      type: array
                      description: The username for users
                      items:
                        type: string
                  required:
                    - users
                  example:
                    users:
                      - mona
                - type: array
                  items:
                    type: string
            examples:
              default:
                summary: Example removing a user in a branch protection rule
                value:
                  users:
                    - octocat
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: users
        category: branches
        subcategory: branch-protection
  /search/users:
    get:
      summary: Search users
      description: >-
        Find users via various criteria. This method returns up to 100 results
        [per
        page](https://docs.github.com/enterprise-server@3.9/rest/guides/using-pagination-in-the-rest-api).


        When searching for users, you can get text match metadata for the issue
        **login**, public **email**, and **name** fields when you pass the
        `text-match` media type. For more details about highlighting search
        results, see [Text match
        metadata](https://docs.github.com/enterprise-server@3.9/rest/search/search#text-match-metadata).
        For more details about how to receive highlighted search results, see
        [Text match
        metadata](https://docs.github.com/enterprise-server@3.9/rest/search/search#text-match-metadata).


        For example, if you're looking for a list of popular users, you might
        try this query:


        `q=tom+repos:%3E42+followers:%3E1000`


        This query searches for users with the name `tom`. The results are
        restricted to users with more than 42 repositories and over 1,000
        followers.


        This endpoint does not accept authentication and will only include
        publicly visible users. As an alternative, you can use the GraphQL API.
        The GraphQL API requires authentication and will return private users,
        including Enterprise Managed Users (EMUs), that you are authorized to
        view. For more information, see "[GraphQL
        Queries](https://docs.github.com/enterprise-server@3.9/graphql/reference/queries#search)."
      tags:
        - - - - search
      operationId: search/users
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/search/search#search-users
      parameters:
        - name: q
          description: >-
            The query contains one or more search keywords and qualifiers.
            Qualifiers allow you to limit your search to specific areas of
            GitHub Enterprise Server. The REST API supports the same qualifiers
            as the web interface for GitHub Enterprise Server. To learn more
            about the format of the query, see [Constructing a search
            query](https://docs.github.com/enterprise-server@3.9/rest/search/search#constructing-a-search-query).
            See "[Searching
            users](https://docs.github.com/enterprise-server@3.9/search-github/searching-on-github/searching-users)"
            for a detailed list of qualifiers.
          in: query
          required: true
          schema:
            type: string
        - name: sort
          description: >-
            Sorts the results of your query by number of `followers` or
            `repositories`, or when the person `joined` GitHub Enterprise
            Server. Default: [best
            match](https://docs.github.com/enterprise-server@3.9/rest/search/search#ranking-search-results)
          in: query
          required: false
          schema:
            type: string
            enum:
              - followers
              - repositories
              - joined
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - incomplete_results
                  - items
                properties:
                  total_count:
                    type: integer
                  incomplete_results:
                    type: boolean
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/user-search-result-item'
              examples:
                default:
                  $ref: '#/components/examples/user-search-result-item-paginated'
        '304':
          $ref: '#/components/responses/not_modified'
        '422':
          $ref: '#/components/responses/validation_failed'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: search
        subcategory: search
  /users:
    get:
      summary: List users
      description: >-
        Lists all users, in the order that they signed up on GitHub Enterprise
        Server. This list includes personal user accounts and organization
        accounts.


        Note: Pagination is powered exclusively by the `since` parameter. Use
        the [Link
        header](https://docs.github.com/enterprise-server@3.9/rest/guides/using-pagination-in-the-rest-api#using-link-headers)
        to get the URL for the next page of users.
      tags:
        - - - - users
      operationId: users/list
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/users#list-users
      parameters:
        - $ref: '#/components/parameters/since-user'
        - $ref: '#/components/parameters/per-page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
          headers:
            Link:
              example: <https://api.github.com/users?since=135>; rel="next"
              schema:
                type: string
        '304':
          $ref: '#/components/responses/not_modified'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: users
  /users/{username}:
    get:
      summary: Get a user
      description: >-
        Provides publicly available information about someone with a GitHub
        account.


        The `email` key in the following response is the publicly visible email
        address from your GitHub Enterprise Server [profile
        page](https://github.com/settings/profile). When setting up your
        profile, you can select a primary email address to be “public” which
        provides an email entry for this endpoint. If you do not set a public
        email address for `email`, then it will have a value of `null`. You only
        see publicly visible email addresses when authenticated with GitHub
        Enterprise Server. For more information, see
        [Authentication](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#authentication).


        The Emails API enables you to list all of your email addresses, and
        toggle a primary email to be visible publicly. For more information, see
        "[Emails
        API](https://docs.github.com/enterprise-server@3.9/rest/users/emails)".
      tags:
        - - - - users
      operationId: users/get-by-username
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/users#get-a-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/private-user'
                  - $ref: '#/components/schemas/public-user'
              examples:
                default-response:
                  $ref: '#/components/examples/public-user-default-response'
                response-with-git-hub-plan-information:
                  $ref: >-
                    #/components/examples/public-user-response-with-git-hub-plan-information
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: users
  /users/{username}/docker/conflicts:
    get:
      summary: Get list of conflicting packages during Docker migration for user
      description: >-
        Lists all packages that are in a specific user's namespace, that the
        requesting user has access to, and that encountered a conflict during
        Docker migration.


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` scope to use this endpoint.
      tags:
        - - - - packages
      operationId: packages/list-docker-migration-conflicting-packages-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#get-list-of-conflicting-packages-during-docker-migration-for-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/package'
              examples:
                default:
                  $ref: '#/components/examples/packages-for-user'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /users/{username}/events:
    get:
      summary: List events for the authenticated user
      description: >-
        If you are authenticated as the given user, you will see your private
        events. Otherwise, you'll only see public events.
      tags:
        - - - - activity
      operationId: activity/list-events-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/events#list-events-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/event'
              examples:
                default:
                  $ref: '#/components/examples/user-events-items'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: activity
        subcategory: events
  /users/{username}/events/orgs/{org}:
    get:
      summary: List organization events for the authenticated user
      description: >-
        This is the user's organization dashboard. You must be authenticated as
        the user to view this.
      tags:
        - - - - activity
      operationId: activity/list-org-events-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/events#list-organization-events-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/event'
              examples:
                default:
                  $ref: '#/components/examples/user-org-events-items'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: activity
        subcategory: events
  /users/{username}/events/public:
    get:
      summary: List public events for a user
      description: ''
      tags:
        - - - - activity
      operationId: activity/list-public-events-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/events#list-public-events-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/event'
              examples:
                default:
                  $ref: '#/components/examples/user-public-events-items'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: activity
        subcategory: events
  /users/{username}/followers:
    get:
      summary: List followers of a user
      description: Lists the people following the specified user.
      tags:
        - - - - users
      operationId: users/list-followers-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/followers#list-followers-of-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: followers
  /users/{username}/following:
    get:
      summary: List the people a user follows
      description: Lists the people who the specified user follows.
      tags:
        - - - - users
      operationId: users/list-following-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/followers#list-the-people-a-user-follows
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: followers
  /users/{username}/following/{target_user}:
    get:
      summary: Check if a user follows another user
      description: ''
      tags:
        - - - - users
      operationId: users/check-following-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/followers#check-if-a-user-follows-another-user
      parameters:
        - $ref: '#/components/parameters/username'
        - name: target_user
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: if the user follows the target user
        '404':
          description: if the user does not follow the target user
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: followers
  /users/{username}/gists:
    get:
      summary: List gists for a user
      description: 'Lists public gists for the specified user:'
      tags:
        - - - - gists
      operationId: gists/list-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/gists/gists#list-gists-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/since'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/base-gist'
              examples:
                default:
                  $ref: '#/components/examples/base-gist-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: gists
        subcategory: gists
  /users/{username}/gpg_keys:
    get:
      summary: List GPG keys for a user
      description: Lists the GPG keys for a user. This information is accessible by anyone.
      tags:
        - - - - users
      operationId: users/list-gpg-keys-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/gpg-keys#list-gpg-keys-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/gpg-key'
              examples:
                default:
                  $ref: '#/components/examples/gpg-key-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: gpg-keys
  /users/{username}/hovercard:
    get:
      summary: Get contextual information for a user
      description: >-
        Provides hovercard information. You can find out more about someone in
        relation to their pull requests, issues, repositories, and
        organizations.


        The `subject_type` and `subject_id` parameters provide context for the
        person's hovercard, which returns more information than without the
        parameters. For example, if you wanted to find out more about `octocat`
        who owns the `Spoon-Knife` repository via cURL, it would look like this:


        ```shell
         curl -u username:token
          https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
        ```


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/get-context-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/users#get-contextual-information-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - name: subject_type
          description: >-
            Identifies which additional information you'd like to receive about
            the person's hovercard. Can be `organization`, `repository`,
            `issue`, `pull_request`. **Required** when using `subject_id`.
          in: query
          required: false
          schema:
            type: string
            enum:
              - organization
              - repository
              - issue
              - pull_request
        - name: subject_id
          description: >-
            Uses the ID for the `subject_type` you specified. **Required** when
            using `subject_type`.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hovercard'
              examples:
                default:
                  $ref: '#/components/examples/hovercard'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: users
  /users/{username}/installation:
    get:
      summary: Get a user installation for the authenticated app
      description: >-
        Enables an authenticated GitHub App to find the user’s installation
        information.


        You must use a
        [JWT](https://docs.github.com/enterprise-server@3.9/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
        to access this endpoint.
      tags:
        - - - - apps
      operationId: apps/get-user-installation
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/apps/apps#get-a-user-installation-for-the-authenticated-app
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/installation'
              examples:
                default:
                  $ref: '#/components/examples/installation'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: apps
        subcategory: apps
  /users/{username}/keys:
    get:
      summary: List public keys for a user
      description: >-
        Lists the _verified_ public SSH keys for a user. This is accessible by
        anyone.
      tags:
        - - - - users
      operationId: users/list-public-keys-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/keys#list-public-keys-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/key-simple'
              examples:
                default:
                  $ref: '#/components/examples/key-simple-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: keys
  /users/{username}/orgs:
    get:
      summary: List organizations for a user
      description: >-
        List [public organization
        memberships](https://docs.github.com/enterprise-server@3.9/articles/publicizing-or-concealing-organization-membership)
        for the specified user.


        This method only lists _public_ memberships, regardless of
        authentication. If you need to fetch all of the organization memberships
        (public and private) for the authenticated user, use the [List
        organizations for the authenticated
        user](https://docs.github.com/enterprise-server@3.9/rest/orgs/orgs#list-organizations-for-the-authenticated-user)
        API instead.
      tags:
        - - - - orgs
      operationId: orgs/list-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/orgs/orgs#list-organizations-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/organization-simple'
              examples:
                default:
                  $ref: '#/components/examples/organization-simple-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: orgs
        subcategory: orgs
  /users/{username}/packages:
    get:
      summary: List packages for a user
      description: >-
        Lists all packages in a user's namespace for which the requesting user
        has access.


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` scope to use this endpoint. If the `package_type`
        belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/list-packages-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#list-packages-for-a-user
      parameters:
        - name: package_type
          description: >-
            The type of supported package. Packages in GitHub's Gradle registry
            have the type `maven`. Docker images pushed to GitHub's Container
            registry (`ghcr.io`) have the type `container`. You can use the type
            `docker` to find images that were pushed to GitHub's Docker registry
            (`docker.pkg.github.com`), even if these have now been migrated to
            the Container registry.
          in: query
          required: true
          schema:
            type: string
            enum:
              - npm
              - maven
              - rubygems
              - docker
              - nuget
              - container
        - $ref: '#/components/parameters/package-visibility'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per-page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/package'
              examples:
                default:
                  $ref: '#/components/examples/packages-for-user'
        '400':
          $ref: '#/components/responses/package_es_list_error'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /users/{username}/packages/{package_type}/{package_name}:
    get:
      summary: Get a package for a user
      description: >-
        Gets a specific package metadata for a public package owned by a user.


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` scope to use this endpoint. If the `package_type`
        belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/get-package-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#get-a-package-for-a-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/package'
              examples:
                default:
                  $ref: '#/components/examples/package-user'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
    delete:
      summary: Delete a package for a user
      description: >-
        Deletes an entire package for a user. You cannot delete a public package
        if any version of the package has more than 5,000 downloads. In this
        scenario, contact GitHub support for further assistance.


        If the `package_type` belongs to a GitHub Packages registry that
        supports granular permissions, the authenticated user must have admin
        permissions to the package. For the list of these registries, see
        "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` and `delete:packages` scopes to use this endpoint. If
        the `package_type` belongs to a GitHub Packages registry that only
        supports repository-scoped permissions, the `repo` scope is also
        required. For the list of these registries, see "[About permissions for
        GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/delete-package-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#delete-a-package-for-a-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /users/{username}/packages/{package_type}/{package_name}/restore:
    post:
      summary: Restore a package for a user
      description: >-
        Restores an entire package for a user.


        You can restore a deleted package under the following conditions:
          - The package was deleted within the last 30 days.
          - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.

        If the `package_type` belongs to a GitHub Packages registry that
        supports granular permissions, the authenticated user must have admin
        permissions to the package. For the list of these registries, see
        "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` and `write:packages` scopes to use this endpoint. If the
        `package_type` belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/restore-package-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#restore-a-package-for-a-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/username'
        - name: token
          description: package token
          schema:
            type: string
          required: false
          in: query
      responses:
        '204':
          description: Response
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /users/{username}/packages/{package_type}/{package_name}/versions:
    get:
      summary: List package versions for a package owned by a user
      description: >-
        Lists package versions for a public package owned by a specified user.


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` scope to use this endpoint. If the `package_type`
        belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/get-all-package-versions-for-package-owned-by-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#list-package-versions-for-a-package-owned-by-a-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/package-version'
              examples:
                default:
                  $ref: '#/components/examples/package-versions-for-user'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}:
    get:
      summary: Get a package version for a user
      description: >-
        Gets a specific package version for a public package owned by a
        specified user.


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` scope to use this endpoint. If the `package_type`
        belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/get-package-version-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#get-a-package-version-for-a-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/package-version-id'
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/package-version'
              examples:
                default:
                  $ref: '#/components/examples/package-version-user'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
    delete:
      summary: Delete package version for a user
      description: >-
        Deletes a specific package version for a user. If the package is public
        and the package version has more than 5,000 downloads, you cannot delete
        the package version. In this scenario, contact GitHub support for
        further assistance.


        If the `package_type` belongs to a GitHub Packages registry that
        supports granular permissions, the authenticated user must have admin
        permissions to the package. For the list of these registries, see
        "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` and `delete:packages` scopes to use this endpoint. If
        the `package_type` belongs to a GitHub Packages registry that only
        supports repository-scoped permissions, the `repo` scope is also
        required. For the list of these registries, see "[About permissions for
        GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/delete-package-version-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#delete-package-version-for-a-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/package-version-id'
      responses:
        '204':
          description: Response
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore:
    post:
      summary: Restore package version for a user
      description: >-
        Restores a specific package version for a user.


        You can restore a deleted package under the following conditions:
          - The package was deleted within the last 30 days.
          - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.

        If the `package_type` belongs to a GitHub Packages registry that
        supports granular permissions, the authenticated user must have admin
        permissions to the package. For the list of these registries, see
        "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` and `write:packages` scopes to use this endpoint. If the
        `package_type` belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/restore-package-version-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#restore-package-version-for-a-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/package-version-id'
      responses:
        '204':
          description: Response
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /users/{username}/projects:
    get:
      summary: List user projects
      description: Lists projects for a user.
      tags:
        - - - - projects
      operationId: projects/list-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/projects/projects#list-user-projects
      parameters:
        - $ref: '#/components/parameters/username'
        - name: state
          description: Indicates the state of the projects to return.
          in: query
          required: false
          schema:
            type: string
            enum:
              - open
              - closed
              - all
            default: open
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/project'
              examples:
                default:
                  $ref: '#/components/examples/project-items-3'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: projects
        subcategory: projects
  /users/{username}/received_events:
    get:
      summary: List events received by the authenticated user
      description: >-
        These are events that you've received by watching repositories and
        following users. If you are authenticated as the given user, you will
        see private events. Otherwise, you'll only see public events.
      tags:
        - - - - activity
      operationId: activity/list-received-events-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/events#list-events-received-by-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/event'
              examples:
                default:
                  $ref: '#/components/examples/user-received-events-items'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: activity
        subcategory: events
  /users/{username}/received_events/public:
    get:
      summary: List public events received by a user
      description: ''
      tags:
        - - - - activity
      operationId: activity/list-received-public-events-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/events#list-public-events-received-by-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/event'
              examples:
                default:
                  $ref: '#/components/examples/user-received-public-events-items'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: activity
        subcategory: events
  /users/{username}/repos:
    get:
      summary: List repositories for a user
      description: Lists public repositories for the specified user.
      tags:
        - - - - repos
      operationId: repos/list-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#list-repositories-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - name: type
          description: Limit results to repositories of the specified type.
          in: query
          required: false
          schema:
            type: string
            enum:
              - all
              - owner
              - member
            default: owner
        - name: sort
          description: The property to sort the results by.
          in: query
          required: false
          schema:
            type: string
            enum:
              - created
              - updated
              - pushed
              - full_name
            default: full_name
        - name: direction
          description: >-
            The order to sort by. Default: `asc` when using `full_name`,
            otherwise `desc`.
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
  /users/{username}/site_admin:
    put:
      summary: Promote a user to be a site administrator
      description: >-
        Note that you'll need to set `Content-Length` to zero when calling out
        to this endpoint. For more information, see "[HTTP
        method](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#http-method)."
      operationId: enterprise-admin/promote-user-to-be-site-administrator
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#promote-a-user-to-be-a-site-administrator
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
    delete:
      summary: Demote a site administrator
      description: You can demote any user account except your own.
      operationId: enterprise-admin/demote-site-administrator
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#demote-a-site-administrator
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
  /users/{username}/social_accounts:
    get:
      summary: List social accounts for a user
      description: >-
        Lists social media accounts for a user. This endpoint is accessible by
        anyone.
      tags:
        - - - - users
      operationId: users/list-social-accounts-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/social-accounts#list-social-accounts-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/social-account'
              examples:
                default:
                  $ref: '#/components/examples/social-account-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: social-accounts
  /users/{username}/ssh_signing_keys:
    get:
      summary: List SSH signing keys for a user
      description: >-
        Lists the SSH signing keys for a user. This operation is accessible by
        anyone.
      tags:
        - - - - users
      operationId: users/list-ssh-signing-keys-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/ssh-signing-keys#list-ssh-signing-keys-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ssh-signing-key'
              examples:
                default:
                  $ref: '#/components/examples/ssh-signing-key-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: ssh-signing-keys
  /users/{username}/starred:
    get:
      summary: List repositories starred by a user
      description: >-
        Lists repositories a user has starred.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.star+json`**: Includes a timestamp of when
        the star was created.
      tags:
        - - - - activity
      operationId: activity/list-repos-starred-by-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/starring#list-repositories-starred-by-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/sort-starred'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                anyOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/starred-repository'
                  - type: array
                    items:
                      $ref: '#/components/schemas/repository'
              examples:
                default-response:
                  $ref: '#/components/examples/repository-items-default-response'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: activity
        subcategory: starring
  /users/{username}/subscriptions:
    get:
      summary: List repositories watched by a user
      description: Lists repositories a user is watching.
      tags:
        - - - - activity
      operationId: activity/list-repos-watched-by-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/watching#list-repositories-watched-by-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: activity
        subcategory: watching
  /users/{username}/suspended:
    put:
      summary: Suspend a user
      description: >-
        If your GitHub instance uses [LDAP Sync with Active Directory LDAP
        servers](https://docs.github.com/enterprise-server@3.9/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap),
        Active Directory LDAP-authenticated users cannot be suspended through
        this API. If you attempt to suspend an Active Directory
        LDAP-authenticated user through this API, it will return a `403`
        response.


        You can suspend any user account except your own.


        Note that, if you choose not to pass any parameters, you'll need to set
        `Content-Length` to zero when calling out to this endpoint. For more
        information, see "[HTTP
        method](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#http-method)."
      operationId: enterprise-admin/suspend-user
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#suspend-a-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              nullable: true
              properties:
                reason:
                  type: string
                  description: >-
                    The reason the user is being suspended. This message will be
                    logged in the [audit
                    log](https://docs.github.com/enterprise-server@3.9/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/about-the-audit-log-for-your-enterprise).
                    If you don't provide a `reason`, it will default to
                    "Suspended via API by _SITE\_ADMINISTRATOR_", where
                    _SITE\_ADMINISTRATOR_ is the person who performed the
                    action.
            examples:
              reason:
                value:
                  reason: Suspended during leave of absence.
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
    delete:
      summary: Unsuspend a user
      description: >-
        If your GitHub instance uses [LDAP Sync with Active Directory LDAP
        servers](https://docs.github.com/enterprise-server@3.9/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap),
        this API is disabled and will return a `403` response. Active Directory
        LDAP-authenticated users cannot be unsuspended using the API.
      operationId: enterprise-admin/unsuspend-user
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#unsuspend-a-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
      requestBody:
        content:
          application/json:
            schema:
              type: object
              nullable: true
              properties:
                reason:
                  type: string
                  description: >-
                    The reason the user is being unsuspended. This message will
                    be logged in the [audit
                    log](https://docs.github.com/enterprise-server@3.9/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/about-the-audit-log-for-your-enterprise).
                    If you don't provide a `reason`, it will default to
                    "Unsuspended via API by _SITE\_ADMINISTRATOR_", where
                    _SITE\_ADMINISTRATOR_ is the person who performed the
                    action.
            examples:
              reason:
                value:
                  reason: Unsuspended after leave of absence.
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
components:
  schemas:
    ldap-mapping-user:
      title: Ldap Private User
      description: Ldap Private User
      type: object
      properties:
        ldap_dn:
          type: string
        login:
          type: string
          example: octocat
        id:
          type: integer
          example: 1
        node_id:
          type: string
          example: MDQ6VXNlcjE=
        avatar_url:
          type: string
          format: uri
          example: https://github.com/images/error/octocat_happy.gif
        gravatar_id:
          type: string
          example: 41d064eb2195891e12d0413f63227ea7
          nullable: true
        url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat
        followers_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/followers
        following_url:
          type: string
          example: https://api.github.com/users/octocat/following{/other_user}
        gists_url:
          type: string
          example: https://api.github.com/users/octocat/gists{/gist_id}
        starred_url:
          type: string
          example: https://api.github.com/users/octocat/starred{/owner}{/repo}
        subscriptions_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/subscriptions
        organizations_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/orgs
        repos_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/repos
        events_url:
          type: string
          example: https://api.github.com/users/octocat/events{/privacy}
        received_events_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/received_events
        type:
          type: string
          example: User
        site_admin:
          type: boolean
        name:
          type: string
          example: monalisa octocat
          nullable: true
        company:
          type: string
          example: GitHub
          nullable: true
        blog:
          type: string
          example: https://github.com/blog
          nullable: true
        location:
          type: string
          example: San Francisco
          nullable: true
        email:
          type: string
          format: email
          example: octocat@github.com
          nullable: true
        hireable:
          type: boolean
          nullable: true
        bio:
          type: string
          example: There once was...
          nullable: true
        twitter_username:
          type: string
          example: monalisa
          nullable: true
        public_repos:
          type: integer
          example: 2
        public_gists:
          type: integer
          example: 1
        followers:
          type: integer
          example: 20
        following:
          type: integer
          example: 0
        created_at:
          type: string
          format: date-time
          example: '2008-01-14T04:33:35Z'
        updated_at:
          type: string
          format: date-time
          example: '2008-01-14T04:33:35Z'
        private_gists:
          type: integer
          example: 81
        total_private_repos:
          type: integer
          example: 100
        owned_private_repos:
          type: integer
          example: 100
        disk_usage:
          type: integer
          example: 10000
        collaborators:
          type: integer
          example: 8
        two_factor_authentication:
          type: boolean
          example: true
        plan:
          type: object
          properties:
            collaborators:
              type: integer
            name:
              type: string
            space:
              type: integer
            private_repos:
              type: integer
          required:
            - collaborators
            - name
            - space
            - private_repos
        suspended_at:
          type: string
          format: date-time
          nullable: true
        business_plus:
          type: boolean
      required:
        - avatar_url
        - events_url
        - followers_url
        - following_url
        - gists_url
        - gravatar_id
        - html_url
        - id
        - node_id
        - login
        - organizations_url
        - received_events_url
        - repos_url
        - site_admin
        - starred_url
        - subscriptions_url
        - type
        - url
        - bio
        - blog
        - company
        - email
        - followers
        - following
        - hireable
        - location
        - name
        - public_gists
        - public_repos
        - created_at
        - updated_at
        - collaborators
        - disk_usage
        - owned_private_repos
        - private_gists
        - total_private_repos
        - two_factor_authentication
    authorization:
      title: Authorization
      description: >-
        The authorization for an OAuth app, GitHub App, or a Personal Access
        Token.
      type: object
      properties:
        id:
          type: integer
        url:
          type: string
          format: uri
        scopes:
          description: A list of scopes that this authorization is in.
          type: array
          items:
            type: string
          nullable: true
        token:
          type: string
        token_last_eight:
          type: string
          nullable: true
        hashed_token:
          type: string
          nullable: true
        app:
          type: object
          properties:
            client_id:
              type: string
            name:
              type: string
            url:
              type: string
              format: uri
          required:
            - client_id
            - name
            - url
        note:
          type: string
          nullable: true
        note_url:
          type: string
          format: uri
          nullable: true
        updated_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        fingerprint:
          type: string
          nullable: true
        user:
          $ref: '#/components/schemas/nullable-simple-user'
        installation:
          $ref: '#/components/schemas/nullable-scoped-installation'
        expires_at:
          type: string
          format: date-time
          nullable: true
      required:
        - app
        - id
        - note
        - note_url
        - scopes
        - token
        - hashed_token
        - token_last_eight
        - fingerprint
        - url
        - created_at
        - updated_at
        - expires_at
    enterprise-user-overview:
      title: Enterprise User Stats
      type: object
      properties:
        total_users:
          type: integer
        admin_users:
          type: integer
        suspended_users:
          type: integer
      required:
        - total_users
        - admin_users
        - suspended_users
    hovercard:
      title: Hovercard
      description: Hovercard
      type: object
      properties:
        contexts:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              octicon:
                type: string
            required:
              - message
              - octicon
      required:
        - contexts
    installation:
      title: Installation
      description: Installation
      type: object
      properties:
        id:
          description: The ID of the installation.
          type: integer
          example: 1
        account:
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/simple-user'
            - $ref: '#/components/schemas/enterprise'
        repository_selection:
          description: >-
            Describe whether all repositories have been selected or there's a
            selection involved
          type: string
          enum:
            - all
            - selected
        access_tokens_url:
          type: string
          format: uri
          example: https://api.github.com/app/installations/1/access_tokens
        repositories_url:
          type: string
          format: uri
          example: https://api.github.com/installation/repositories
        html_url:
          type: string
          format: uri
          example: https://github.com/organizations/github/settings/installations/1
        app_id:
          type: integer
          example: 1
        target_id:
          description: The ID of the user or organization this token is being scoped to.
          type: integer
        target_type:
          type: string
          example: Organization
        permissions:
          $ref: '#/components/schemas/app-permissions'
        events:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        single_file_name:
          type: string
          example: config.yaml
          nullable: true
        has_multiple_single_files:
          type: boolean
          example: true
        single_file_paths:
          type: array
          items:
            type: string
          example:
            - config.yml
            - .github/issue_TEMPLATE.md
        app_slug:
          type: string
          example: github-actions
        suspended_by:
          $ref: '#/components/schemas/nullable-simple-user'
        suspended_at:
          type: string
          format: date-time
          nullable: true
        contact_email:
          type: string
          example: '"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"'
          nullable: true
      required:
        - id
        - app_id
        - app_slug
        - target_id
        - target_type
        - single_file_name
        - repository_selection
        - access_tokens_url
        - html_url
        - repositories_url
        - events
        - account
        - permissions
        - created_at
        - updated_at
        - suspended_by
        - suspended_at
    package:
      title: Package
      description: A software package
      type: object
      properties:
        id:
          description: Unique identifier of the package.
          type: integer
          example: 1
        name:
          description: The name of the package.
          type: string
          example: super-linter
        package_type:
          type: string
          example: docker
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        url:
          type: string
          example: https://api.github.com/orgs/github/packages/container/super-linter
        html_url:
          type: string
          example: >-
            https://github.com/orgs/github/packages/container/package/super-linter
        version_count:
          description: The number of versions of the package.
          type: integer
          example: 1
        visibility:
          type: string
          example: private
          enum:
            - private
            - public
        owner:
          $ref: '#/components/schemas/nullable-simple-user'
        repository:
          $ref: '#/components/schemas/nullable-minimal-repository'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - package_type
        - visibility
        - url
        - html_url
        - version_count
        - created_at
        - updated_at
    package-version:
      title: Package Version
      description: A version of a software package
      type: object
      properties:
        id:
          description: Unique identifier of the package version.
          type: integer
          example: 1
        name:
          description: The name of the package version.
          type: string
          example: latest
        url:
          type: string
          example: >-
            https://api.github.com/orgs/github/packages/container/super-linter/versions/786068
        package_html_url:
          type: string
          example: >-
            https://github.com/orgs/github/packages/container/package/super-linter
        html_url:
          type: string
          example: >-
            https://github.com/orgs/github/packages/container/super-linter/786068
        license:
          type: string
          example: MIT
        description:
          type: string
        created_at:
          type: string
          format: date-time
          example: '2011-04-10T20:09:31Z'
        updated_at:
          type: string
          format: date-time
          example: '2014-03-03T18:58:10Z'
        deleted_at:
          type: string
          format: date-time
          example: '2014-03-03T18:58:10Z'
        metadata:
          type: object
          title: Package Version Metadata
          properties:
            package_type:
              type: string
              example: docker
              enum:
                - npm
                - maven
                - rubygems
                - docker
                - nuget
                - container
            container:
              type: object
              title: Container Metadata
              properties:
                tags:
                  type: array
                  items:
                    type: string
              required:
                - tags
            docker:
              type: object
              title: Docker Metadata
              properties:
                tag:
                  type: array
                  items:
                    type: string
              required:
                - tags
          required:
            - package_type
      required:
        - id
        - name
        - url
        - package_html_url
        - created_at
        - updated_at
