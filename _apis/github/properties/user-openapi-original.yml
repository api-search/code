openapi: 3.1.0
info:
  title: User
  description: Needs a description.
paths:
  /admin/ldap/users/{username}/mapping:
    patch:
      summary: Update LDAP mapping for a user
      description: ''
      operationId: enterprise-admin/update-ldap-mapping-for-user
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/ldap#update-ldap-mapping-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ldap-mapping-user'
              examples:
                default:
                  $ref: '#/components/examples/ldap-mapping-user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ldap_dn:
                  type: string
                  description: >-
                    The [distinguished
                    name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the
                    LDAP entry to map to a team.
              required:
                - ldap_dn
            examples:
              default:
                value:
                  ldap_dn: uid=asdf,ou=users,dc=github,dc=com
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: ldap
  /admin/ldap/users/{username}/sync:
    post:
      summary: Sync LDAP mapping for a user
      description: >-
        Note that this API call does not automatically initiate an LDAP sync.
        Rather, if a `201` is returned, the sync job is queued successfully, and
        is performed when the instance is ready.
      operationId: enterprise-admin/sync-ldap-mapping-for-user
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/ldap#sync-ldap-mapping-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
              examples:
                default:
                  value:
                    status: queued
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: ldap
  /admin/users:
    post:
      summary: Create a user
      description: >-
        If an external authentication mechanism is used, the login name should
        match the login name in the external system. If you are using LDAP
        authentication, you should also [update the LDAP
        mapping](https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/ldap#update-ldap-mapping-for-a-user)
        for the user.


        The login name will be normalized to only contain alphanumeric
        characters or single hyphens. For example, if you send `"octo_cat"` as
        the login, a user named `"octo-cat"` will be created.


        If the login name or email address is already associated with an
        account, the server will return a `422` response.
      operationId: enterprise-admin/create-user
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#create-a-user
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: The user's username.
                email:
                  type: string
                  description: >-
                    **Required for built-in authentication.** The user's email

                    address. This parameter can be omitted when using CAS, LDAP,
                    or SAML.

                    For more information, see "[About authentication for your
                    enterprise](https://docs.github.com/enterprise-server@3.9/admin/identity-and-access-management/managing-iam-for-your-enterprise/about-authentication-for-your-enterprise)."
                suspended:
                  type: boolean
                  description: >-
                    Whether to set the user as suspended when the user is
                    created.
                  default: false
              required:
                - login
            examples:
              default:
                value:
                  login: monalisa
                  email: octocat@github.com
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
  /admin/users/{username}:
    patch:
      summary: Update the username for a user
      description: ''
      operationId: enterprise-admin/update-username-for-user
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#update-the-username-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '202':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  url:
                    type: string
              examples:
                default:
                  value:
                    message: >-
                      Job queued to rename user. It may take a few minutes to
                      complete.
                    url: https://api.github.com/user/1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: The user's new username.
              required:
                - login
            examples:
              default:
                value:
                  login: thenewmonalisa
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
    delete:
      summary: Delete a user
      description: >-
        Deleting a user will delete all their repositories, gists, applications,
        and personal settings. [Suspending a
        user](https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#suspend-a-user)
        is often a better option.


        You can delete any user account except your own.
      operationId: enterprise-admin/delete-user
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#delete-a-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
  /admin/users/{username}/authorizations:
    post:
      summary: Create an impersonation OAuth token
      description: ''
      operationId: enterprise-admin/create-impersonation-o-auth-token
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#create-an-impersonation-oauth-token
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response when getting an existing impersonation OAuth token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authorization'
              examples:
                default:
                  $ref: '#/components/examples/authorization'
        '201':
          description: Response when creating a new impersonation OAuth token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authorization'
              examples:
                default:
                  $ref: '#/components/examples/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                scopes:
                  type: array
                  description: >-
                    A list of
                    [scopes](https://docs.github.com/enterprise-server@3.9/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
                  items:
                    type: string
              required:
                - scopes
            examples:
              default:
                value:
                  scopes:
                    - public_repo
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
    delete:
      summary: Delete an impersonation OAuth token
      description: ''
      operationId: enterprise-admin/delete-impersonation-o-auth-token
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#delete-an-impersonation-oauth-token
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
  /enterprise/stats/users:
    get:
      summary: Get users statistics
      description: ''
      operationId: enterprise-admin/get-user-stats
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/admin-stats#get-users-statistics
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/enterprise-user-overview'
              examples:
                default:
                  value:
                    total_users: 100
                    admin_users: 3
                    suspended_users: 1
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: admin-stats
  /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users:
    get:
      summary: Get users with access to the protected branch
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Lists the people who have push access to this branch.
      tags:
        - - - - repos
      operationId: repos/get-users-with-access-to-protected-branch
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#get-users-with-access-to-the-protected-branch
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    post:
      summary: Add user access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Grants the specified people push access for this branch.


        | Type    |
        Description                                                                                                                  
        |

        | - | -- |

        | `array` | Usernames for people who can have push access. **Note**: The
        list of users, apps, and teams in total is limited to 100 items. |
      tags:
        - - - - repos
      operationId: repos/add-user-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#add-user-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    users:
                      type: array
                      description: The username for users
                      items:
                        type: string
                  required:
                    - users
                  example:
                    users:
                      - mona
                - type: array
                  items:
                    type: string
            examples:
              default:
                summary: Example adding a user in a branch protection rule
                value:
                  users:
                    - octocat
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: users
        category: branches
        subcategory: branch-protection
    put:
      summary: Set user access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Replaces the list of people that have push access to this branch. This
        removes all people that previously had push access and grants push
        access to the new list of people.


        | Type    |
        Description                                                                                                                  
        |

        | - | -- |

        | `array` | Usernames for people who can have push access. **Note**: The
        list of users, apps, and teams in total is limited to 100 items. |
      tags:
        - - - - repos
      operationId: repos/set-user-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#set-user-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    users:
                      type: array
                      description: The username for users
                      items:
                        type: string
                  required:
                    - users
                  example:
                    users:
                      - mona
                - type: array
                  items:
                    type: string
            examples:
              default:
                summary: Example replacing a user in a branch protection rule
                value:
                  users:
                    - octocat
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: users
        category: branches
        subcategory: branch-protection
    delete:
      summary: Remove user access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Removes the ability of a user to push to this branch.


        | Type    |
        Description                                                                                                                                  
        |

        | - |

        |

        | `array` | Usernames of the people who should no longer have push
        access. **Note**: The list of users, apps, and teams in total is limited
        to 100 items. |
      tags:
        - - - - repos
      operationId: repos/remove-user-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#remove-user-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    users:
                      type: array
                      description: The username for users
                      items:
                        type: string
                  required:
                    - users
                  example:
                    users:
                      - mona
                - type: array
                  items:
                    type: string
            examples:
              default:
                summary: Example removing a user in a branch protection rule
                value:
                  users:
                    - octocat
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: users
        category: branches
        subcategory: branch-protection
  /search/users:
    get:
      summary: Search users
      description: >-
        Find users via various criteria. This method returns up to 100 results
        [per
        page](https://docs.github.com/enterprise-server@3.9/rest/guides/using-pagination-in-the-rest-api).


        When searching for users, you can get text match metadata for the issue
        **login**, public **email**, and **name** fields when you pass the
        `text-match` media type. For more details about highlighting search
        results, see [Text match
        metadata](https://docs.github.com/enterprise-server@3.9/rest/search/search#text-match-metadata).
        For more details about how to receive highlighted search results, see
        [Text match
        metadata](https://docs.github.com/enterprise-server@3.9/rest/search/search#text-match-metadata).


        For example, if you're looking for a list of popular users, you might
        try this query:


        `q=tom+repos:%3E42+followers:%3E1000`


        This query searches for users with the name `tom`. The results are
        restricted to users with more than 42 repositories and over 1,000
        followers.


        This endpoint does not accept authentication and will only include
        publicly visible users. As an alternative, you can use the GraphQL API.
        The GraphQL API requires authentication and will return private users,
        including Enterprise Managed Users (EMUs), that you are authorized to
        view. For more information, see "[GraphQL
        Queries](https://docs.github.com/enterprise-server@3.9/graphql/reference/queries#search)."
      tags:
        - - - - search
      operationId: search/users
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/search/search#search-users
      parameters:
        - name: q
          description: >-
            The query contains one or more search keywords and qualifiers.
            Qualifiers allow you to limit your search to specific areas of
            GitHub Enterprise Server. The REST API supports the same qualifiers
            as the web interface for GitHub Enterprise Server. To learn more
            about the format of the query, see [Constructing a search
            query](https://docs.github.com/enterprise-server@3.9/rest/search/search#constructing-a-search-query).
            See "[Searching
            users](https://docs.github.com/enterprise-server@3.9/search-github/searching-on-github/searching-users)"
            for a detailed list of qualifiers.
          in: query
          required: true
          schema:
            type: string
        - name: sort
          description: >-
            Sorts the results of your query by number of `followers` or
            `repositories`, or when the person `joined` GitHub Enterprise
            Server. Default: [best
            match](https://docs.github.com/enterprise-server@3.9/rest/search/search#ranking-search-results)
          in: query
          required: false
          schema:
            type: string
            enum:
              - followers
              - repositories
              - joined
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - incomplete_results
                  - items
                properties:
                  total_count:
                    type: integer
                  incomplete_results:
                    type: boolean
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/user-search-result-item'
              examples:
                default:
                  $ref: '#/components/examples/user-search-result-item-paginated'
        '304':
          $ref: '#/components/responses/not_modified'
        '422':
          $ref: '#/components/responses/validation_failed'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: search
        subcategory: search
  /user:
    get:
      summary: Get the authenticated user
      description: >-
        OAuth app tokens and personal access tokens (classic) need the `user`
        scope in order for the response to include private profile information.
      tags:
        - - - - users
      operationId: users/get-authenticated
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/users#get-the-authenticated-user
      parameters: []
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/private-user'
                  - $ref: '#/components/schemas/public-user'
              examples:
                response-with-public-and-private-profile-information:
                  $ref: >-
                    #/components/examples/private-user-response-with-public-and-private-profile-information
                response-with-public-profile-information:
                  $ref: >-
                    #/components/examples/private-user-response-with-public-profile-information
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: users
    patch:
      summary: Update the authenticated user
      description: >-
        **Note:** If your email is set to private and you send an `email`
        parameter as part of this request to update your profile, your privacy
        settings are still enforced: the email address will not be displayed on
        your public profile or via the API.
      tags:
        - - - - users
      operationId: users/update-authenticated
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/users#update-the-authenticated-user
      parameters: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The new name of the user.
                  type: string
                  example: Omar Jahandar
                email:
                  description: The publicly visible email address of the user.
                  type: string
                  example: omar@example.com
                blog:
                  description: The new blog URL of the user.
                  type: string
                  example: blog.example.com
                twitter_username:
                  description: The new Twitter username of the user.
                  type: string
                  example: therealomarj
                  nullable: true
                company:
                  description: The new company of the user.
                  type: string
                  example: Acme corporation
                location:
                  description: The new location of the user.
                  type: string
                  example: Berlin, Germany
                hireable:
                  description: The new hiring availability of the user.
                  type: boolean
                bio:
                  description: The new short biography of the user.
                  type: string
            examples:
              default:
                summary: Example of updating blog and name
                value:
                  blog: https://github.com/blog
                  name: monalisa octocat
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/private-user'
              examples:
                default:
                  $ref: '#/components/examples/private-user'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: users
  /user/docker/conflicts:
    get:
      summary: >-
        Get list of conflicting packages during Docker migration for
        authenticated-user
      description: >-
        Lists all packages that are owned by the authenticated user within the
        user's namespace, and that encountered a conflict during a Docker
        migration.


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` scope to use this endpoint.
      tags:
        - - - - packages
      operationId: >-
        packages/list-docker-migration-conflicting-packages-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#get-list-of-conflicting-packages-during-docker-migration-for-authenticated-user
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/package'
              examples:
                default:
                  $ref: '#/components/examples/packages-for-user'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /user/emails:
    get:
      summary: List email addresses for the authenticated user
      description: >-
        Lists all of your email addresses, and specifies which one is visible

        to the public.


        OAuth app tokens and personal access tokens (classic) need the
        `user:email` scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/list-emails-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/emails#list-email-addresses-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/email'
              examples:
                default:
                  $ref: '#/components/examples/email-items-2'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: emails
    post:
      summary: Add an email address for the authenticated user
      description: >-
        OAuth app tokens and personal access tokens (classic) need the `user`
        scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/add-email-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/emails#add-an-email-address-for-the-authenticated-user
      parameters: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    emails:
                      description: >-
                        Adds one or more email addresses to your GitHub account.
                        Must contain at least one email address. **Note:**
                        Alternatively, you can pass a single email address or an
                        `array` of emails addresses directly, but we recommend
                        that you pass an object using the `emails` key.
                      type: array
                      items:
                        type: string
                        example: username@example.com
                        minItems: 1
                      example: []
                  required:
                    - emails
                  example:
                    emails:
                      - octocat@github.com
                      - mona@github.com
                - type: array
                  items:
                    type: string
                    example: username@example.com
                    minItems: 1
                - type: string
            examples:
              default:
                summary: Example adding multiple email addresses
                value:
                  emails:
                    - octocat@github.com
                    - mona@github.com
                    - octocat@octocat.org
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/email'
              examples:
                default:
                  $ref: '#/components/examples/email-items'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: emails
    delete:
      summary: Delete an email address for the authenticated user
      description: >-
        OAuth app tokens and personal access tokens (classic) need the `user`
        scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/delete-email-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/emails#delete-an-email-address-for-the-authenticated-user
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  description: >-
                    Deletes one or more email addresses from your GitHub
                    account. Must contain at least one email address. **Note:**
                    Alternatively, you can pass a single email address or an
                    `array` of emails addresses directly, but we recommend that
                    you pass an object using the `emails` key.
                  properties:
                    emails:
                      description: Email addresses associated with the GitHub user account.
                      type: array
                      items:
                        type: string
                        example: username@example.com
                        minItems: 1
                  example:
                    emails:
                      - octocat@github.com
                      - mona@github.com
                  required:
                    - emails
                - type: array
                  items:
                    type: string
                    example: username@example.com
                    minItems: 1
                - type: string
            examples:
              default:
                summary: Example deleting multiple email accounts
                value:
                  emails:
                    - octocat@github.com
                    - mona@github.com
      responses:
        '204':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: emails
  /user/followers:
    get:
      summary: List followers of the authenticated user
      description: Lists the people following the authenticated user.
      tags:
        - - - - users
      operationId: users/list-followers-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/followers#list-followers-of-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: followers
  /user/following:
    get:
      summary: List the people the authenticated user follows
      description: Lists the people who the authenticated user follows.
      tags:
        - - - - users
      operationId: users/list-followed-by-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/followers#list-the-people-the-authenticated-user-follows
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: followers
  /user/following/{username}:
    get:
      summary: Check if a person is followed by the authenticated user
      description: ''
      tags:
        - - - - users
      operationId: users/check-person-is-followed-by-authenticated
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/followers#check-if-a-person-is-followed-by-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: if the person is followed by the authenticated user
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: if the person is not followed by the authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/basic-error'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: followers
    put:
      summary: Follow a user
      description: >-
        Note that you'll need to set `Content-Length` to zero when calling out
        to this endpoint. For more information, see "[HTTP
        verbs](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#http-method)."


        OAuth app tokens and personal access tokens (classic) need the
        `user:follow` scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/follow
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/followers#follow-a-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: followers
    delete:
      summary: Unfollow a user
      description: >-
        OAuth app tokens and personal access tokens (classic) need the
        `user:follow` scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/unfollow
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/followers#unfollow-a-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: followers
  /user/gpg_keys:
    get:
      summary: List GPG keys for the authenticated user
      description: >-
        Lists the current user's GPG keys.


        OAuth app tokens and personal access tokens (classic) need the
        `read:gpg_key` scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/list-gpg-keys-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/gpg-keys#list-gpg-keys-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/gpg-key'
              examples:
                default:
                  $ref: '#/components/examples/gpg-key-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: gpg-keys
    post:
      summary: Create a GPG key for the authenticated user
      description: >-
        Adds a GPG key to the authenticated user's GitHub account.


        OAuth app tokens and personal access tokens (classic) need the
        `write:gpg_key` scope to use this endpoint.
      operationId: users/create-gpg-key-for-authenticated-user
      tags:
        - - - - users
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/gpg-keys#create-a-gpg-key-for-the-authenticated-user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  description: A descriptive name for the new key.
                  type: string
                armored_public_key:
                  description: A GPG key in ASCII-armored format.
                  type: string
              type: object
              required:
                - armored_public_key
            examples:
              default:
                value:
                  name: Octocat's GPG Key
                  armored_public_key: |-
                    --BEGIN PGP PUBLIC KEY BLOCK--
                    Version: GnuPG v1

                    mQINBFnZ2ZIBEADQ2Z7Z7
                    --END PGP PUBLIC KEY BLOCK--
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gpg-key'
              examples:
                default:
                  $ref: '#/components/examples/gpg-key'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: gpg-keys
  /user/gpg_keys/{gpg_key_id}:
    get:
      summary: Get a GPG key for the authenticated user
      description: >-
        View extended details for a single GPG key.


        OAuth app tokens and personal access tokens (classic) need the
        `read:gpg_key` scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/get-gpg-key-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/gpg-keys#get-a-gpg-key-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/gpg-key-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gpg-key'
              examples:
                default:
                  $ref: '#/components/examples/gpg-key'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: gpg-keys
    delete:
      summary: Delete a GPG key for the authenticated user
      description: >-
        Removes a GPG key from the authenticated user's GitHub account.


        OAuth app tokens and personal access tokens (classic) need the
        `admin:gpg_key` scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/delete-gpg-key-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/gpg-keys#delete-a-gpg-key-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/gpg-key-id'
      responses:
        '204':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: gpg-keys
  /user/installations:
    get:
      summary: List app installations accessible to the user access token
      description: >-
        Lists installations of your GitHub App that the authenticated user has
        explicit permission (`:read`, `:write`, or `:admin`) to access.


        The authenticated user has explicit permission to access repositories
        they own, repositories where they are a collaborator, and repositories
        that they can access through an organization membership.


        You can find the permissions for the installation under the
        `permissions` key.
      tags:
        - - - - apps
      operationId: apps/list-installations-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/apps/installations#list-app-installations-accessible-to-the-user-access-token
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: >-
            You can find the permissions for the installation under the
            `permissions` key.
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - installations
                properties:
                  total_count:
                    type: integer
                  installations:
                    type: array
                    items:
                      $ref: '#/components/schemas/installation'
              examples:
                default:
                  $ref: >-
                    #/components/examples/base-installation-for-auth-user-paginated
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: apps
        subcategory: installations
  /user/installations/{installation_id}/repositories:
    get:
      summary: List repositories accessible to the user access token
      description: >-
        List repositories that the authenticated user has explicit permission
        (`:read`, `:write`, or `:admin`) to access for an installation.


        The authenticated user has explicit permission to access repositories
        they own, repositories where they are a collaborator, and repositories
        that they can access through an organization membership.


        The access the user has to each repository is included in the hash under
        the `permissions` key.
      tags:
        - - - - apps
      operationId: apps/list-installation-repos-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/apps/installations#list-repositories-accessible-to-the-user-access-token
      parameters:
        - $ref: '#/components/parameters/installation-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: >-
            The access the user has to each repository is included in the hash
            under the `permissions` key.
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - repositories
                properties:
                  total_count:
                    type: integer
                  repository_selection:
                    type: string
                  repositories:
                    type: array
                    items:
                      $ref: '#/components/schemas/repository'
              examples:
                default:
                  $ref: '#/components/examples/repository-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: apps
        subcategory: installations
  /user/installations/{installation_id}/repositories/{repository_id}:
    put:
      summary: Add a repository to an app installation
      description: >-
        Add a single repository to an installation. The authenticated user must
        have admin access to the repository.
      tags:
        - - - - apps
      operationId: apps/add-repo-to-installation-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/apps/installations#add-a-repository-to-an-app-installation
      parameters:
        - $ref: '#/components/parameters/installation-id'
        - $ref: '#/components/parameters/repository-id'
      responses:
        '204':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: apps
        subcategory: installations
    delete:
      summary: Remove a repository from an app installation
      description: >-
        Remove a single repository from an installation. The authenticated user
        must have admin access to the repository.


        You must use a personal access token (which you can create via the
        [command
        line](https://docs.github.com/enterprise-server@3.9/github/authenticating-to-github/creating-a-personal-access-token)
        or [Basic
        Authentication](https://docs.github.com/enterprise-server@3.9/rest/overview/other-authentication-methods#basic-authentication))
        to access this endpoint.
      tags:
        - - - - apps
      operationId: apps/remove-repo-from-installation-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/apps/installations#remove-a-repository-from-an-app-installation
      parameters:
        - $ref: '#/components/parameters/installation-id'
        - $ref: '#/components/parameters/repository-id'
      responses:
        '204':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: apps
        subcategory: installations
  /user/issues:
    get:
      summary: List user account issues assigned to the authenticated user
      description: >-
        List issues across owned and member repositories assigned to the
        authenticated user.


        **Note**: GitHub's REST API considers every pull request an issue, but
        not every issue is a pull request. For this

        reason, "Issues" endpoints may return both issues and pull requests in
        the response. You can identify pull requests by

        the `pull_request` key. Be aware that the `id` of a pull request
        returned from "Issues" endpoints will be an _issue id_. To find out the
        pull

        request id, use the "[List pull
        requests](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#list-pull-requests)"
        endpoint.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/list-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/issues#list-user-account-issues-assigned-to-the-authenticated-user
      parameters:
        - name: filter
          description: >-
            Indicates which sorts of issues to return. `assigned` means issues
            assigned to you. `created` means issues created by you. `mentioned`
            means issues mentioning you. `subscribed` means issues you're
            subscribed to updates for. `all` or `repos` means all issues you can
            see, regardless of participation or creation.
          in: query
          required: false
          schema:
            type: string
            enum:
              - assigned
              - created
              - mentioned
              - subscribed
              - repos
              - all
            default: assigned
        - name: state
          description: Indicates the state of the issues to return.
          in: query
          required: false
          schema:
            type: string
            enum:
              - open
              - closed
              - all
            default: open
        - $ref: '#/components/parameters/labels'
        - name: sort
          description: What to sort results by.
          in: query
          required: false
          schema:
            type: string
            enum:
              - created
              - updated
              - comments
            default: created
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/since'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/issue'
              examples:
                default:
                  $ref: '#/components/examples/issue-with-repo-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: issues
        subcategory: issues
  /user/keys:
    get:
      summary: List public SSH keys for the authenticated user
      description: >-
        Lists the public SSH keys for the authenticated user's GitHub account.


        OAuth app tokens and personal access tokens (classic) need the
        `read:public_key` scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/list-public-ssh-keys-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/keys#list-public-ssh-keys-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/key'
              examples:
                default:
                  $ref: '#/components/examples/key-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: keys
    post:
      summary: Create a public SSH key for the authenticated user
      description: >-
        Adds a public SSH key to the authenticated user's GitHub account.


        OAuth app tokens and personal access tokens (classic) need the
        `write:gpg_key` scope to use this endpoint.
      operationId: users/create-public-ssh-key-for-authenticated-user
      tags:
        - - - - users
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/keys#create-a-public-ssh-key-for-the-authenticated-user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                title:
                  description: A descriptive name for the new key.
                  type: string
                  example: Personal MacBook Air
                key:
                  description: The public SSH key to add to your GitHub account.
                  type: string
                  pattern: '^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) '
              required:
                - key
              type: object
            examples:
              default:
                value:
                  title: ssh-rsa AAAAB3NzaC1yc2EAAA
                  key: 2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/key'
              examples:
                default:
                  $ref: '#/components/examples/key'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: keys
  /user/keys/{key_id}:
    get:
      summary: Get a public SSH key for the authenticated user
      description: >-
        View extended details for a single public SSH key.


        OAuth app tokens and personal access tokens (classic) need the
        `read:public_key` scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/get-public-ssh-key-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/keys#get-a-public-ssh-key-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/key-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/key'
              examples:
                default:
                  $ref: '#/components/examples/key'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: keys
    delete:
      summary: Delete a public SSH key for the authenticated user
      description: >-
        Removes a public SSH key from the authenticated user's GitHub account.


        OAuth app tokens and personal access tokens (classic) need the
        `admin:public_key` scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/delete-public-ssh-key-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/keys#delete-a-public-ssh-key-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/key-id'
      responses:
        '204':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: keys
  /user/memberships/orgs:
    get:
      summary: List organization memberships for the authenticated user
      description: Lists all of the authenticated user's organization memberships.
      tags:
        - - - - orgs
      operationId: orgs/list-memberships-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/orgs/members#list-organization-memberships-for-the-authenticated-user
      parameters:
        - name: state
          description: >-
            Indicates the state of the memberships to return. If not specified,
            the API returns both active and pending memberships.
          in: query
          required: false
          schema:
            type: string
            enum:
              - active
              - pending
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/org-membership'
              examples:
                default:
                  $ref: '#/components/examples/org-membership-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: orgs
        subcategory: members
  /user/memberships/orgs/{org}:
    get:
      summary: Get an organization membership for the authenticated user
      description: >-
        If the authenticated user is an active or pending member of the
        organization, this endpoint will return the user's membership. If the
        authenticated user is not affiliated with the organization, a `404` is
        returned. This endpoint will return a `403` if the request is made by a
        GitHub App that is blocked by the organization.
      tags:
        - - - - orgs
      operationId: orgs/get-membership-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/orgs/members#get-an-organization-membership-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/org'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-membership'
              examples:
                default:
                  $ref: '#/components/examples/org-membership'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: orgs
        subcategory: members
    patch:
      summary: Update an organization membership for the authenticated user
      description: >-
        Converts the authenticated user to an active member of the organization,
        if that user has a pending invitation from the organization.
      tags:
        - - - - orgs
      operationId: orgs/update-membership-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/orgs/members#update-an-organization-membership-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/org'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                  description: >-
                    The state that the membership should be in. Only `"active"`
                    will be accepted.
                  enum:
                    - active
              required:
                - state
            examples:
              default:
                value:
                  state: active
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-membership'
              examples:
                default:
                  $ref: '#/components/examples/org-membership-2'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: orgs
        subcategory: members
  /user/migrations:
    get:
      summary: List user migrations
      description: Lists all migrations a user has started.
      tags:
        - - - - migrations
      operationId: migrations/list-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/migrations/users#list-user-migrations
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/migration'
              examples:
                default:
                  $ref: '#/components/examples/migration-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: migrations
        subcategory: users
    post:
      summary: Start a user migration
      description: Initiates the generation of a user migration archive.
      tags:
        - - - - migrations
      operationId: migrations/start-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/migrations/users#start-a-user-migration
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                lock_repositories:
                  description: >-
                    Lock the repositories being migrated at the start of the
                    migration
                  example: true
                  readOnly: false
                  type: boolean
                exclude_metadata:
                  description: >-
                    Indicates whether metadata should be excluded and only git
                    source should be included for the migration.
                  example: true
                  readOnly: false
                  type: boolean
                exclude_git_data:
                  description: >-
                    Indicates whether the repository git data should be excluded
                    from the migration.
                  example: true
                  readOnly: false
                  type: boolean
                exclude_attachments:
                  description: Do not include attachments in the migration
                  example: true
                  readOnly: false
                  type: boolean
                exclude_releases:
                  description: Do not include releases in the migration
                  example: true
                  readOnly: false
                  type: boolean
                exclude_owner_projects:
                  description: >-
                    Indicates whether projects owned by the organization or
                    users should be excluded.
                  example: true
                  readOnly: false
                  type: boolean
                org_metadata_only:
                  type: boolean
                  example: true
                  description: >-
                    Indicates whether this should only include organization
                    metadata (repositories array should be empty and will ignore
                    other flags).
                  default: false
                exclude:
                  description: >-
                    Exclude attributes from the API response to improve
                    performance
                  example:
                    - repositories
                  readOnly: false
                  type: array
                  items:
                    description: Allowed values that can be passed to the exclude param.
                    enum:
                      - repositories
                    example: repositories
                    type: string
                repositories:
                  type: array
                  items:
                    description: Repository path, owner and name
                    example: acme/widgets
                    type: string
              required:
                - repositories
              type: object
            examples:
              default:
                value:
                  repositories:
                    - octocat/Hello-World
                  lock_repositories: true
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/migration'
              examples:
                default:
                  $ref: '#/components/examples/migration-2'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: migrations
        subcategory: users
  /user/migrations/{migration_id}/archive:
    get:
      summary: Download a user migration archive
      description: >-
        Fetches the URL to download the migration archive as a `tar.gz` file.
        Depending on the resources your repository uses, the migration archive
        can contain JSON files with data for these objects:


        *   attachments

        *   bases

        *   commit\_comments

        *   issue\_comments

        *   issue\_events

        *   issues

        *   milestones

        *   organizations

        *   projects

        *   protected\_branches

        *   pull\_request\_reviews

        *   pull\_requests

        *   releases

        *   repositories

        *   review\_comments

        *   schema

        *   users


        The archive will also contain an `attachments` directory that includes
        all attachment files uploaded to GitHub.com and a `repositories`
        directory that contains the repository's Git data.
      tags:
        - - - - migrations
      operationId: migrations/get-archive-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/migrations/users#download-a-user-migration-archive
      parameters:
        - $ref: '#/components/parameters/migration-id'
      responses:
        '302':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: migrations
        subcategory: users
  /user/migrations/{migration_id}/repositories:
    get:
      summary: List repositories for a user migration
      description: Lists all the repositories for this user migration.
      tags:
        - - - - migrations
      operationId: migrations/list-repos-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/migrations/users#list-repositories-for-a-user-migration
      parameters:
        - $ref: '#/components/parameters/migration-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: migrations
        subcategory: users
  /user/orgs:
    get:
      summary: List organizations for the authenticated user
      description: >-
        List organizations for the authenticated user.


        For OAuth app tokens and personal access tokens (classic), this endpoint
        only lists organizations that your authorization allows you to operate
        on in some way (e.g., you can list teams with `read:org` scope, you can
        publicize your organization membership with `user` scope, etc.).
        Therefore, this API requires at least `user` or `read:org` scope for
        OAuth app tokens and personal access tokens (classic). Requests with
        insufficient scope will receive a `403 Forbidden` response.
      tags:
        - - - - orgs
      operationId: orgs/list-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/orgs/orgs#list-organizations-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/organization-simple'
              examples:
                default:
                  $ref: '#/components/examples/organization-simple-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: orgs
        subcategory: orgs
  /user/packages:
    get:
      summary: List packages for the authenticated user's namespace
      description: >-
        Lists packages owned by the authenticated user within the user's
        namespace.


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` scope to use this endpoint. If the `package_type`
        belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/list-packages-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#list-packages-for-the-authenticated-users-namespace
      parameters:
        - name: package_type
          description: >-
            The type of supported package. Packages in GitHub's Gradle registry
            have the type `maven`. Docker images pushed to GitHub's Container
            registry (`ghcr.io`) have the type `container`. You can use the type
            `docker` to find images that were pushed to GitHub's Docker registry
            (`docker.pkg.github.com`), even if these have now been migrated to
            the Container registry.
          in: query
          required: true
          schema:
            type: string
            enum:
              - npm
              - maven
              - rubygems
              - docker
              - nuget
              - container
        - $ref: '#/components/parameters/package-visibility'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per-page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/package'
              examples:
                default:
                  $ref: '#/components/examples/packages-for-user'
        '400':
          $ref: '#/components/responses/package_es_list_error'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /user/packages/{package_type}/{package_name}:
    get:
      summary: Get a package for the authenticated user
      description: >-
        Gets a specific package for a package owned by the authenticated user.


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` scope to use this endpoint. If the `package_type`
        belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/get-package-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#get-a-package-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/package'
              examples:
                default:
                  $ref: '#/components/examples/package-user'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
    delete:
      summary: Delete a package for the authenticated user
      description: >-
        Deletes a package owned by the authenticated user. You cannot delete a
        public package if any version of the package has more than 5,000
        downloads. In this scenario, contact GitHub support for further
        assistance.


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` and `delete:packages` scopes to use this endpoint. If
        the `package_type` belongs to a GitHub Packages registry that only
        supports repository-scoped permissions, `repo` scope is also required.
        For the list these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/delete-package-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#delete-a-package-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
      responses:
        '204':
          description: Response
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /user/packages/{package_type}/{package_name}/restore:
    post:
      summary: Restore a package for the authenticated user
      description: >-
        Restores a package owned by the authenticated user.


        You can restore a deleted package under the following conditions:
          - The package was deleted within the last 30 days.
          - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.

        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` and `write:packages` scopes to use this endpoint. If the
        `package_type` belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/restore-package-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#restore-a-package-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - name: token
          description: package token
          schema:
            type: string
          required: false
          in: query
      responses:
        '204':
          description: Response
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /user/packages/{package_type}/{package_name}/versions:
    get:
      summary: List package versions for a package owned by the authenticated user
      description: >-
        Lists package versions for a package owned by the authenticated user.


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` scope to use this endpoint. If the `package_type`
        belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: >-
        packages/get-all-package-versions-for-package-owned-by-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#list-package-versions-for-a-package-owned-by-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per-page'
        - name: state
          in: query
          required: false
          description: The state of the package, either active or deleted.
          schema:
            type: string
            enum:
              - active
              - deleted
            default: active
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/package-version'
              examples:
                default:
                  $ref: >-
                    #/components/examples/package-versions-for-authenticated-user
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /user/packages/{package_type}/{package_name}/versions/{package_version_id}:
    get:
      summary: Get a package version for the authenticated user
      description: >-
        Gets a specific package version for a package owned by the authenticated
        user.


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` scope to use this endpoint. If the `package_type`
        belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/get-package-version-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#get-a-package-version-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/package-version-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/package-version'
              examples:
                default:
                  $ref: '#/components/examples/package-version-authenticated-user'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
    delete:
      summary: Delete a package version for the authenticated user
      description: >-
        Deletes a specific package version for a package owned by the
        authenticated user.  If the package is public and the package version
        has more than 5,000 downloads, you cannot delete the package version. In
        this scenario, contact GitHub support for further assistance.


        The authenticated user must have admin permissions in the organization
        to use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` and `delete:packages` scopes to use this endpoint. If
        the `package_type` belongs to a GitHub Packages registry that only
        supports repository-scoped permissions, the `repo` scope is also
        required. For the list of these registries, see "[About permissions for
        GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/delete-package-version-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#delete-a-package-version-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/package-version-id'
      responses:
        '204':
          description: Response
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore:
    post:
      summary: Restore a package version for the authenticated user
      description: >-
        Restores a package version owned by the authenticated user.


        You can restore a deleted package version under the following
        conditions:
          - The package was deleted within the last 30 days.
          - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.

        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` and `write:packages` scopes to use this endpoint. If the
        `package_type` belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/restore-package-version-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#restore-a-package-version-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/package-version-id'
      responses:
        '204':
          description: Response
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /user/projects:
    post:
      summary: Create a user project
      description: >-
        Creates a user project board. Returns a `410 Gone` status if the user
        does not have existing classic projects. If you do not have sufficient
        privileges to perform this action, a `401 Unauthorized` or `410 Gone`
        status is returned.
      tags:
        - - - - projects
      operationId: projects/create-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/projects/projects#create-a-user-project
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  description: Name of the project
                  example: Week One Sprint
                  type: string
                body:
                  description: Body of the project
                  example: >-
                    This project represents the sprint of the first week in
                    January
                  type: string
                  nullable: true
              required:
                - name
              type: object
            examples:
              default:
                summary: Create a new project
                value:
                  name: My Projects
                  body: A board to manage my personal projects.
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
              examples:
                default:
                  $ref: '#/components/examples/project'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed_simple'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: projects
        subcategory: projects
  /user/public_emails:
    get:
      summary: List public email addresses for the authenticated user
      description: >-
        Lists your publicly visible email address, which you can set with the

        [Set primary email visibility for the authenticated
        user](https://docs.github.com/enterprise-server@3.9/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user)

        endpoint.


        OAuth app tokens and personal access tokens (classic) need the
        `user:email` scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/list-public-emails-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/emails#list-public-email-addresses-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/email'
              examples:
                default:
                  $ref: '#/components/examples/email-items-2'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: emails
  /user/repos:
    get:
      summary: List repositories for the authenticated user
      description: >-
        Lists repositories that the authenticated user has explicit permission
        (`:read`, `:write`, or `:admin`) to access.


        The authenticated user has explicit permission to access repositories
        they own, repositories where they are a collaborator, and repositories
        that they can access through an organization membership.
      tags:
        - - - - repos
      operationId: repos/list-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#list-repositories-for-the-authenticated-user
      parameters:
        - name: visibility
          description: Limit results to repositories with the specified visibility.
          in: query
          required: false
          schema:
            type: string
            enum:
              - all
              - public
              - private
            default: all
        - name: affiliation
          description: |-
            Comma-separated list of values. Can include:  
             * `owner`: Repositories that are owned by the authenticated user.  
             * `collaborator`: Repositories that the user has been added to as a collaborator.  
             * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
          in: query
          required: false
          schema:
            type: string
            default: owner,collaborator,organization_member
        - name: type
          description: >-
            Limit results to repositories of the specified type. Will cause a
            `422` error if used in the same request as **visibility** or
            **affiliation**.
          in: query
          required: false
          schema:
            type: string
            enum:
              - all
              - owner
              - public
              - private
              - member
            default: all
        - name: sort
          description: The property to sort the results by.
          in: query
          required: false
          schema:
            type: string
            enum:
              - created
              - updated
              - pushed
              - full_name
            default: full_name
        - name: direction
          description: >-
            The order to sort by. Default: `asc` when using `full_name`,
            otherwise `desc`.
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/since-repo-date'
        - $ref: '#/components/parameters/before-repo-date'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/repository'
              examples:
                default:
                  $ref: '#/components/examples/repository-items-default-response'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: repos
        subcategory: repos
    post:
      summary: Create a repository for the authenticated user
      description: >-
        Creates a new repository for the authenticated user.


        OAuth app tokens and personal access tokens (classic) need the
        `public_repo` or `repo` scope to create a public repository, and `repo`
        scope to create a private repository.
      tags:
        - - - - repos
      operationId: repos/create-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#create-a-repository-for-the-authenticated-user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  description: The name of the repository.
                  type: string
                  example: Team Environment
                description:
                  description: A short description of the repository.
                  type: string
                homepage:
                  description: A URL with more information about the repository.
                  type: string
                private:
                  description: Whether the repository is private.
                  default: false
                  type: boolean
                has_issues:
                  description: Whether issues are enabled.
                  default: true
                  type: boolean
                  example: true
                has_projects:
                  description: Whether projects are enabled.
                  default: true
                  type: boolean
                  example: true
                has_wiki:
                  description: Whether the wiki is enabled.
                  default: true
                  type: boolean
                  example: true
                has_discussions:
                  description: Whether discussions are enabled.
                  default: false
                  type: boolean
                  example: true
                team_id:
                  description: >-
                    The id of the team that will be granted access to this
                    repository. This is only valid when creating a repository in
                    an organization.
                  type: integer
                auto_init:
                  description: Whether the repository is initialized with a minimal README.
                  default: false
                  type: boolean
                gitignore_template:
                  description: The desired language or platform to apply to the .gitignore.
                  example: Haskell
                  type: string
                license_template:
                  description: >-
                    The license keyword of the open source license for this
                    repository.
                  example: mit
                  type: string
                allow_squash_merge:
                  description: Whether to allow squash merges for pull requests.
                  default: true
                  type: boolean
                  example: true
                allow_merge_commit:
                  description: Whether to allow merge commits for pull requests.
                  default: true
                  type: boolean
                  example: true
                allow_rebase_merge:
                  description: Whether to allow rebase merges for pull requests.
                  default: true
                  type: boolean
                  example: true
                allow_auto_merge:
                  description: Whether to allow Auto-merge to be used on pull requests.
                  default: false
                  type: boolean
                  example: false
                delete_branch_on_merge:
                  description: >-
                    Whether to delete head branches when pull requests are
                    merged
                  default: false
                  type: boolean
                  example: false
                squash_merge_commit_title:
                  type: string
                  enum:
                    - PR_TITLE
                    - COMMIT_OR_PR_TITLE
                  description: >-
                    The default value for a squash merge commit title:


                    - `PR_TITLE` - default to the pull request's title.

                    - `COMMIT_OR_PR_TITLE` - default to the commit's title (if
                    only one commit) or the pull request's title (when more than
                    one commit).
                squash_merge_commit_message:
                  type: string
                  enum:
                    - PR_BODY
                    - COMMIT_MESSAGES
                    - BLANK
                  description: >-
                    The default value for a squash merge commit message:


                    - `PR_BODY` - default to the pull request's body.

                    - `COMMIT_MESSAGES` - default to the branch's commit
                    messages.

                    - `BLANK` - default to a blank commit message.
                merge_commit_title:
                  type: string
                  enum:
                    - PR_TITLE
                    - MERGE_MESSAGE
                  description: >-
                    The default value for a merge commit title.


                    - `PR_TITLE` - default to the pull request's title.

                    - `MERGE_MESSAGE` - default to the classic title for a merge
                    message (e.g., Merge pull request #123 from branch-name).
                merge_commit_message:
                  type: string
                  enum:
                    - PR_BODY
                    - PR_TITLE
                    - BLANK
                  description: |-
                    The default value for a merge commit message.

                    - `PR_TITLE` - default to the pull request's title.
                    - `PR_BODY` - default to the pull request's body.
                    - `BLANK` - default to a blank commit message.
                has_downloads:
                  description: Whether downloads are enabled.
                  default: true
                  type: boolean
                  example: true
                is_template:
                  description: >-
                    Whether this repository acts as a template that can be used
                    to generate new repositories.
                  default: false
                  type: boolean
                  example: true
              required:
                - name
              type: object
            examples:
              default:
                value:
                  name: Hello-World
                  description: This is your first repo!
                  homepage: https://github.com
                  private: false
                  is_template: true
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/full-repository'
              examples:
                default:
                  $ref: '#/components/examples/full-repository'
          headers:
            Location:
              example: https://api.github.com/repos/octocat/Hello-World
              schema:
                type: string
        '304':
          $ref: '#/components/responses/not_modified'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: repos
        subcategory: repos
  /user/repository_invitations:
    get:
      summary: List repository invitations for the authenticated user
      description: >-
        When authenticating as a user, this endpoint will list all currently
        open repository invitations for that user.
      tags:
        - - - - repos
      operationId: repos/list-invitations-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/collaborators/invitations#list-repository-invitations-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/repository-invitation'
              examples:
                default:
                  $ref: '#/components/examples/repository-invitation-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: collaborators
        subcategory: invitations
  /user/repository_invitations/{invitation_id}:
    patch:
      summary: Accept a repository invitation
      description: ''
      tags:
        - - - - repos
      operationId: repos/accept-invitation-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/collaborators/invitations#accept-a-repository-invitation
      parameters:
        - $ref: '#/components/parameters/invitation-id'
      responses:
        '204':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '409':
          $ref: '#/components/responses/conflict'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: collaborators
        subcategory: invitations
    delete:
      summary: Decline a repository invitation
      description: ''
      tags:
        - - - - repos
      operationId: repos/decline-invitation-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/collaborators/invitations#decline-a-repository-invitation
      parameters:
        - $ref: '#/components/parameters/invitation-id'
      responses:
        '204':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '409':
          $ref: '#/components/responses/conflict'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: collaborators
        subcategory: invitations
  /user/social_accounts:
    get:
      summary: List social accounts for the authenticated user
      description: Lists all of your social accounts.
      tags:
        - - - - users
      operationId: users/list-social-accounts-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/social-accounts#list-social-accounts-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/social-account'
              examples:
                default:
                  $ref: '#/components/examples/social-account-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: social-accounts
    post:
      summary: Add social accounts for the authenticated user
      description: >-
        Add one or more social accounts to the authenticated user's profile.


        OAuth app tokens and personal access tokens (classic) need the `user`
        scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/add-social-account-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/social-accounts#add-social-accounts-for-the-authenticated-user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                account_urls:
                  description: Full URLs for the social media profiles to add.
                  type: array
                  items:
                    type: string
                    example: https://twitter.com/github
                  example: []
              required:
                - account_urls
              example:
                account_urls:
                  - https://www.linkedin.com/company/github/
                  - https://twitter.com/github
            examples:
              default:
                summary: Adding multiple social accounts
                value:
                  account_urls:
                    - https://facebook.com/GitHub
                    - https://www.youtube.com/@GitHub
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/social-account'
              examples:
                default:
                  $ref: '#/components/examples/social-account-items'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: social-accounts
    delete:
      summary: Delete social accounts for the authenticated user
      description: >-
        Deletes one or more social accounts from the authenticated user's
        profile.


        OAuth app tokens and personal access tokens (classic) need the `user`
        scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/delete-social-account-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/social-accounts#delete-social-accounts-for-the-authenticated-user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                account_urls:
                  description: Full URLs for the social media profiles to delete.
                  type: array
                  items:
                    type: string
                    example: https://twitter.com/github
                  example: []
              required:
                - account_urls
              example:
                account_urls:
                  - https://www.linkedin.com/company/github/
                  - https://twitter.com/github
            examples:
              default:
                summary: Deleting multiple social accounts
                value:
                  account_urls:
                    - https://facebook.com/GitHub
                    - https://www.youtube.com/@GitHub
      responses:
        '204':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: social-accounts
  /user/ssh_signing_keys:
    get:
      summary: List SSH signing keys for the authenticated user
      description: >-
        Lists the SSH signing keys for the authenticated user's GitHub account.


        OAuth app tokens and personal access tokens (classic) need the
        `read:ssh_signing_key` scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/list-ssh-signing-keys-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/ssh-signing-keys#list-ssh-signing-keys-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ssh-signing-key'
              examples:
                default:
                  $ref: '#/components/examples/ssh-signing-key-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        previews: []
        category: users
        subcategory: ssh-signing-keys
    post:
      summary: Create a SSH signing key for the authenticated user
      description: >-
        Creates an SSH signing key for the authenticated user's GitHub account.


        OAuth app tokens and personal access tokens (classic) need the
        `write:ssh_signing_key` scope to use this endpoint.
      operationId: users/create-ssh-signing-key-for-authenticated-user
      tags:
        - - - - users
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/ssh-signing-keys#create-a-ssh-signing-key-for-the-authenticated-user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                title:
                  description: A descriptive name for the new key.
                  type: string
                  example: Personal MacBook Air
                key:
                  description: >-
                    The public SSH key to add to your GitHub account. For more
                    information, see "[Checking for existing SSH
                    keys](https://docs.github.com/enterprise-server@3.9/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."
                  type: string
                  pattern: >-
                    ^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521)
                    |^(sk-ssh-ed25519|sk-ecdsa-sha2-nistp256)@openssh.com 
              required:
                - key
              type: object
            examples:
              default:
                value:
                  key: 2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234
                  title: ssh-rsa AAAAB3NzaC1yc2EAAA
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ssh-signing-key'
              examples:
                default:
                  $ref: '#/components/examples/ssh-signing-key'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: ssh-signing-keys
  /user/ssh_signing_keys/{ssh_signing_key_id}:
    get:
      summary: Get an SSH signing key for the authenticated user
      description: >-
        Gets extended details for an SSH signing key.


        OAuth app tokens and personal access tokens (classic) need the
        `read:ssh_signing_key` scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/get-ssh-signing-key-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/ssh-signing-keys#get-an-ssh-signing-key-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/ssh-signing-key-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ssh-signing-key'
              examples:
                default:
                  $ref: '#/components/examples/ssh-signing-key'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: ssh-signing-keys
    delete:
      summary: Delete an SSH signing key for the authenticated user
      description: >-
        Deletes an SSH signing key from the authenticated user's GitHub account.


        OAuth app tokens and personal access tokens (classic) need the
        `admin:ssh_signing_key` scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/delete-ssh-signing-key-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/ssh-signing-keys#delete-an-ssh-signing-key-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/ssh-signing-key-id'
      responses:
        '204':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: ssh-signing-keys
  /user/starred:
    get:
      summary: List repositories starred by the authenticated user
      description: >-
        Lists repositories the authenticated user has starred.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.star+json`**: Includes a timestamp of when
        the star was created.
      tags:
        - - - - activity
      operationId: activity/list-repos-starred-by-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/starring#list-repositories-starred-by-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/sort-starred'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/repository'
              examples:
                default-response:
                  $ref: '#/components/examples/repository-items-default-response'
            application/vnd.github.v3.star+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/starred-repository'
              examples:
                alternative-response-with-star-creation-timestamps:
                  $ref: >-
                    #/components/examples/starred-repository-items-alternative-response-with-star-creation-timestamps
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: activity
        subcategory: starring
  /user/starred/{owner}/{repo}:
    get:
      summary: Check if a repository is starred by the authenticated user
      description: Whether the authenticated user has starred the repository.
      tags:
        - - - - activity
      operationId: activity/check-repo-is-starred-by-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/starring#check-if-a-repository-is-starred-by-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response if this repository is starred by you
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Not Found if this repository is not starred by you
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/basic-error'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: activity
        subcategory: starring
    put:
      summary: Star a repository for the authenticated user
      description: >-
        Note that you'll need to set `Content-Length` to zero when calling out
        to this endpoint. For more information, see "[HTTP
        method](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#http-method)."
      tags:
        - - - - activity
      operationId: activity/star-repo-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/starring#star-a-repository-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: activity
        subcategory: starring
    delete:
      summary: Unstar a repository for the authenticated user
      description: Unstar a repository that the authenticated user has previously starred.
      tags:
        - - - - activity
      operationId: activity/unstar-repo-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/starring#unstar-a-repository-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: activity
        subcategory: starring
  /user/subscriptions:
    get:
      summary: List repositories watched by the authenticated user
      description: Lists repositories the authenticated user is watching.
      tags:
        - - - - activity
      operationId: activity/list-watched-repos-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/watching#list-repositories-watched-by-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: activity
        subcategory: watching
  /user/teams:
    get:
      summary: List teams for the authenticated user
      description: >-
        List all of the teams across all of the organizations to which the
        authenticated

        user belongs.


        OAuth app tokens and personal access tokens (classic) need the `user`,
        `repo`, or `read:org` scope to use this endpoint.


        When using a fine-grained personal access token, the resource owner of
        the token must be a single organization, and the response will only
        include the teams from that organization.
      tags:
        - - - - teams
      operationId: teams/list-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#list-teams-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team-full'
              examples:
                default:
                  $ref: '#/components/examples/team-full-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: teams
        subcategory: teams
  /users:
    get:
      summary: List users
      description: >-
        Lists all users, in the order that they signed up on GitHub Enterprise
        Server. This list includes personal user accounts and organization
        accounts.


        Note: Pagination is powered exclusively by the `since` parameter. Use
        the [Link
        header](https://docs.github.com/enterprise-server@3.9/rest/guides/using-pagination-in-the-rest-api#using-link-headers)
        to get the URL for the next page of users.
      tags:
        - - - - users
      operationId: users/list
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/users#list-users
      parameters:
        - $ref: '#/components/parameters/since-user'
        - $ref: '#/components/parameters/per-page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
          headers:
            Link:
              example: <https://api.github.com/users?since=135>; rel="next"
              schema:
                type: string
        '304':
          $ref: '#/components/responses/not_modified'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: users
  /users/{username}:
    get:
      summary: Get a user
      description: >-
        Provides publicly available information about someone with a GitHub
        account.


        The `email` key in the following response is the publicly visible email
        address from your GitHub Enterprise Server [profile
        page](https://github.com/settings/profile). When setting up your
        profile, you can select a primary email address to be “public” which
        provides an email entry for this endpoint. If you do not set a public
        email address for `email`, then it will have a value of `null`. You only
        see publicly visible email addresses when authenticated with GitHub
        Enterprise Server. For more information, see
        [Authentication](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#authentication).


        The Emails API enables you to list all of your email addresses, and
        toggle a primary email to be visible publicly. For more information, see
        "[Emails
        API](https://docs.github.com/enterprise-server@3.9/rest/users/emails)".
      tags:
        - - - - users
      operationId: users/get-by-username
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/users#get-a-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/private-user'
                  - $ref: '#/components/schemas/public-user'
              examples:
                default-response:
                  $ref: '#/components/examples/public-user-default-response'
                response-with-git-hub-plan-information:
                  $ref: >-
                    #/components/examples/public-user-response-with-git-hub-plan-information
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: users
  /users/{username}/docker/conflicts:
    get:
      summary: Get list of conflicting packages during Docker migration for user
      description: >-
        Lists all packages that are in a specific user's namespace, that the
        requesting user has access to, and that encountered a conflict during
        Docker migration.


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` scope to use this endpoint.
      tags:
        - - - - packages
      operationId: packages/list-docker-migration-conflicting-packages-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#get-list-of-conflicting-packages-during-docker-migration-for-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/package'
              examples:
                default:
                  $ref: '#/components/examples/packages-for-user'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /users/{username}/events:
    get:
      summary: List events for the authenticated user
      description: >-
        If you are authenticated as the given user, you will see your private
        events. Otherwise, you'll only see public events.
      tags:
        - - - - activity
      operationId: activity/list-events-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/events#list-events-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/event'
              examples:
                default:
                  $ref: '#/components/examples/user-events-items'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: activity
        subcategory: events
  /users/{username}/events/orgs/{org}:
    get:
      summary: List organization events for the authenticated user
      description: >-
        This is the user's organization dashboard. You must be authenticated as
        the user to view this.
      tags:
        - - - - activity
      operationId: activity/list-org-events-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/events#list-organization-events-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/event'
              examples:
                default:
                  $ref: '#/components/examples/user-org-events-items'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: activity
        subcategory: events
  /users/{username}/events/public:
    get:
      summary: List public events for a user
      description: ''
      tags:
        - - - - activity
      operationId: activity/list-public-events-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/events#list-public-events-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/event'
              examples:
                default:
                  $ref: '#/components/examples/user-public-events-items'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: activity
        subcategory: events
  /users/{username}/followers:
    get:
      summary: List followers of a user
      description: Lists the people following the specified user.
      tags:
        - - - - users
      operationId: users/list-followers-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/followers#list-followers-of-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: followers
  /users/{username}/following:
    get:
      summary: List the people a user follows
      description: Lists the people who the specified user follows.
      tags:
        - - - - users
      operationId: users/list-following-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/followers#list-the-people-a-user-follows
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: followers
  /users/{username}/following/{target_user}:
    get:
      summary: Check if a user follows another user
      description: ''
      tags:
        - - - - users
      operationId: users/check-following-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/followers#check-if-a-user-follows-another-user
      parameters:
        - $ref: '#/components/parameters/username'
        - name: target_user
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: if the user follows the target user
        '404':
          description: if the user does not follow the target user
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: followers
  /users/{username}/gists:
    get:
      summary: List gists for a user
      description: 'Lists public gists for the specified user:'
      tags:
        - - - - gists
      operationId: gists/list-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/gists/gists#list-gists-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/since'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/base-gist'
              examples:
                default:
                  $ref: '#/components/examples/base-gist-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: gists
        subcategory: gists
  /users/{username}/gpg_keys:
    get:
      summary: List GPG keys for a user
      description: Lists the GPG keys for a user. This information is accessible by anyone.
      tags:
        - - - - users
      operationId: users/list-gpg-keys-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/gpg-keys#list-gpg-keys-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/gpg-key'
              examples:
                default:
                  $ref: '#/components/examples/gpg-key-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: gpg-keys
  /users/{username}/hovercard:
    get:
      summary: Get contextual information for a user
      description: >-
        Provides hovercard information. You can find out more about someone in
        relation to their pull requests, issues, repositories, and
        organizations.


        The `subject_type` and `subject_id` parameters provide context for the
        person's hovercard, which returns more information than without the
        parameters. For example, if you wanted to find out more about `octocat`
        who owns the `Spoon-Knife` repository via cURL, it would look like this:


        ```shell
         curl -u username:token
          https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
        ```


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - users
      operationId: users/get-context-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/users#get-contextual-information-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - name: subject_type
          description: >-
            Identifies which additional information you'd like to receive about
            the person's hovercard. Can be `organization`, `repository`,
            `issue`, `pull_request`. **Required** when using `subject_id`.
          in: query
          required: false
          schema:
            type: string
            enum:
              - organization
              - repository
              - issue
              - pull_request
        - name: subject_id
          description: >-
            Uses the ID for the `subject_type` you specified. **Required** when
            using `subject_type`.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hovercard'
              examples:
                default:
                  $ref: '#/components/examples/hovercard'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: users
        subcategory: users
  /users/{username}/installation:
    get:
      summary: Get a user installation for the authenticated app
      description: >-
        Enables an authenticated GitHub App to find the user’s installation
        information.


        You must use a
        [JWT](https://docs.github.com/enterprise-server@3.9/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
        to access this endpoint.
      tags:
        - - - - apps
      operationId: apps/get-user-installation
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/apps/apps#get-a-user-installation-for-the-authenticated-app
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/installation'
              examples:
                default:
                  $ref: '#/components/examples/installation'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: apps
        subcategory: apps
  /users/{username}/keys:
    get:
      summary: List public keys for a user
      description: >-
        Lists the _verified_ public SSH keys for a user. This is accessible by
        anyone.
      tags:
        - - - - users
      operationId: users/list-public-keys-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/keys#list-public-keys-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/key-simple'
              examples:
                default:
                  $ref: '#/components/examples/key-simple-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: keys
  /users/{username}/orgs:
    get:
      summary: List organizations for a user
      description: >-
        List [public organization
        memberships](https://docs.github.com/enterprise-server@3.9/articles/publicizing-or-concealing-organization-membership)
        for the specified user.


        This method only lists _public_ memberships, regardless of
        authentication. If you need to fetch all of the organization memberships
        (public and private) for the authenticated user, use the [List
        organizations for the authenticated
        user](https://docs.github.com/enterprise-server@3.9/rest/orgs/orgs#list-organizations-for-the-authenticated-user)
        API instead.
      tags:
        - - - - orgs
      operationId: orgs/list-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/orgs/orgs#list-organizations-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/organization-simple'
              examples:
                default:
                  $ref: '#/components/examples/organization-simple-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: orgs
        subcategory: orgs
  /users/{username}/packages:
    get:
      summary: List packages for a user
      description: >-
        Lists all packages in a user's namespace for which the requesting user
        has access.


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` scope to use this endpoint. If the `package_type`
        belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/list-packages-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#list-packages-for-a-user
      parameters:
        - name: package_type
          description: >-
            The type of supported package. Packages in GitHub's Gradle registry
            have the type `maven`. Docker images pushed to GitHub's Container
            registry (`ghcr.io`) have the type `container`. You can use the type
            `docker` to find images that were pushed to GitHub's Docker registry
            (`docker.pkg.github.com`), even if these have now been migrated to
            the Container registry.
          in: query
          required: true
          schema:
            type: string
            enum:
              - npm
              - maven
              - rubygems
              - docker
              - nuget
              - container
        - $ref: '#/components/parameters/package-visibility'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per-page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/package'
              examples:
                default:
                  $ref: '#/components/examples/packages-for-user'
        '400':
          $ref: '#/components/responses/package_es_list_error'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /users/{username}/packages/{package_type}/{package_name}:
    get:
      summary: Get a package for a user
      description: >-
        Gets a specific package metadata for a public package owned by a user.


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` scope to use this endpoint. If the `package_type`
        belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/get-package-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#get-a-package-for-a-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/package'
              examples:
                default:
                  $ref: '#/components/examples/package-user'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
    delete:
      summary: Delete a package for a user
      description: >-
        Deletes an entire package for a user. You cannot delete a public package
        if any version of the package has more than 5,000 downloads. In this
        scenario, contact GitHub support for further assistance.


        If the `package_type` belongs to a GitHub Packages registry that
        supports granular permissions, the authenticated user must have admin
        permissions to the package. For the list of these registries, see
        "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` and `delete:packages` scopes to use this endpoint. If
        the `package_type` belongs to a GitHub Packages registry that only
        supports repository-scoped permissions, the `repo` scope is also
        required. For the list of these registries, see "[About permissions for
        GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/delete-package-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#delete-a-package-for-a-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /users/{username}/packages/{package_type}/{package_name}/restore:
    post:
      summary: Restore a package for a user
      description: >-
        Restores an entire package for a user.


        You can restore a deleted package under the following conditions:
          - The package was deleted within the last 30 days.
          - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.

        If the `package_type` belongs to a GitHub Packages registry that
        supports granular permissions, the authenticated user must have admin
        permissions to the package. For the list of these registries, see
        "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` and `write:packages` scopes to use this endpoint. If the
        `package_type` belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/restore-package-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#restore-a-package-for-a-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/username'
        - name: token
          description: package token
          schema:
            type: string
          required: false
          in: query
      responses:
        '204':
          description: Response
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /users/{username}/packages/{package_type}/{package_name}/versions:
    get:
      summary: List package versions for a package owned by a user
      description: >-
        Lists package versions for a public package owned by a specified user.


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` scope to use this endpoint. If the `package_type`
        belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/get-all-package-versions-for-package-owned-by-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#list-package-versions-for-a-package-owned-by-a-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/package-version'
              examples:
                default:
                  $ref: '#/components/examples/package-versions-for-user'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}:
    get:
      summary: Get a package version for a user
      description: >-
        Gets a specific package version for a public package owned by a
        specified user.


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` scope to use this endpoint. If the `package_type`
        belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/get-package-version-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#get-a-package-version-for-a-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/package-version-id'
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/package-version'
              examples:
                default:
                  $ref: '#/components/examples/package-version-user'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
    delete:
      summary: Delete package version for a user
      description: >-
        Deletes a specific package version for a user. If the package is public
        and the package version has more than 5,000 downloads, you cannot delete
        the package version. In this scenario, contact GitHub support for
        further assistance.


        If the `package_type` belongs to a GitHub Packages registry that
        supports granular permissions, the authenticated user must have admin
        permissions to the package. For the list of these registries, see
        "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` and `delete:packages` scopes to use this endpoint. If
        the `package_type` belongs to a GitHub Packages registry that only
        supports repository-scoped permissions, the `repo` scope is also
        required. For the list of these registries, see "[About permissions for
        GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/delete-package-version-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#delete-package-version-for-a-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/package-version-id'
      responses:
        '204':
          description: Response
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore:
    post:
      summary: Restore package version for a user
      description: >-
        Restores a specific package version for a user.


        You can restore a deleted package under the following conditions:
          - The package was deleted within the last 30 days.
          - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.

        If the `package_type` belongs to a GitHub Packages registry that
        supports granular permissions, the authenticated user must have admin
        permissions to the package. For the list of these registries, see
        "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


        OAuth app tokens and personal access tokens (classic) need the
        `read:packages` and `write:packages` scopes to use this endpoint. If the
        `package_type` belongs to a GitHub Packages registry that only supports
        repository-scoped permissions, the `repo` scope is also required. For
        the list of these registries, see "[About permissions for GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      tags:
        - - - - packages
      operationId: packages/restore-package-version-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/packages/packages#restore-package-version-for-a-user
      parameters:
        - $ref: '#/components/parameters/package-type'
        - $ref: '#/components/parameters/package-name'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/package-version-id'
      responses:
        '204':
          description: Response
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: packages
        subcategory: packages
  /users/{username}/projects:
    get:
      summary: List user projects
      description: Lists projects for a user.
      tags:
        - - - - projects
      operationId: projects/list-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/projects/projects#list-user-projects
      parameters:
        - $ref: '#/components/parameters/username'
        - name: state
          description: Indicates the state of the projects to return.
          in: query
          required: false
          schema:
            type: string
            enum:
              - open
              - closed
              - all
            default: open
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/project'
              examples:
                default:
                  $ref: '#/components/examples/project-items-3'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: projects
        subcategory: projects
  /users/{username}/received_events:
    get:
      summary: List events received by the authenticated user
      description: >-
        These are events that you've received by watching repositories and
        following users. If you are authenticated as the given user, you will
        see private events. Otherwise, you'll only see public events.
      tags:
        - - - - activity
      operationId: activity/list-received-events-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/events#list-events-received-by-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/event'
              examples:
                default:
                  $ref: '#/components/examples/user-received-events-items'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: activity
        subcategory: events
  /users/{username}/received_events/public:
    get:
      summary: List public events received by a user
      description: ''
      tags:
        - - - - activity
      operationId: activity/list-received-public-events-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/events#list-public-events-received-by-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/event'
              examples:
                default:
                  $ref: '#/components/examples/user-received-public-events-items'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: activity
        subcategory: events
  /users/{username}/repos:
    get:
      summary: List repositories for a user
      description: Lists public repositories for the specified user.
      tags:
        - - - - repos
      operationId: repos/list-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#list-repositories-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - name: type
          description: Limit results to repositories of the specified type.
          in: query
          required: false
          schema:
            type: string
            enum:
              - all
              - owner
              - member
            default: owner
        - name: sort
          description: The property to sort the results by.
          in: query
          required: false
          schema:
            type: string
            enum:
              - created
              - updated
              - pushed
              - full_name
            default: full_name
        - name: direction
          description: >-
            The order to sort by. Default: `asc` when using `full_name`,
            otherwise `desc`.
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
  /users/{username}/site_admin:
    put:
      summary: Promote a user to be a site administrator
      description: >-
        Note that you'll need to set `Content-Length` to zero when calling out
        to this endpoint. For more information, see "[HTTP
        method](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#http-method)."
      operationId: enterprise-admin/promote-user-to-be-site-administrator
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#promote-a-user-to-be-a-site-administrator
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
    delete:
      summary: Demote a site administrator
      description: You can demote any user account except your own.
      operationId: enterprise-admin/demote-site-administrator
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#demote-a-site-administrator
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
  /users/{username}/social_accounts:
    get:
      summary: List social accounts for a user
      description: >-
        Lists social media accounts for a user. This endpoint is accessible by
        anyone.
      tags:
        - - - - users
      operationId: users/list-social-accounts-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/social-accounts#list-social-accounts-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/social-account'
              examples:
                default:
                  $ref: '#/components/examples/social-account-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: social-accounts
  /users/{username}/ssh_signing_keys:
    get:
      summary: List SSH signing keys for a user
      description: >-
        Lists the SSH signing keys for a user. This operation is accessible by
        anyone.
      tags:
        - - - - users
      operationId: users/list-ssh-signing-keys-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/users/ssh-signing-keys#list-ssh-signing-keys-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ssh-signing-key'
              examples:
                default:
                  $ref: '#/components/examples/ssh-signing-key-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: users
        subcategory: ssh-signing-keys
  /users/{username}/starred:
    get:
      summary: List repositories starred by a user
      description: >-
        Lists repositories a user has starred.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.star+json`**: Includes a timestamp of when
        the star was created.
      tags:
        - - - - activity
      operationId: activity/list-repos-starred-by-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/starring#list-repositories-starred-by-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/sort-starred'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                anyOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/starred-repository'
                  - type: array
                    items:
                      $ref: '#/components/schemas/repository'
              examples:
                default-response:
                  $ref: '#/components/examples/repository-items-default-response'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: activity
        subcategory: starring
  /users/{username}/subscriptions:
    get:
      summary: List repositories watched by a user
      description: Lists repositories a user is watching.
      tags:
        - - - - activity
      operationId: activity/list-repos-watched-by-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/watching#list-repositories-watched-by-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: activity
        subcategory: watching
  /users/{username}/suspended:
    put:
      summary: Suspend a user
      description: >-
        If your GitHub instance uses [LDAP Sync with Active Directory LDAP
        servers](https://docs.github.com/enterprise-server@3.9/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap),
        Active Directory LDAP-authenticated users cannot be suspended through
        this API. If you attempt to suspend an Active Directory
        LDAP-authenticated user through this API, it will return a `403`
        response.


        You can suspend any user account except your own.


        Note that, if you choose not to pass any parameters, you'll need to set
        `Content-Length` to zero when calling out to this endpoint. For more
        information, see "[HTTP
        method](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#http-method)."
      operationId: enterprise-admin/suspend-user
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#suspend-a-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              nullable: true
              properties:
                reason:
                  type: string
                  description: >-
                    The reason the user is being suspended. This message will be
                    logged in the [audit
                    log](https://docs.github.com/enterprise-server@3.9/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/about-the-audit-log-for-your-enterprise).
                    If you don't provide a `reason`, it will default to
                    "Suspended via API by _SITE\_ADMINISTRATOR_", where
                    _SITE\_ADMINISTRATOR_ is the person who performed the
                    action.
            examples:
              reason:
                value:
                  reason: Suspended during leave of absence.
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
    delete:
      summary: Unsuspend a user
      description: >-
        If your GitHub instance uses [LDAP Sync with Active Directory LDAP
        servers](https://docs.github.com/enterprise-server@3.9/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap),
        this API is disabled and will return a `403` response. Active Directory
        LDAP-authenticated users cannot be unsuspended using the API.
      operationId: enterprise-admin/unsuspend-user
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/users#unsuspend-a-user
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
      requestBody:
        content:
          application/json:
            schema:
              type: object
              nullable: true
              properties:
                reason:
                  type: string
                  description: >-
                    The reason the user is being unsuspended. This message will
                    be logged in the [audit
                    log](https://docs.github.com/enterprise-server@3.9/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/about-the-audit-log-for-your-enterprise).
                    If you don't provide a `reason`, it will default to
                    "Unsuspended via API by _SITE\_ADMINISTRATOR_", where
                    _SITE\_ADMINISTRATOR_ is the person who performed the
                    action.
            examples:
              reason:
                value:
                  reason: Unsuspended after leave of absence.
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: users
components:
  schemas:
    ldap-mapping-user:
      title: Ldap Private User
      description: Ldap Private User
      type: object
      properties:
        ldap_dn:
          type: string
        login:
          type: string
          example: octocat
        id:
          type: integer
          example: 1
        node_id:
          type: string
          example: MDQ6VXNlcjE=
        avatar_url:
          type: string
          format: uri
          example: https://github.com/images/error/octocat_happy.gif
        gravatar_id:
          type: string
          example: 41d064eb2195891e12d0413f63227ea7
          nullable: true
        url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat
        followers_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/followers
        following_url:
          type: string
          example: https://api.github.com/users/octocat/following{/other_user}
        gists_url:
          type: string
          example: https://api.github.com/users/octocat/gists{/gist_id}
        starred_url:
          type: string
          example: https://api.github.com/users/octocat/starred{/owner}{/repo}
        subscriptions_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/subscriptions
        organizations_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/orgs
        repos_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/repos
        events_url:
          type: string
          example: https://api.github.com/users/octocat/events{/privacy}
        received_events_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/received_events
        type:
          type: string
          example: User
        site_admin:
          type: boolean
        name:
          type: string
          example: monalisa octocat
          nullable: true
        company:
          type: string
          example: GitHub
          nullable: true
        blog:
          type: string
          example: https://github.com/blog
          nullable: true
        location:
          type: string
          example: San Francisco
          nullable: true
        email:
          type: string
          format: email
          example: octocat@github.com
          nullable: true
        hireable:
          type: boolean
          nullable: true
        bio:
          type: string
          example: There once was...
          nullable: true
        twitter_username:
          type: string
          example: monalisa
          nullable: true
        public_repos:
          type: integer
          example: 2
        public_gists:
          type: integer
          example: 1
        followers:
          type: integer
          example: 20
        following:
          type: integer
          example: 0
        created_at:
          type: string
          format: date-time
          example: '2008-01-14T04:33:35Z'
        updated_at:
          type: string
          format: date-time
          example: '2008-01-14T04:33:35Z'
        private_gists:
          type: integer
          example: 81
        total_private_repos:
          type: integer
          example: 100
        owned_private_repos:
          type: integer
          example: 100
        disk_usage:
          type: integer
          example: 10000
        collaborators:
          type: integer
          example: 8
        two_factor_authentication:
          type: boolean
          example: true
        plan:
          type: object
          properties:
            collaborators:
              type: integer
            name:
              type: string
            space:
              type: integer
            private_repos:
              type: integer
          required:
            - collaborators
            - name
            - space
            - private_repos
        suspended_at:
          type: string
          format: date-time
          nullable: true
        business_plus:
          type: boolean
      required:
        - avatar_url
        - events_url
        - followers_url
        - following_url
        - gists_url
        - gravatar_id
        - html_url
        - id
        - node_id
        - login
        - organizations_url
        - received_events_url
        - repos_url
        - site_admin
        - starred_url
        - subscriptions_url
        - type
        - url
        - bio
        - blog
        - company
        - email
        - followers
        - following
        - hireable
        - location
        - name
        - public_gists
        - public_repos
        - created_at
        - updated_at
        - collaborators
        - disk_usage
        - owned_private_repos
        - private_gists
        - total_private_repos
        - two_factor_authentication
    authorization:
      title: Authorization
      description: >-
        The authorization for an OAuth app, GitHub App, or a Personal Access
        Token.
      type: object
      properties:
        id:
          type: integer
        url:
          type: string
          format: uri
        scopes:
          description: A list of scopes that this authorization is in.
          type: array
          items:
            type: string
          nullable: true
        token:
          type: string
        token_last_eight:
          type: string
          nullable: true
        hashed_token:
          type: string
          nullable: true
        app:
          type: object
          properties:
            client_id:
              type: string
            name:
              type: string
            url:
              type: string
              format: uri
          required:
            - client_id
            - name
            - url
        note:
          type: string
          nullable: true
        note_url:
          type: string
          format: uri
          nullable: true
        updated_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        fingerprint:
          type: string
          nullable: true
        user:
          $ref: '#/components/schemas/nullable-simple-user'
        installation:
          $ref: '#/components/schemas/nullable-scoped-installation'
        expires_at:
          type: string
          format: date-time
          nullable: true
      required:
        - app
        - id
        - note
        - note_url
        - scopes
        - token
        - hashed_token
        - token_last_eight
        - fingerprint
        - url
        - created_at
        - updated_at
        - expires_at
    enterprise-user-overview:
      title: Enterprise User Stats
      type: object
      properties:
        total_users:
          type: integer
        admin_users:
          type: integer
        suspended_users:
          type: integer
      required:
        - total_users
        - admin_users
        - suspended_users
    private-user:
      title: Private User
      description: Private User
      type: object
      properties:
        login:
          type: string
          example: octocat
        id:
          type: integer
          example: 1
        node_id:
          type: string
          example: MDQ6VXNlcjE=
        avatar_url:
          type: string
          format: uri
          example: https://github.com/images/error/octocat_happy.gif
        gravatar_id:
          type: string
          example: 41d064eb2195891e12d0413f63227ea7
          nullable: true
        url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat
        followers_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/followers
        following_url:
          type: string
          example: https://api.github.com/users/octocat/following{/other_user}
        gists_url:
          type: string
          example: https://api.github.com/users/octocat/gists{/gist_id}
        starred_url:
          type: string
          example: https://api.github.com/users/octocat/starred{/owner}{/repo}
        subscriptions_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/subscriptions
        organizations_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/orgs
        repos_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/repos
        events_url:
          type: string
          example: https://api.github.com/users/octocat/events{/privacy}
        received_events_url:
          type: string
          format: uri
          example: https://api.github.com/users/octocat/received_events
        type:
          type: string
          example: User
        site_admin:
          type: boolean
        name:
          type: string
          example: monalisa octocat
          nullable: true
        company:
          type: string
          example: GitHub
          nullable: true
        blog:
          type: string
          example: https://github.com/blog
          nullable: true
        location:
          type: string
          example: San Francisco
          nullable: true
        email:
          type: string
          format: email
          example: octocat@github.com
          nullable: true
        hireable:
          type: boolean
          nullable: true
        bio:
          type: string
          example: There once was...
          nullable: true
        twitter_username:
          type: string
          example: monalisa
          nullable: true
        public_repos:
          type: integer
          example: 2
        public_gists:
          type: integer
          example: 1
        followers:
          type: integer
          example: 20
        following:
          type: integer
          example: 0
        created_at:
          type: string
          format: date-time
          example: '2008-01-14T04:33:35Z'
        updated_at:
          type: string
          format: date-time
          example: '2008-01-14T04:33:35Z'
        private_gists:
          type: integer
          example: 81
        total_private_repos:
          type: integer
          example: 100
        owned_private_repos:
          type: integer
          example: 100
        disk_usage:
          type: integer
          example: 10000
        collaborators:
          type: integer
          example: 8
        two_factor_authentication:
          type: boolean
          example: true
        plan:
          type: object
          properties:
            collaborators:
              type: integer
            name:
              type: string
            space:
              type: integer
            private_repos:
              type: integer
          required:
            - collaborators
            - name
            - space
            - private_repos
        suspended_at:
          type: string
          format: date-time
          nullable: true
        business_plus:
          type: boolean
        ldap_dn:
          type: string
      required:
        - avatar_url
        - events_url
        - followers_url
        - following_url
        - gists_url
        - gravatar_id
        - html_url
        - id
        - node_id
        - login
        - organizations_url
        - received_events_url
        - repos_url
        - site_admin
        - starred_url
        - subscriptions_url
        - type
        - url
        - bio
        - blog
        - company
        - email
        - followers
        - following
        - hireable
        - location
        - name
        - public_gists
        - public_repos
        - created_at
        - updated_at
        - collaborators
        - disk_usage
        - owned_private_repos
        - private_gists
        - total_private_repos
        - two_factor_authentication
    gpg-key:
      title: GPG Key
      description: A unique encryption key
      type: object
      properties:
        id:
          type: integer
          example: 3
        name:
          type: string
          example: Octocat's GPG Key
          nullable: true
        primary_key_id:
          type: integer
          nullable: true
        key_id:
          type: string
          example: 3262EFF25BA0D270
        public_key:
          type: string
          example: xsBNBFayYZ...
        emails:
          type: array
          example:
            - email: octocat@users.noreply.github.com
              verified: true
          items:
            type: object
            properties:
              email:
                type: string
              verified:
                type: boolean
        subkeys:
          type: array
          example:
            - id: 4
              primary_key_id: 3
              key_id: 4A595D4C72EE49C7
              public_key: zsBNBFayYZ...
              emails: []
              can_sign: false
              can_encrypt_comms: true
              can_encrypt_storage: true
              can_certify: false
              created_at: '2016-03-24T11:31:04-06:00'
              expires_at: null
              revoked: false
          items:
            type: object
            properties:
              id:
                type: integer
              primary_key_id:
                type: integer
              key_id:
                type: string
              public_key:
                type: string
              emails:
                type: array
                items:
                  type: object
                  properties:
                    email:
                      type: string
                    verified:
                      type: boolean
              subkeys:
                type: array
                items: {}
              can_sign:
                type: boolean
              can_encrypt_comms:
                type: boolean
              can_encrypt_storage:
                type: boolean
              can_certify:
                type: boolean
              created_at:
                type: string
              expires_at:
                type: string
                nullable: true
              raw_key:
                type: string
                nullable: true
              revoked:
                type: boolean
        can_sign:
          type: boolean
          example: true
        can_encrypt_comms:
          type: boolean
        can_encrypt_storage:
          type: boolean
        can_certify:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: '2016-03-24T11:31:04-06:00'
        expires_at:
          type: string
          format: date-time
          nullable: true
        revoked:
          type: boolean
          example: true
        raw_key:
          type: string
          nullable: true
      required:
        - id
        - primary_key_id
        - key_id
        - raw_key
        - public_key
        - created_at
        - expires_at
        - can_sign
        - can_encrypt_comms
        - can_encrypt_storage
        - can_certify
        - emails
        - subkeys
        - revoked
    key:
      title: Key
      description: Key
      type: object
      properties:
        key:
          type: string
        id:
          type: integer
        url:
          type: string
        title:
          type: string
        created_at:
          type: string
          format: date-time
        verified:
          type: boolean
        read_only:
          type: boolean
      required:
        - key
        - id
        - url
        - title
        - created_at
        - verified
        - read_only
    org-membership:
      title: Org Membership
      description: Org Membership
      type: object
      properties:
        url:
          type: string
          format: uri
          example: https://api.github.com/orgs/octocat/memberships/defunkt
        state:
          type: string
          description: >-
            The state of the member in the organization. The `pending` state
            indicates the user has not yet accepted an invitation.
          example: active
          enum:
            - active
            - pending
        role:
          type: string
          description: The user's membership type in the organization.
          example: admin
          enum:
            - admin
            - member
            - billing_manager
        organization_url:
          type: string
          format: uri
          example: https://api.github.com/orgs/octocat
        organization:
          $ref: '#/components/schemas/organization-simple'
        user:
          $ref: '#/components/schemas/nullable-simple-user'
        permissions:
          type: object
          properties:
            can_create_repository:
              type: boolean
          required:
            - can_create_repository
      required:
        - state
        - role
        - organization_url
        - url
        - organization
        - user
    package:
      title: Package
      description: A software package
      type: object
      properties:
        id:
          description: Unique identifier of the package.
          type: integer
          example: 1
        name:
          description: The name of the package.
          type: string
          example: super-linter
        package_type:
          type: string
          example: docker
          enum:
            - npm
            - maven
            - rubygems
            - docker
            - nuget
            - container
        url:
          type: string
          example: https://api.github.com/orgs/github/packages/container/super-linter
        html_url:
          type: string
          example: >-
            https://github.com/orgs/github/packages/container/package/super-linter
        version_count:
          description: The number of versions of the package.
          type: integer
          example: 1
        visibility:
          type: string
          example: private
          enum:
            - private
            - public
        owner:
          $ref: '#/components/schemas/nullable-simple-user'
        repository:
          $ref: '#/components/schemas/nullable-minimal-repository'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - package_type
        - visibility
        - url
        - html_url
        - version_count
        - created_at
        - updated_at
    package-version:
      title: Package Version
      description: A version of a software package
      type: object
      properties:
        id:
          description: Unique identifier of the package version.
          type: integer
          example: 1
        name:
          description: The name of the package version.
          type: string
          example: latest
        url:
          type: string
          example: >-
            https://api.github.com/orgs/github/packages/container/super-linter/versions/786068
        package_html_url:
          type: string
          example: >-
            https://github.com/orgs/github/packages/container/package/super-linter
        html_url:
          type: string
          example: >-
            https://github.com/orgs/github/packages/container/super-linter/786068
        license:
          type: string
          example: MIT
        description:
          type: string
        created_at:
          type: string
          format: date-time
          example: '2011-04-10T20:09:31Z'
        updated_at:
          type: string
          format: date-time
          example: '2014-03-03T18:58:10Z'
        deleted_at:
          type: string
          format: date-time
          example: '2014-03-03T18:58:10Z'
        metadata:
          type: object
          title: Package Version Metadata
          properties:
            package_type:
              type: string
              example: docker
              enum:
                - npm
                - maven
                - rubygems
                - docker
                - nuget
                - container
            container:
              type: object
              title: Container Metadata
              properties:
                tags:
                  type: array
                  items:
                    type: string
              required:
                - tags
            docker:
              type: object
              title: Docker Metadata
              properties:
                tag:
                  type: array
                  items:
                    type: string
              required:
                - tags
          required:
            - package_type
      required:
        - id
        - name
        - url
        - package_html_url
        - created_at
        - updated_at
    ssh-signing-key:
      title: SSH Signing Key
      description: A public SSH key used to sign Git commits
      type: object
      properties:
        key:
          type: string
        id:
          type: integer
        title:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - key
        - id
        - title
        - created_at
    hovercard:
      title: Hovercard
      description: Hovercard
      type: object
      properties:
        contexts:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              octicon:
                type: string
            required:
              - message
              - octicon
      required:
        - contexts
    installation:
      title: Installation
      description: Installation
      type: object
      properties:
        id:
          description: The ID of the installation.
          type: integer
          example: 1
        account:
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/simple-user'
            - $ref: '#/components/schemas/enterprise'
        repository_selection:
          description: >-
            Describe whether all repositories have been selected or there's a
            selection involved
          type: string
          enum:
            - all
            - selected
        access_tokens_url:
          type: string
          format: uri
          example: https://api.github.com/app/installations/1/access_tokens
        repositories_url:
          type: string
          format: uri
          example: https://api.github.com/installation/repositories
        html_url:
          type: string
          format: uri
          example: https://github.com/organizations/github/settings/installations/1
        app_id:
          type: integer
          example: 1
        target_id:
          description: The ID of the user or organization this token is being scoped to.
          type: integer
        target_type:
          type: string
          example: Organization
        permissions:
          $ref: '#/components/schemas/app-permissions'
        events:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        single_file_name:
          type: string
          example: config.yaml
          nullable: true
        has_multiple_single_files:
          type: boolean
          example: true
        single_file_paths:
          type: array
          items:
            type: string
          example:
            - config.yml
            - .github/issue_TEMPLATE.md
        app_slug:
          type: string
          example: github-actions
        suspended_by:
          $ref: '#/components/schemas/nullable-simple-user'
        suspended_at:
          type: string
          format: date-time
          nullable: true
        contact_email:
          type: string
          example: '"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"'
          nullable: true
      required:
        - id
        - app_id
        - app_slug
        - target_id
        - target_type
        - single_file_name
        - repository_selection
        - access_tokens_url
        - html_url
        - repositories_url
        - events
        - account
        - permissions
        - created_at
        - updated_at
        - suspended_by
        - suspended_at
