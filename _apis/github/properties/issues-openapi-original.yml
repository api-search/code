openapi: 3.1.0
info:
  title: Issues
  description: Needs a description.
paths:
  /enterprise/stats/issues:
    get:
      summary: Get issue statistics
      description: ''
      operationId: enterprise-admin/get-issue-stats
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/admin-stats#get-issue-statistics
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/enterprise-issue-overview'
              examples:
                default:
                  value:
                    total_issues: 5000
                    open_issues: 300
                    closed_issues: 4700
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: admin-stats
  /issues:
    get:
      summary: List issues assigned to the authenticated user
      description: >-
        List issues assigned to the authenticated user across all visible
        repositories including owned repositories, member

        repositories, and organization repositories. You can use the `filter`
        query parameter to fetch issues that are not

        necessarily assigned to you.


        **Note**: GitHub's REST API considers every pull request an issue, but
        not every issue is a pull request. For this

        reason, "Issues" endpoints may return both issues and pull requests in
        the response. You can identify pull requests by

        the `pull_request` key. Be aware that the `id` of a pull request
        returned from "Issues" endpoints will be an _issue id_. To find out the
        pull

        request id, use the "[List pull
        requests](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#list-pull-requests)"
        endpoint.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/list
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/issues#list-issues-assigned-to-the-authenticated-user
      parameters:
        - name: filter
          description: >-
            Indicates which sorts of issues to return. `assigned` means issues
            assigned to you. `created` means issues created by you. `mentioned`
            means issues mentioning you. `subscribed` means issues you're
            subscribed to updates for. `all` or `repos` means all issues you can
            see, regardless of participation or creation.
          in: query
          required: false
          schema:
            type: string
            enum:
              - assigned
              - created
              - mentioned
              - subscribed
              - repos
              - all
            default: assigned
        - name: state
          description: Indicates the state of the issues to return.
          in: query
          required: false
          schema:
            type: string
            enum:
              - open
              - closed
              - all
            default: open
        - $ref: '#/components/parameters/labels'
        - name: sort
          description: What to sort results by.
          in: query
          required: false
          schema:
            type: string
            enum:
              - created
              - updated
              - comments
            default: created
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/since'
        - name: collab
          in: query
          required: false
          schema:
            type: boolean
        - name: orgs
          in: query
          required: false
          schema:
            type: boolean
        - name: owned
          in: query
          required: false
          schema:
            type: boolean
        - name: pulls
          in: query
          required: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/issue'
              examples:
                default:
                  $ref: '#/components/examples/issue-with-repo-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: issues
        subcategory: issues
  /orgs/{org}/issues:
    get:
      summary: List organization issues assigned to the authenticated user
      description: >-
        List issues in an organization assigned to the authenticated user.


        **Note**: GitHub's REST API considers every pull request an issue, but
        not every issue is a pull request. For this

        reason, "Issues" endpoints may return both issues and pull requests in
        the response. You can identify pull requests by

        the `pull_request` key. Be aware that the `id` of a pull request
        returned from "Issues" endpoints will be an _issue id_. To find out the
        pull

        request id, use the "[List pull
        requests](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#list-pull-requests)"
        endpoint.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/list-for-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/issues#list-organization-issues-assigned-to-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/org'
        - name: filter
          description: >-
            Indicates which sorts of issues to return. `assigned` means issues
            assigned to you. `created` means issues created by you. `mentioned`
            means issues mentioning you. `subscribed` means issues you're
            subscribed to updates for. `all` or `repos` means all issues you can
            see, regardless of participation or creation.
          in: query
          required: false
          schema:
            type: string
            enum:
              - assigned
              - created
              - mentioned
              - subscribed
              - repos
              - all
            default: assigned
        - name: state
          description: Indicates the state of the issues to return.
          in: query
          required: false
          schema:
            type: string
            enum:
              - open
              - closed
              - all
            default: open
        - $ref: '#/components/parameters/labels'
        - name: sort
          description: What to sort results by.
          in: query
          required: false
          schema:
            type: string
            enum:
              - created
              - updated
              - comments
            default: created
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/since'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/issue'
              examples:
                default:
                  $ref: '#/components/examples/issue-with-repo-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: issues
        subcategory: issues
  /repos/{owner}/{repo}/issues:
    get:
      summary: List repository issues
      description: >-
        List issues in a repository. Only open issues will be listed.


        **Note**: GitHub's REST API considers every pull request an issue, but
        not every issue is a pull request. For this

        reason, "Issues" endpoints may return both issues and pull requests in
        the response. You can identify pull requests by

        the `pull_request` key. Be aware that the `id` of a pull request
        returned from "Issues" endpoints will be an _issue id_. To find out the
        pull

        request id, use the "[List pull
        requests](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#list-pull-requests)"
        endpoint.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/list-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/issues#list-repository-issues
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: milestone
          description: >-
            If an `integer` is passed, it should refer to a milestone by its
            `number` field. If the string `*` is passed, issues with any
            milestone are accepted. If the string `none` is passed, issues
            without milestones are returned.
          in: query
          required: false
          schema:
            type: string
        - name: state
          description: Indicates the state of the issues to return.
          in: query
          required: false
          schema:
            type: string
            enum:
              - open
              - closed
              - all
            default: open
        - name: assignee
          description: >-
            Can be the name of a user. Pass in `none` for issues with no
            assigned user, and `*` for issues assigned to any user.
          in: query
          required: false
          schema:
            type: string
        - name: creator
          description: The user that created the issue.
          in: query
          required: false
          schema:
            type: string
        - name: mentioned
          description: A user that's mentioned in the issue.
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/labels'
        - name: sort
          description: What to sort results by.
          in: query
          required: false
          schema:
            type: string
            enum:
              - created
              - updated
              - comments
            default: created
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/since'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/issue'
              examples:
                default:
                  $ref: '#/components/examples/issue-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '301':
          $ref: '#/components/responses/moved_permanently'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: issues
    post:
      summary: Create an issue
      description: >-
        Any user with pull access to a repository can create an issue. If
        [issues are disabled in the
        repository](https://docs.github.com/enterprise-server@3.9/articles/disabling-issues/),
        the API returns a `410 Gone` status.


        This endpoint triggers
        [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        Creating content too quickly using this endpoint may result in secondary
        rate limiting. For more information, see "[Rate limits for the
        API](https://docs.github.com/enterprise-server@3.9/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"

        and "[Best practices for using the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/create
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/issues#create-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  oneOf:
                    - type: string
                    - type: integer
                  description: The title of the issue.
                body:
                  type: string
                  description: The contents of the issue.
                assignee:
                  type: string
                  description: >-
                    Login for the user that this issue should be assigned to.
                    _NOTE: Only users with push access can set the assignee for
                    new issues. The assignee is silently dropped otherwise.
                    **This field is deprecated.**_
                  nullable: true
                milestone:
                  oneOf:
                    - type: string
                    - type: integer
                      description: >-
                        The `number` of the milestone to associate this issue
                        with. _NOTE: Only users with push access can set the
                        milestone for new issues. The milestone is silently
                        dropped otherwise._
                  nullable: true
                labels:
                  type: array
                  description: >-
                    Labels to associate with this issue. _NOTE: Only users with
                    push access can set labels for new issues. Labels are
                    silently dropped otherwise._
                  items:
                    oneOf:
                      - type: string
                      - type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                          description:
                            type: string
                            nullable: true
                          color:
                            type: string
                            nullable: true
                assignees:
                  type: array
                  description: >-
                    Logins for Users to assign to this issue. _NOTE: Only users
                    with push access can set assignees for new issues. Assignees
                    are silently dropped otherwise._
                  items:
                    type: string
              required:
                - title
            examples:
              default:
                value:
                  title: Found a bug
                  body: I'm having a problem with this.
                  assignees:
                    - octocat
                  milestone: 1
                  labels:
                    - bug
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue'
              examples:
                default:
                  $ref: '#/components/examples/issue'
          headers:
            Location:
              example: https://api.github.com/repos/octocat/Hello-World/issues/1347
              schema:
                type: string
        '400':
          $ref: '#/components/responses/bad_request'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
        '422':
          $ref: '#/components/responses/validation_failed'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: issues
  /repos/{owner}/{repo}/issues/comments:
    get:
      summary: List issue comments for a repository
      description: >-
        You can use the REST API to list comments on issues and pull requests
        for a repository. Every pull request is an issue, but not every issue is
        a pull request.


        By default, issue comments are ordered by ascending ID.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/list-comments-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/comments#list-issue-comments-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/sort'
        - name: direction
          description: Either `asc` or `desc`. Ignored without the `sort` parameter.
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - $ref: '#/components/parameters/since'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/issue-comment'
              examples:
                default:
                  $ref: '#/components/examples/issue-comment-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: comments
  /repos/{owner}/{repo}/issues/comments/{comment_id}:
    get:
      summary: Get an issue comment
      description: >-
        You can use the REST API to get comments on issues and pull requests.
        Every pull request is an issue, but not every issue is a pull request.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/get-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/comments#get-an-issue-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue-comment'
              examples:
                default:
                  $ref: '#/components/examples/issue-comment'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: comments
    patch:
      summary: Update an issue comment
      description: >-
        You can use the REST API to update comments on issues and pull requests.
        Every pull request is an issue, but not every issue is a pull request.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/update-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/comments#update-an-issue-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The contents of the comment.
              required:
                - body
            examples:
              default:
                value:
                  body: Me too
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue-comment'
              examples:
                default:
                  $ref: '#/components/examples/issue-comment'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: comments
    delete:
      summary: Delete an issue comment
      description: >-
        You can use the REST API to delete comments on issues and pull requests.
        Every pull request is an issue, but not every issue is a pull request.
      tags:
        - - - - issues
      operationId: issues/delete-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/comments#delete-an-issue-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: comments
  /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions:
    get:
      summary: List reactions for an issue comment
      description: >-
        List the reactions to an [issue
        comment](https://docs.github.com/enterprise-server@3.9/rest/issues/comments#get-an-issue-comment).
      tags:
        - - - - reactions
      operationId: reactions/list-for-issue-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#list-reactions-for-an-issue-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
        - name: content
          description: >-
            Returns a single [reaction
            type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions).
            Omit this parameter to list all reactions to an issue comment.
          in: query
          required: false
          schema:
            type: string
            enum:
              - '+1'
              - '-1'
              - laugh
              - confused
              - heart
              - hooray
              - rocket
              - eyes
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
    post:
      summary: Create reaction for an issue comment
      description: >-
        Create a reaction to an [issue
        comment](https://docs.github.com/enterprise-server@3.9/rest/issues/comments#get-an-issue-comment).
        A response with an HTTP `200` status means that you already added the
        reaction type to this issue comment.
      tags:
        - - - - reactions
      operationId: reactions/create-for-issue-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#create-reaction-for-an-issue-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: >-
                    The [reaction
                    type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions)
                    to add to the issue comment.
                  enum:
                    - '+1'
                    - '-1'
                    - laugh
                    - confused
                    - heart
                    - hooray
                    - rocket
                    - eyes
              required:
                - content
            examples:
              default:
                value:
                  content: heart
      responses:
        '200':
          description: Reaction exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
        '201':
          description: Reaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
  /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}:
    delete:
      summary: Delete an issue comment reaction
      description: >-
        **Note:** You can also specify a repository by `repository_id` using the
        route `DELETE delete
        /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.


        Delete a reaction to an [issue
        comment](https://docs.github.com/enterprise-server@3.9/rest/issues/comments#get-an-issue-comment).
      tags:
        - - - - reactions
      operationId: reactions/delete-for-issue-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#delete-an-issue-comment-reaction
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
        - $ref: '#/components/parameters/reaction-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
  /repos/{owner}/{repo}/issues/events:
    get:
      summary: List issue events for a repository
      description: Lists events for a repository.
      tags:
        - - - - issues
      operationId: issues/list-events-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/events#list-issue-events-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/issue-event'
              examples:
                default:
                  $ref: '#/components/examples/issue-event-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: events
  /repos/{owner}/{repo}/issues/events/{event_id}:
    get:
      summary: Get an issue event
      description: Gets a single event by the event id.
      tags:
        - - - - issues
      operationId: issues/get-event
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/events#get-an-issue-event
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: event_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue-event'
              examples:
                default:
                  $ref: '#/components/examples/issue-event'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: events
  /repos/{owner}/{repo}/issues/{issue_number}:
    get:
      summary: Get an issue
      description: >-
        The API returns a [`301 Moved Permanently`
        status](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api#follow-redirects)
        if the issue was

        [transferred](https://docs.github.com/enterprise-server@3.9/articles/transferring-an-issue-to-another-repository/)
        to another repository. If

        the issue was transferred to or deleted from a repository where the
        authenticated user lacks read access, the API

        returns a `404 Not Found` status. If the issue was deleted from a
        repository where the authenticated user has read

        access, the API returns a `410 Gone` status. To receive webhook events
        for transferred and deleted issues, subscribe

        to the
        [`issues`](https://docs.github.com/enterprise-server@3.9/webhooks/event-payloads/#issues)
        webhook.


        **Note**: GitHub's REST API considers every pull request an issue, but
        not every issue is a pull request. For this

        reason, "Issues" endpoints may return both issues and pull requests in
        the response. You can identify pull requests by

        the `pull_request` key. Be aware that the `id` of a pull request
        returned from "Issues" endpoints will be an _issue id_. To find out the
        pull

        request id, use the "[List pull
        requests](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#list-pull-requests)"
        endpoint.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/get
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/issues#get-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue'
              examples:
                default:
                  $ref: '#/components/examples/issue'
        '301':
          $ref: '#/components/responses/moved_permanently'
        '304':
          $ref: '#/components/responses/not_modified'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: issues
    patch:
      summary: Update an issue
      description: >-
        Issue owners and users with push access can edit an issue.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/update
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/issues#update-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  oneOf:
                    - type: string
                    - type: integer
                  description: The title of the issue.
                  nullable: true
                body:
                  type: string
                  description: The contents of the issue.
                  nullable: true
                assignee:
                  type: string
                  nullable: true
                  description: >-
                    Username to assign to this issue. **This field is
                    deprecated.**
                state:
                  type: string
                  description: The open or closed state of the issue.
                  enum:
                    - open
                    - closed
                state_reason:
                  type: string
                  enum:
                    - completed
                    - not_planned
                    - reopened
                  nullable: true
                  description: >-
                    The reason for the state change. Ignored unless `state` is
                    changed.
                  example: not_planned
                milestone:
                  oneOf:
                    - type: string
                    - type: integer
                      description: >-
                        The `number` of the milestone to associate this issue
                        with or use `null` to remove the current milestone. Only
                        users with push access can set the milestone for issues.
                        Without push access to the repository, milestone changes
                        are silently dropped.
                  nullable: true
                labels:
                  type: array
                  description: >-
                    Labels to associate with this issue. Pass one or more labels
                    to _replace_ the set of labels on this issue. Send an empty
                    array (`[]`) to clear all labels from the issue. Only users
                    with push access can set labels for issues. Without push
                    access to the repository, label changes are silently
                    dropped.
                  items:
                    oneOf:
                      - type: string
                      - type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                          description:
                            type: string
                            nullable: true
                          color:
                            type: string
                            nullable: true
                assignees:
                  type: array
                  description: >-
                    Usernames to assign to this issue. Pass one or more user
                    logins to _replace_ the set of assignees on this issue. Send
                    an empty array (`[]`) to clear all assignees from the issue.
                    Only users with push access can set assignees for new
                    issues. Without push access to the repository, assignee
                    changes are silently dropped.
                  items:
                    type: string
            examples:
              default:
                value:
                  title: Found a bug
                  body: I'm having a problem with this.
                  assignees:
                    - octocat
                  milestone: 1
                  state: open
                  labels:
                    - bug
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue'
              examples:
                default:
                  $ref: '#/components/examples/issue'
        '301':
          $ref: '#/components/responses/moved_permanently'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
        '422':
          $ref: '#/components/responses/validation_failed'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: issues
  /repos/{owner}/{repo}/issues/{issue_number}/assignees:
    post:
      summary: Add assignees to an issue
      description: >-
        Adds up to 10 assignees to an issue. Users already assigned to an issue
        are not replaced.
      tags:
        - - - - issues
      operationId: issues/add-assignees
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/assignees#add-assignees-to-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                assignees:
                  type: array
                  description: >-
                    Usernames of people to assign this issue to. _NOTE: Only
                    users with push access can add assignees to an issue.
                    Assignees are silently ignored otherwise._
                  items:
                    type: string
            examples:
              default:
                value:
                  assignees:
                    - hubot
                    - other_user
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue'
              examples:
                default:
                  $ref: '#/components/examples/issue'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: assignees
    delete:
      summary: Remove assignees from an issue
      description: Removes one or more assignees from an issue.
      tags:
        - - - - issues
      operationId: issues/remove-assignees
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/assignees#remove-assignees-from-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                assignees:
                  type: array
                  description: >-
                    Usernames of assignees to remove from an issue. _NOTE: Only
                    users with push access can remove assignees from an issue.
                    Assignees are silently ignored otherwise._
                  items:
                    type: string
            examples:
              default:
                value:
                  assignees:
                    - hubot
                    - other_user
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue'
              examples:
                default:
                  $ref: '#/components/examples/issue'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: assignees
  /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}:
    get:
      summary: Check if a user can be assigned to a issue
      description: >-
        Checks if a user has permission to be assigned to a specific issue.


        If the `assignee` can be assigned to this issue, a `204` status code
        with no content is returned.


        Otherwise a `404` status code is returned.
      tags:
        - - - - issues
      operationId: issues/check-user-can-be-assigned-to-issue
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/assignees#check-if-a-user-can-be-assigned-to-a-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
        - name: assignee
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Response if `assignee` can be assigned to `issue_number`
        '404':
          description: Response if `assignee` can not be assigned to `issue_number`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/basic-error'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: assignees
  /repos/{owner}/{repo}/issues/{issue_number}/comments:
    get:
      summary: List issue comments
      description: >-
        You can use the REST API to list comments on issues and pull requests.
        Every pull request is an issue, but not every issue is a pull request.


        Issue comments are ordered by ascending ID.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/list-comments
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/comments#list-issue-comments
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
        - $ref: '#/components/parameters/since'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/issue-comment'
              examples:
                default:
                  $ref: '#/components/examples/issue-comment-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: comments
    post:
      summary: Create an issue comment
      description: >-
        You can use the REST API to create comments on issues and pull requests.
        Every pull request is an issue, but not every issue is a pull request.


        This endpoint triggers
        [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications).

        Creating content too quickly using this endpoint may result in secondary
        rate limiting.

        For more information, see "[Rate limits for the
        API](https://docs.github.com/enterprise-server@3.9/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"

        and "[Best practices for using the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/create-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/comments#create-an-issue-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The contents of the comment.
              required:
                - body
            examples:
              default:
                value:
                  body: Me too
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue-comment'
              examples:
                default:
                  $ref: '#/components/examples/issue-comment'
          headers:
            Location:
              example: >-
                https://api.github.com/repos/octocat/Hello-World/issues/comments/1
              schema:
                type: string
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: comments
  /repos/{owner}/{repo}/issues/{issue_number}/events:
    get:
      summary: List issue events
      description: Lists all events for an issue.
      tags:
        - - - - issues
      operationId: issues/list-events
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/events#list-issue-events
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/issue-event-for-issue'
              examples:
                default:
                  $ref: '#/components/examples/issue-event-for-issue-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: events
  /repos/{owner}/{repo}/issues/{issue_number}/labels:
    get:
      summary: List labels for an issue
      description: Lists all labels for an issue.
      tags:
        - - - - issues
      operationId: issues/list-labels-on-issue
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/labels#list-labels-for-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/label'
              examples:
                default:
                  $ref: '#/components/examples/label-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '301':
          $ref: '#/components/responses/moved_permanently'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: labels
    post:
      summary: Add labels to an issue
      description: >-
        Adds labels to an issue. If you provide an empty array of labels, all
        labels are removed from the issue. 
      tags:
        - - - - issues
      operationId: issues/add-labels
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/labels#add-labels-to-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    labels:
                      type: array
                      minItems: 1
                      description: >-
                        The names of the labels to add to the issue's existing
                        labels. You can pass an empty array to remove all
                        labels. Alternatively, you can pass a single label as a
                        `string` or an `array` of labels directly, but GitHub
                        recommends passing an object with the `labels` key. You
                        can also replace all of the labels for an issue. For
                        more information, see "[Set labels for an
                        issue](https://docs.github.com/enterprise-server@3.9/rest/issues/labels#set-labels-for-an-issue)."
                      items:
                        type: string
                - type: array
                  minItems: 1
                  items:
                    type: string
                - type: object
                  properties:
                    labels:
                      type: array
                      minItems: 1
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                        required:
                          - name
                - type: array
                  minItems: 1
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                    required:
                      - name
                - type: string
            examples:
              default:
                value:
                  labels:
                    - bug
                    - enhancement
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/label'
              examples:
                default:
                  $ref: '#/components/examples/label-items'
        '301':
          $ref: '#/components/responses/moved_permanently'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: labels
    put:
      summary: Set labels for an issue
      description: Removes any previous labels and sets the new labels for an issue.
      tags:
        - - - - issues
      operationId: issues/set-labels
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/labels#set-labels-for-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    labels:
                      type: array
                      minItems: 1
                      description: >-
                        The names of the labels to set for the issue. The labels
                        you set replace any existing labels. You can pass an
                        empty array to remove all labels. Alternatively, you can
                        pass a single label as a `string` or an `array` of
                        labels directly, but GitHub recommends passing an object
                        with the `labels` key. You can also add labels to the
                        existing labels for an issue. For more information, see
                        "[Add labels to an
                        issue](https://docs.github.com/enterprise-server@3.9/rest/issues/labels#add-labels-to-an-issue)."
                      items:
                        type: string
                - type: array
                  minItems: 1
                  items:
                    type: string
                - type: object
                  properties:
                    labels:
                      type: array
                      minItems: 1
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                        required:
                          - name
                - type: array
                  minItems: 1
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                    required:
                      - name
                - type: string
            examples:
              default:
                value:
                  labels:
                    - bug
                    - enhancement
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/label'
              examples:
                default:
                  $ref: '#/components/examples/label-items'
        '301':
          $ref: '#/components/responses/moved_permanently'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: labels
    delete:
      summary: Remove all labels from an issue
      description: Removes all labels from an issue.
      tags:
        - - - - issues
      operationId: issues/remove-all-labels
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/labels#remove-all-labels-from-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      responses:
        '204':
          description: Response
        '301':
          $ref: '#/components/responses/moved_permanently'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: labels
  /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}:
    delete:
      summary: Remove a label from an issue
      description: >-
        Removes the specified label from the issue, and returns the remaining
        labels on the issue. This endpoint returns a `404 Not Found` status if
        the label does not exist.
      tags:
        - - - - issues
      operationId: issues/remove-label
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/labels#remove-a-label-from-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/label'
              examples:
                default:
                  $ref: '#/components/examples/label-items-2'
        '301':
          $ref: '#/components/responses/moved_permanently'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: labels
  /repos/{owner}/{repo}/issues/{issue_number}/lock:
    put:
      summary: Lock an issue
      description: >-
        Users with push access can lock an issue or pull request's conversation.


        Note that, if you choose not to pass any parameters, you'll need to set
        `Content-Length` to zero when calling out to this endpoint. For more
        information, see "[HTTP
        method](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#http-method)."
      tags:
        - - - - issues
      operationId: issues/lock
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/issues#lock-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              nullable: true
              properties:
                lock_reason:
                  type: string
                  description: >-
                    The reason for locking the issue or pull request
                    conversation. Lock will fail if you don't use one of these
                    reasons:  
                     * `off-topic`  
                     * `too heated`  
                     * `resolved`  
                     * `spam`
                  enum:
                    - off-topic
                    - too heated
                    - resolved
                    - spam
            examples:
              default:
                summary: Example of locking an issue as off-topic
                value:
                  lock_reason: off-topic
      responses:
        '204':
          description: Response
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: issues
    delete:
      summary: Unlock an issue
      description: Users with push access can unlock an issue's conversation.
      tags:
        - - - - issues
      operationId: issues/unlock
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/issues#unlock-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      responses:
        '204':
          description: Response
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: issues
  /repos/{owner}/{repo}/issues/{issue_number}/reactions:
    get:
      summary: List reactions for an issue
      description: >-
        List the reactions to an
        [issue](https://docs.github.com/enterprise-server@3.9/rest/issues/issues#get-an-issue).
      tags:
        - - - - reactions
      operationId: reactions/list-for-issue
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#list-reactions-for-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
        - name: content
          description: >-
            Returns a single [reaction
            type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions).
            Omit this parameter to list all reactions to an issue.
          in: query
          required: false
          schema:
            type: string
            enum:
              - '+1'
              - '-1'
              - laugh
              - confused
              - heart
              - hooray
              - rocket
              - eyes
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
    post:
      summary: Create reaction for an issue
      description: >-
        Create a reaction to an
        [issue](https://docs.github.com/enterprise-server@3.9/rest/issues/issues#get-an-issue).
        A response with an HTTP `200` status means that you already added the
        reaction type to this issue.
      tags:
        - - - - reactions
      operationId: reactions/create-for-issue
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#create-reaction-for-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: >-
                    The [reaction
                    type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions)
                    to add to the issue.
                  enum:
                    - '+1'
                    - '-1'
                    - laugh
                    - confused
                    - heart
                    - hooray
                    - rocket
                    - eyes
              required:
                - content
            examples:
              default:
                value:
                  content: heart
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: reactions
        subcategory: reactions
  /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}:
    delete:
      summary: Delete an issue reaction
      description: >-
        **Note:** You can also specify a repository by `repository_id` using the
        route `DELETE
        /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.


        Delete a reaction to an
        [issue](https://docs.github.com/enterprise-server@3.9/rest/issues/issues#get-an-issue).
      tags:
        - - - - reactions
      operationId: reactions/delete-for-issue
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#delete-an-issue-reaction
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
        - $ref: '#/components/parameters/reaction-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
  /repos/{owner}/{repo}/issues/{issue_number}/timeline:
    get:
      summary: List timeline events for an issue
      description: List all timeline events for an issue.
      tags:
        - - - - issues
      operationId: issues/list-events-for-timeline
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/timeline#list-timeline-events-for-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/timeline-issue-events'
              examples:
                default:
                  $ref: '#/components/examples/timeline-issue-events'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: timeline
  /search/issues:
    get:
      summary: Search issues and pull requests
      description: >-
        Find issues by state and keyword. This method returns up to 100 results
        [per
        page](https://docs.github.com/enterprise-server@3.9/rest/guides/using-pagination-in-the-rest-api).


        When searching for issues, you can get text match metadata for the issue
        **title**, issue **body**, and issue **comment body** fields when you
        pass the `text-match` media type. For more details about how to receive
        highlighted

        search results, see [Text match
        metadata](https://docs.github.com/enterprise-server@3.9/rest/search/search#text-match-metadata).


        For example, if you want to find the oldest unresolved Python bugs on
        Windows. Your query might look something like this.


        `q=windows+label:bug+language:python+state:open&sort=created&order=asc`


        This query searches for the keyword `windows`, within any open issue
        that is labeled as `bug`. The search runs across repositories whose
        primary language is Python. The results are sorted by creation date in
        ascending order, which means the oldest issues appear first in the
        search results.


        **Note:** For requests made by GitHub Apps with a user access token, you
        can't retrieve a combination of issues and pull requests in a single
        query. Requests that don't include the `is:issue` or `is:pull-request`
        qualifier will receive an HTTP `422 Unprocessable Entity` response. To
        get results for both issues and pull requests, you must send separate
        queries for issues and pull requests. For more information about the
        `is` qualifier, see "[Searching only issues or pull
        requests](https://docs.github.com/enterprise-server@3.9/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
      tags:
        - - - - search
      operationId: search/issues-and-pull-requests
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/search/search#search-issues-and-pull-requests
      parameters:
        - name: q
          description: >-
            The query contains one or more search keywords and qualifiers.
            Qualifiers allow you to limit your search to specific areas of
            GitHub Enterprise Server. The REST API supports the same qualifiers
            as the web interface for GitHub Enterprise Server. To learn more
            about the format of the query, see [Constructing a search
            query](https://docs.github.com/enterprise-server@3.9/rest/search/search#constructing-a-search-query).
            See "[Searching issues and pull
            requests](https://docs.github.com/enterprise-server@3.9/search-github/searching-on-github/searching-issues-and-pull-requests)"
            for a detailed list of qualifiers.
          in: query
          required: true
          schema:
            type: string
        - name: sort
          description: >-
            Sorts the results of your query by the number of `comments`,
            `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`,
            `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or
            `interactions`. You can also sort results by how recently the items
            were `created` or `updated`, Default: [best
            match](https://docs.github.com/enterprise-server@3.9/rest/search/search#ranking-search-results)
          in: query
          required: false
          schema:
            type: string
            enum:
              - comments
              - reactions
              - reactions-+1
              - reactions--1
              - reactions-smile
              - reactions-thinking_face
              - reactions-heart
              - reactions-tada
              - interactions
              - created
              - updated
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - incomplete_results
                  - items
                properties:
                  total_count:
                    type: integer
                  incomplete_results:
                    type: boolean
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/issue-search-result-item'
              examples:
                default:
                  $ref: '#/components/examples/issue-search-result-item-paginated'
        '304':
          $ref: '#/components/responses/not_modified'
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: search
        subcategory: search
  /user/issues:
    get:
      summary: List user account issues assigned to the authenticated user
      description: >-
        List issues across owned and member repositories assigned to the
        authenticated user.


        **Note**: GitHub's REST API considers every pull request an issue, but
        not every issue is a pull request. For this

        reason, "Issues" endpoints may return both issues and pull requests in
        the response. You can identify pull requests by

        the `pull_request` key. Be aware that the `id` of a pull request
        returned from "Issues" endpoints will be an _issue id_. To find out the
        pull

        request id, use the "[List pull
        requests](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#list-pull-requests)"
        endpoint.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/list-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/issues#list-user-account-issues-assigned-to-the-authenticated-user
      parameters:
        - name: filter
          description: >-
            Indicates which sorts of issues to return. `assigned` means issues
            assigned to you. `created` means issues created by you. `mentioned`
            means issues mentioning you. `subscribed` means issues you're
            subscribed to updates for. `all` or `repos` means all issues you can
            see, regardless of participation or creation.
          in: query
          required: false
          schema:
            type: string
            enum:
              - assigned
              - created
              - mentioned
              - subscribed
              - repos
              - all
            default: assigned
        - name: state
          description: Indicates the state of the issues to return.
          in: query
          required: false
          schema:
            type: string
            enum:
              - open
              - closed
              - all
            default: open
        - $ref: '#/components/parameters/labels'
        - name: sort
          description: What to sort results by.
          in: query
          required: false
          schema:
            type: string
            enum:
              - created
              - updated
              - comments
            default: created
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/since'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/issue'
              examples:
                default:
                  $ref: '#/components/examples/issue-with-repo-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: issues
        subcategory: issues
components:
  schemas:
    enterprise-issue-overview:
      title: Enterprise Issue Stats
      type: object
      properties:
        total_issues:
          type: integer
        open_issues:
          type: integer
        closed_issues:
          type: integer
      required:
        - total_issues
        - open_issues
        - closed_issues
    issue-comment:
      title: Issue Comment
      description: Comments provide a way for people to collaborate on an issue.
      type: object
      properties:
        id:
          description: Unique identifier of the issue comment
          example: 42
          type: integer
          format: int64
        node_id:
          type: string
        url:
          description: URL for the issue comment
          example: https://api.github.com/repositories/42/issues/comments/1
          type: string
          format: uri
        body:
          description: Contents of the issue comment
          example: What version of Safari were you using when you observed this bug?
          type: string
        body_text:
          type: string
        body_html:
          type: string
        html_url:
          type: string
          format: uri
        user:
          $ref: '#/components/schemas/nullable-simple-user'
        created_at:
          type: string
          format: date-time
          example: '2011-04-14T16:00:49Z'
        updated_at:
          type: string
          format: date-time
          example: '2011-04-14T16:00:49Z'
        issue_url:
          type: string
          format: uri
        author_association:
          $ref: '#/components/schemas/author-association'
        performed_via_github_app:
          $ref: '#/components/schemas/nullable-integration'
        reactions:
          $ref: '#/components/schemas/reaction-rollup'
      required:
        - id
        - node_id
        - html_url
        - issue_url
        - author_association
        - user
        - url
        - created_at
        - updated_at
    reaction:
      title: Reaction
      description: >-
        Reactions to conversations provide a way to help people express their
        feelings more simply and effectively.
      type: object
      properties:
        id:
          type: integer
          example: 1
        node_id:
          type: string
          example: MDg6UmVhY3Rpb24x
        user:
          $ref: '#/components/schemas/nullable-simple-user'
        content:
          description: The reaction to use
          example: heart
          type: string
          enum:
            - '+1'
            - '-1'
            - laugh
            - confused
            - heart
            - hooray
            - rocket
            - eyes
        created_at:
          type: string
          format: date-time
          example: '2016-05-20T20:09:31Z'
      required:
        - id
        - node_id
        - user
        - content
        - created_at
    issue-event:
      title: Issue Event
      description: Issue Event
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        node_id:
          type: string
          example: MDEwOklzc3VlRXZlbnQx
        url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/issues/events/1
        actor:
          $ref: '#/components/schemas/nullable-simple-user'
        event:
          type: string
          example: closed
        commit_id:
          type: string
          example: 6dcb09b5b57875f334f61aebed695e2e4193db5e
          nullable: true
        commit_url:
          type: string
          example: >-
            https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2011-04-14T16:00:49Z'
        issue:
          $ref: '#/components/schemas/nullable-issue'
        label:
          $ref: '#/components/schemas/issue-event-label'
        assignee:
          $ref: '#/components/schemas/nullable-simple-user'
        assigner:
          $ref: '#/components/schemas/nullable-simple-user'
        review_requester:
          $ref: '#/components/schemas/nullable-simple-user'
        requested_reviewer:
          $ref: '#/components/schemas/nullable-simple-user'
        requested_team:
          $ref: '#/components/schemas/team'
        dismissed_review:
          $ref: '#/components/schemas/issue-event-dismissed-review'
        milestone:
          $ref: '#/components/schemas/issue-event-milestone'
        project_card:
          $ref: '#/components/schemas/issue-event-project-card'
        rename:
          $ref: '#/components/schemas/issue-event-rename'
        author_association:
          $ref: '#/components/schemas/author-association'
        lock_reason:
          type: string
          nullable: true
        performed_via_github_app:
          $ref: '#/components/schemas/nullable-integration'
      required:
        - id
        - node_id
        - url
        - actor
        - event
        - commit_id
        - commit_url
        - created_at
    issue:
      title: Issue
      description: >-
        Issues are a great way to keep track of tasks, enhancements, and bugs
        for your projects.
      type: object
      properties:
        id:
          type: integer
          format: int64
        node_id:
          type: string
        url:
          description: URL for the issue
          example: https://api.github.com/repositories/42/issues/1
          type: string
          format: uri
        repository_url:
          type: string
          format: uri
        labels_url:
          type: string
        comments_url:
          type: string
          format: uri
        events_url:
          type: string
          format: uri
        html_url:
          type: string
          format: uri
        number:
          description: Number uniquely identifying the issue within its repository
          example: 42
          type: integer
        state:
          description: State of the issue; either 'open' or 'closed'
          example: open
          type: string
        state_reason:
          description: The reason for the current state
          example: not_planned
          type: string
          nullable: true
          enum:
            - completed
            - reopened
            - not_planned
        title:
          description: Title of the issue
          example: Widget creation fails in Safari on OS X 10.8
          type: string
        body:
          description: Contents of the issue
          example: >-
            It looks like the new widget form is broken on Safari. When I try
            and create the widget, Safari crashes. This is reproducible on 10.8,
            but not 10.9. Maybe a browser bug?
          type: string
          nullable: true
        user:
          $ref: '#/components/schemas/nullable-simple-user'
        labels:
          description: >-
            Labels to associate with this issue; pass one or more label names to
            replace the set of labels on this issue; send an empty array to
            clear all labels from the issue; note that the labels are silently
            dropped for users without push access to the repository
          example:
            - bug
            - registration
          type: array
          items:
            oneOf:
              - type: string
              - type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  node_id:
                    type: string
                  url:
                    type: string
                    format: uri
                  name:
                    type: string
                  description:
                    type: string
                    nullable: true
                  color:
                    type: string
                    nullable: true
                  default:
                    type: boolean
        assignee:
          $ref: '#/components/schemas/nullable-simple-user'
        assignees:
          type: array
          items:
            $ref: '#/components/schemas/simple-user'
          nullable: true
        milestone:
          $ref: '#/components/schemas/nullable-milestone'
        locked:
          type: boolean
        active_lock_reason:
          type: string
          nullable: true
        comments:
          type: integer
        pull_request:
          type: object
          properties:
            merged_at:
              type: string
              format: date-time
              nullable: true
            diff_url:
              type: string
              format: uri
              nullable: true
            html_url:
              type: string
              format: uri
              nullable: true
            patch_url:
              type: string
              format: uri
              nullable: true
            url:
              type: string
              format: uri
              nullable: true
          required:
            - diff_url
            - html_url
            - patch_url
            - url
        closed_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        draft:
          type: boolean
        closed_by:
          $ref: '#/components/schemas/nullable-simple-user'
        body_html:
          type: string
        body_text:
          type: string
        timeline_url:
          type: string
          format: uri
        repository:
          $ref: '#/components/schemas/repository'
        performed_via_github_app:
          $ref: '#/components/schemas/nullable-integration'
        author_association:
          $ref: '#/components/schemas/author-association'
        reactions:
          $ref: '#/components/schemas/reaction-rollup'
      required:
        - assignee
        - closed_at
        - comments
        - comments_url
        - events_url
        - html_url
        - id
        - node_id
        - labels
        - labels_url
        - milestone
        - number
        - repository_url
        - state
        - locked
        - title
        - url
        - user
        - author_association
        - created_at
        - updated_at
