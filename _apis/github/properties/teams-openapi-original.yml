openapi: 3.1.0
info:
  title: Teams
  description: Needs a description.
paths:
  /admin/ldap/teams/{team_id}/mapping:
    patch:
      summary: Update LDAP mapping for a team
      description: >-
        Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns)
        (DN) of the LDAP entry to map to a team. [LDAP
        synchronization](https://docs.github.com/enterprise-server@3.9/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap#enabling-ldap-sync)
        must be enabled to map LDAP entries to a team. Use the [Create a
        team](https://docs.github.com/enterprise-server@3.9/rest/teams/teams/#create-a-team)
        endpoint to create a team with LDAP mapping.
      operationId: enterprise-admin/update-ldap-mapping-for-team
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/ldap#update-ldap-mapping-for-a-team
      parameters:
        - $ref: '#/components/parameters/team-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ldap-mapping-team'
              examples:
                default:
                  $ref: '#/components/examples/ldap-mapping-team'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ldap_dn:
                  type: string
                  description: >-
                    The [distinguished
                    name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the
                    LDAP entry to map to a team.
              required:
                - ldap_dn
            examples:
              default:
                value:
                  ldap_dn: cn=Enterprise Ops,ou=teams,dc=github,dc=com
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: ldap
  /admin/ldap/teams/{team_id}/sync:
    post:
      summary: Sync LDAP mapping for a team
      description: >-
        Note that this API call does not automatically initiate an LDAP sync.
        Rather, if a `201` is returned, the sync job is queued successfully, and
        is performed when the instance is ready.
      operationId: enterprise-admin/sync-ldap-mapping-for-team
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/ldap#sync-ldap-mapping-for-a-team
      parameters:
        - $ref: '#/components/parameters/team-id'
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
              examples:
                default:
                  value:
                    status: queued
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: ldap
  /orgs/{org}/security-managers/teams/{team_slug}:
    put:
      summary: Add a security manager team
      description: >-
        Adds a team as a security manager for an organization. For more
        information, see "[Managing security for an
        organization](https://docs.github.com/enterprise-server@3.9/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)
        for an organization."


        The authenticated user must be an administrator for the organization to
        use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the
        `write:org` scope to use this endpoint.
      tags:
        - - - - orgs
      operationId: orgs/add-security-manager-team
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/orgs/security-managers#add-a-security-manager-team
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      responses:
        '204':
          description: Response
        '409':
          description: >-
            The organization has reached the maximum number of security manager
            teams.
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        previews: []
        category: orgs
        subcategory: security-managers
    delete:
      summary: Remove a security manager team
      description: >-
        Removes the security manager role from a team for an organization. For
        more information, see "[Managing security managers in your
        organization](https://docs.github.com/enterprise-server@3.9/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)
        team from an organization."


        The authenticated user must be an administrator for the organization to
        use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the
        `admin:org` scope to use this endpoint.
      tags:
        - - - - orgs
      operationId: orgs/remove-security-manager-team
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/orgs/security-managers#remove-a-security-manager-team
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        previews: []
        category: orgs
        subcategory: security-managers
  /orgs/{org}/teams:
    get:
      summary: List teams
      description: >-
        Lists all teams in an organization that are visible to the authenticated
        user.
      tags:
        - - - - teams
      operationId: teams/list
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#list-teams
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
              examples:
                default:
                  $ref: '#/components/examples/team-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
    post:
      summary: Create a team
      description: >-
        To create a team, the authenticated user must be a member or owner of
        `{org}`. By default, organization members can create teams. Organization
        owners can limit team creation to organization owners. For more
        information, see "[Setting team creation
        permissions](https://docs.github.com/enterprise-server@3.9/articles/setting-team-creation-permissions-in-your-organization)."


        When you create a new team, you automatically become a team maintainer
        without explicitly adding yourself to the optional array of
        `maintainers`. For more information, see "[About
        teams](https://docs.github.com/enterprise-server@3.9/github/setting-up-and-managing-organizations-and-teams/about-teams)".
      tags:
        - - - - teams
      operationId: teams/create
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#create-a-team
      parameters:
        - $ref: '#/components/parameters/org'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the team.
                description:
                  type: string
                  description: The description of the team.
                maintainers:
                  type: array
                  description: >-
                    List GitHub IDs for organization members who will become
                    team maintainers.
                  items:
                    type: string
                repo_names:
                  type: array
                  description: >-
                    The full name (e.g., "organization-name/repository-name") of
                    repositories to add the team to.
                  items:
                    type: string
                privacy:
                  type: string
                  description: >-
                    The level of privacy this team should have. The options
                    are:  

                    **For a non-nested team:**  
                     * `secret` - only visible to organization owners and members of this team.  
                     * `closed` - visible to all members of this organization.  
                    Default: `secret`  

                    **For a parent or child team:**  
                     * `closed` - visible to all members of this organization.  
                    Default for child team: `closed`
                  enum:
                    - secret
                    - closed
                permission:
                  type: string
                  description: >-
                    **Deprecated**. The permission that new repositories will be
                    added to the team with when none is specified.
                  enum:
                    - pull
                    - push
                  default: pull
                parent_team_id:
                  type: integer
                  description: The ID of a team to set as the parent team.
                ldap_dn:
                  type: string
                  description: >-
                    The [distinguished
                    name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the
                    LDAP entry to map to a team. LDAP synchronization must be
                    enabled to map LDAP entries to a team. Use the "[Update LDAP
                    mapping for a
                    team](https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/ldap#update-ldap-mapping-for-a-team)"
                    endpoint to change the LDAP DN. For more information, see
                    "[Using
                    LDAP](https://docs.github.com/enterprise-server@3.9/admin/identity-and-access-management/authenticating-users-for-your-github-enterprise-server-instance/using-ldap#enabling-ldap-sync)."
              required:
                - name
            examples:
              default:
                value:
                  name: Justice League
                  description: A great team
                  permission: push
                  privacy: closed
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-full'
              examples:
                default:
                  $ref: '#/components/examples/team-full'
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
  /orgs/{org}/teams/{team_slug}:
    get:
      summary: Get a team by name
      description: >-
        Gets a team using the team's `slug`. To create the `slug`, GitHub
        Enterprise Server replaces special characters in the `name` string,
        changes all words to lowercase, and replaces spaces with a `-`
        separator. For example, `"My TEam Näme"` would become `my-team-name`.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `GET /organizations/{org_id}/team/{team_id}`.
      tags:
        - - - - teams
      operationId: teams/get-by-name
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#get-a-team-by-name
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-full'
              examples:
                default:
                  $ref: '#/components/examples/team-full'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
    patch:
      summary: Update a team
      description: >-
        To edit a team, the authenticated user must either be an organization
        owner or a team maintainer.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `PATCH /organizations/{org_id}/team/{team_id}`.
      tags:
        - - - - teams
      operationId: teams/update-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#update-a-team
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the team.
                description:
                  type: string
                  description: The description of the team.
                privacy:
                  type: string
                  description: >-
                    The level of privacy this team should have. Editing teams
                    without specifying this parameter leaves `privacy` intact.
                    When a team is nested, the `privacy` for parent teams cannot
                    be `secret`. The options are:  

                    **For a non-nested team:**  
                     * `secret` - only visible to organization owners and members of this team.  
                     * `closed` - visible to all members of this organization.  
                    **For a parent or child team:**  
                     * `closed` - visible to all members of this organization.
                  enum:
                    - secret
                    - closed
                permission:
                  type: string
                  description: >-
                    **Deprecated**. The permission that new repositories will be
                    added to the team with when none is specified.
                  enum:
                    - pull
                    - push
                    - admin
                  default: pull
                parent_team_id:
                  type: integer
                  description: The ID of a team to set as the parent team.
                  nullable: true
            examples:
              default:
                value:
                  name: new team name
                  description: new team description
                  privacy: closed
      responses:
        '200':
          description: Response when the updated information already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-full'
              examples:
                default:
                  $ref: '#/components/examples/team-full'
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-full'
              examples:
                default:
                  $ref: '#/components/examples/team-full'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
    delete:
      summary: Delete a team
      description: >-
        To delete a team, the authenticated user must be an organization owner
        or team maintainer.


        If you are an organization owner, deleting a parent team will delete all
        of its child teams as well.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `DELETE /organizations/{org_id}/team/{team_id}`.
      tags:
        - - - - teams
      operationId: teams/delete-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#delete-a-team
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
  /orgs/{org}/teams/{team_slug}/discussions:
    get:
      summary: List discussions
      description: >-
        List all discussions on a team's page.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `GET /organizations/{org_id}/team/{team_id}/discussions`.


        OAuth app tokens and personal access tokens (classic) need the
        `read:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/list-discussions-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#list-discussions
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
        - name: pinned
          in: query
          required: false
          description: Pinned discussions only filter
          schema:
            type: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team-discussion'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussions
    post:
      summary: Create a discussion
      description: >-
        Creates a new discussion post on a team's page.


        This endpoint triggers
        [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        Creating content too quickly using this endpoint may result in secondary
        rate limiting. For more information, see "[Rate limits for the
        API](https://docs.github.com/enterprise-server@3.9/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
        and "[Best practices for using the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `POST /organizations/{org_id}/team/{team_id}/discussions`.


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/create-discussion-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#create-a-discussion
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The discussion post's title.
                body:
                  type: string
                  description: The discussion post's body text.
                private:
                  type: boolean
                  description: >-
                    Private posts are only visible to team members, organization
                    owners, and team maintainers. Public posts are visible to
                    all members of the organization. Set to `true` to create a
                    private post.
                  default: false
              required:
                - title
                - body
            examples:
              default:
                value:
                  title: Our first team post
                  body: Hi! This is an area for us to collaborate as a team.
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussions
  /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}:
    get:
      summary: Get a discussion
      description: >-
        Get a specific discussion on a team's page.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `GET
        /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.


        OAuth app tokens and personal access tokens (classic) need the
        `read:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/get-discussion-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#get-a-discussion
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussions
    patch:
      summary: Update a discussion
      description: >-
        Edits the title and body text of a discussion post. Only the parameters
        you provide are updated.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `PATCH
        /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/update-discussion-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#update-a-discussion
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The discussion post's title.
                body:
                  type: string
                  description: The discussion post's body text.
            examples:
              default:
                value:
                  title: Welcome to our first team post
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-2'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussions
    delete:
      summary: Delete a discussion
      description: >-
        Delete a discussion from a team's page.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `DELETE
        /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/delete-discussion-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#delete-a-discussion
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussions
  /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments:
    get:
      summary: List discussion comments
      description: >-
        List all comments on a team discussion.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `GET
        /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.


        OAuth app tokens and personal access tokens (classic) need the
        `read:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/list-discussion-comments-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#list-discussion-comments
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team-discussion-comment'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-comment-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussion-comments
    post:
      summary: Create a discussion comment
      description: >-
        Creates a new comment on a team discussion.


        This endpoint triggers
        [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        Creating content too quickly using this endpoint may result in secondary
        rate limiting. For more information, see "[Rate limits for the
        API](https://docs.github.com/enterprise-server@3.9/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
        and "[Best practices for using the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `POST
        /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/create-discussion-comment-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#create-a-discussion-comment
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The discussion comment's body text.
              required:
                - body
            examples:
              default:
                value:
                  body: Do you like apples?
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion-comment'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-comment'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussion-comments
  /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}:
    get:
      summary: Get a discussion comment
      description: >-
        Get a specific comment on a team discussion.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `GET
        /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.


        OAuth app tokens and personal access tokens (classic) need the
        `read:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/get-discussion-comment-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#get-a-discussion-comment
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/comment-number'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion-comment'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-comment'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussion-comments
    patch:
      summary: Update a discussion comment
      description: >-
        Edits the body text of a discussion comment.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `PATCH
        /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/update-discussion-comment-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#update-a-discussion-comment
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/comment-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The discussion comment's body text.
              required:
                - body
            examples:
              default:
                value:
                  body: Do you like pineapples?
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion-comment'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-comment-2'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussion-comments
    delete:
      summary: Delete a discussion comment
      description: >-
        Deletes a comment on a team discussion.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `DELETE
        /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/delete-discussion-comment-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#delete-a-discussion-comment
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/comment-number'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: discussion-comments
  /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions:
    get:
      summary: List reactions for a team discussion comment
      description: >-
        List the reactions to a [team discussion
        comment](https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#get-a-discussion-comment).


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `GET
        /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.


        OAuth app tokens and personal access tokens (classic) need the
        `read:discussion` scope to use this endpoint.
      tags:
        - - - - reactions
      operationId: reactions/list-for-team-discussion-comment-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/comment-number'
        - name: content
          description: >-
            Returns a single [reaction
            type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions).
            Omit this parameter to list all reactions to a team discussion
            comment.
          in: query
          required: false
          schema:
            type: string
            enum:
              - '+1'
              - '-1'
              - laugh
              - confused
              - heart
              - hooray
              - rocket
              - eyes
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
    post:
      summary: Create reaction for a team discussion comment
      description: >-
        Create a reaction to a [team discussion
        comment](https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#get-a-discussion-comment).


        A response with an HTTP `200` status means that you already added the
        reaction type to this team discussion comment.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `POST
        /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - reactions
      operationId: reactions/create-for-team-discussion-comment-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/comment-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: >-
                    The [reaction
                    type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions)
                    to add to the team discussion comment.
                  enum:
                    - '+1'
                    - '-1'
                    - laugh
                    - confused
                    - heart
                    - hooray
                    - rocket
                    - eyes
              required:
                - content
            examples:
              default:
                value:
                  content: heart
      responses:
        '200':
          description: >-
            Response when the reaction type has already been added to this team
            discussion comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
  /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}:
    delete:
      summary: Delete team discussion comment reaction
      description: >-
        **Note:** You can also specify a team or organization with `team_id` and
        `org_id` using the route `DELETE
        /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.


        Delete a reaction to a [team discussion
        comment](https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#get-a-discussion-comment).


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - reactions
      operationId: reactions/delete-for-team-discussion-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#delete-team-discussion-comment-reaction
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/comment-number'
        - $ref: '#/components/parameters/reaction-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
  /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions:
    get:
      summary: List reactions for a team discussion
      description: >-
        List the reactions to a [team
        discussion](https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#get-a-discussion).


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `GET
        /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.


        OAuth app tokens and personal access tokens (classic) need the
        `read:discussion` scope to use this endpoint.
      tags:
        - - - - reactions
      operationId: reactions/list-for-team-discussion-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#list-reactions-for-a-team-discussion
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
        - name: content
          description: >-
            Returns a single [reaction
            type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions).
            Omit this parameter to list all reactions to a team discussion.
          in: query
          required: false
          schema:
            type: string
            enum:
              - '+1'
              - '-1'
              - laugh
              - confused
              - heart
              - hooray
              - rocket
              - eyes
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
    post:
      summary: Create reaction for a team discussion
      description: >-
        Create a reaction to a [team
        discussion](https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#get-a-discussion).


        A response with an HTTP `200` status means that you already added the
        reaction type to this team discussion.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `POST
        /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - reactions
      operationId: reactions/create-for-team-discussion-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#create-reaction-for-a-team-discussion
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: >-
                    The [reaction
                    type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions)
                    to add to the team discussion.
                  enum:
                    - '+1'
                    - '-1'
                    - laugh
                    - confused
                    - heart
                    - hooray
                    - rocket
                    - eyes
              required:
                - content
            examples:
              default:
                value:
                  content: heart
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: reactions
        subcategory: reactions
  /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}:
    delete:
      summary: Delete team discussion reaction
      description: >-
        **Note:** You can also specify a team or organization with `team_id` and
        `org_id` using the route `DELETE
        /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.


        Delete a reaction to a [team
        discussion](https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#get-a-discussion).


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - reactions
      operationId: reactions/delete-for-team-discussion
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#delete-team-discussion-reaction
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/reaction-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
  /orgs/{org}/teams/{team_slug}/external-groups:
    get:
      summary: List a connection between an external group and a team
      description: >-
        Lists a connection between a team and an external group.


        You can manage team membership with your identity provider using
        Enterprise Managed Users for GitHub Enterprise Cloud. For more
        information, see "[GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)"
        in the GitHub Help documentation.
      tags:
        - - - - teams
      operationId: teams/list-linked-external-idp-groups-to-team-for-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/external-groups#list-a-connection-between-an-external-group-and-a-team
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external-groups'
              examples:
                default:
                  $ref: '#/components/examples/external-groups'
      x-github:
        githubCloudOnly: true
        enabledForGitHubApps: true
        category: teams
        subcategory: external-groups
    patch:
      summary: Update the connection between an external group and a team
      description: >-
        Creates a connection between a team and an external group.  Only one
        external group can be linked to a team.


        You can manage team membership with your identity provider using
        Enterprise Managed Users for GitHub Enterprise Cloud. For more
        information, see "[GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)"
        in the GitHub Help documentation.
      tags:
        - - - - teams
      operationId: teams/link-external-idp-group-to-team-for-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/external-groups#update-the-connection-between-an-external-group-and-a-team
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                group_id:
                  type: integer
                  description: External Group Id
                  example: 1
              required:
                - group_id
            examples:
              default:
                value:
                  group_id: 123
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external-group'
              examples:
                default:
                  $ref: '#/components/examples/external-group'
      x-github:
        githubCloudOnly: true
        enabledForGitHubApps: false
        category: teams
        subcategory: external-groups
    delete:
      summary: Remove the connection between an external group and a team
      description: >-
        Deletes a connection between a team and an external group.


        You can manage team membership with your IdP using Enterprise Managed
        Users for GitHub Enterprise Cloud. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.
      tags:
        - - - - teams
      operationId: teams/unlink-external-idp-group-from-team-for-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/external-groups#remove-the-connection-between-an-external-group-and-a-team
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: true
        enabledForGitHubApps: false
        category: teams
        subcategory: external-groups
  /orgs/{org}/teams/{team_slug}/members:
    get:
      summary: List team members
      description: >-
        Team members will include the members of child teams.


        To list members in a team, the team must be visible to the authenticated
        user.
      tags:
        - - - - teams
      operationId: teams/list-members-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/members#list-team-members
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - name: role
          description: Filters members returned by their role in the team.
          in: query
          required: false
          schema:
            type: string
            enum:
              - member
              - maintainer
              - all
            default: all
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: members
  /orgs/{org}/teams/{team_slug}/memberships/{username}:
    get:
      summary: Get team membership for a user
      description: >-
        Team members will include the members of child teams.


        To get a user's membership with a team, the team must be visible to the
        authenticated user.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `GET
        /organizations/{org_id}/team/{team_id}/memberships/{username}`.


        **Note:**

        The response contains the `state` of the membership and the member's
        `role`.


        The `role` for organization owners is set to `maintainer`. For more
        information about `maintainer` roles, see [Create a
        team](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#create-a-team).
      tags:
        - - - - teams
      operationId: teams/get-membership-for-user-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/members#get-team-membership-for-a-user
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-membership'
              examples:
                response-if-user-is-a-team-maintainer:
                  $ref: >-
                    #/components/examples/team-membership-response-if-user-is-a-team-maintainer
        '404':
          description: if user has no team membership
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: members
    put:
      summary: Add or update team membership for a user
      description: >-
        Adds an organization member to a team. An authenticated organization
        owner or team maintainer can add organization members to a team.


        Team synchronization is available for organizations using GitHub
        Enterprise Cloud. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        **Note:** When you have team synchronization set up for a team with your
        organization's identity provider (IdP), you will see an error if you
        attempt to use the API for making changes to the team's membership. If
        you have access to manage group membership in your IdP, you can manage
        GitHub Enterprise Server team membership through your identity provider,
        which automatically adds and removes team members in an organization.
        For more information, see "[Synchronizing teams between your identity
        provider and GitHub Enterprise
        Server](https://docs.github.com/enterprise-server@3.9/articles/synchronizing-teams-between-your-identity-provider-and-github/)."


        An organization owner can add someone who is not part of the team's
        organization to a team. When an organization owner adds someone to a
        team who is not an organization member, this endpoint will send an
        invitation to the person via email. This newly-created membership will
        be in the "pending" state until the person accepts the invitation, at
        which point the membership will transition to the "active" state and the
        user will be added as a member of the team.


        If the user is already a member of the team, this endpoint will update
        the role of the team member's role. To update the membership of a team
        member, the authenticated user must be an organization owner or a team
        maintainer.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `PUT
        /organizations/{org_id}/team/{team_id}/memberships/{username}`.
      tags:
        - - - - teams
      operationId: teams/add-or-update-membership-for-user-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/members#add-or-update-team-membership-for-a-user
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/username'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  description: The role that this user should have in the team.
                  enum:
                    - member
                    - maintainer
                  default: member
            examples:
              default:
                summary: Add or update team membership for an organization member
                value:
                  role: maintainer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-membership'
              examples:
                response-if-users-membership-with-team-is-now-pending:
                  $ref: >-
                    #/components/examples/team-membership-response-if-users-membership-with-team-is-now-pending
        '403':
          description: Forbidden if team synchronization is set up
        '422':
          description: Unprocessable Entity if you attempt to add an organization to a team
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: members
    delete:
      summary: Remove team membership for a user
      description: >-
        To remove a membership between a user and a team, the authenticated user
        must have 'admin' permissions to the team or be an owner of the
        organization that the team is associated with. Removing team membership
        does not delete the user, it just removes their membership from the
        team.


        Team synchronization is available for organizations using GitHub
        Enterprise Cloud. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        **Note:** When you have team synchronization set up for a team with your
        organization's identity provider (IdP), you will see an error if you
        attempt to use the API for making changes to the team's membership. If
        you have access to manage group membership in your IdP, you can manage
        GitHub Enterprise Server team membership through your identity provider,
        which automatically adds and removes team members in an organization.
        For more information, see "[Synchronizing teams between your identity
        provider and GitHub Enterprise
        Server](https://docs.github.com/enterprise-server@3.9/articles/synchronizing-teams-between-your-identity-provider-and-github/)."


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `DELETE
        /organizations/{org_id}/team/{team_id}/memberships/{username}`.
      tags:
        - - - - teams
      operationId: teams/remove-membership-for-user-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/members#remove-team-membership-for-a-user
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
        '403':
          description: Forbidden if team synchronization is set up
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: members
  /orgs/{org}/teams/{team_slug}/projects:
    get:
      summary: List team projects
      description: >-
        Lists the organization projects for a team.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `GET /organizations/{org_id}/team/{team_id}/projects`.
      tags:
        - - - - teams
      operationId: teams/list-projects-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#list-team-projects
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team-project'
              examples:
                default:
                  $ref: '#/components/examples/team-project-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
  /orgs/{org}/teams/{team_slug}/projects/{project_id}:
    get:
      summary: Check team permissions for a project
      description: >-
        Checks whether a team has `read`, `write`, or `admin` permissions for an
        organization project. The response includes projects inherited from a
        parent team.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `GET
        /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
      tags:
        - - - - teams
      operationId: teams/check-permissions-for-project-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#check-team-permissions-for-a-project
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/project-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-project'
              examples:
                default:
                  $ref: '#/components/examples/team-project'
        '404':
          description: Not Found if project is not managed by this team
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
    put:
      summary: Add or update team project permissions
      description: >-
        Adds an organization project to a team. To add a project to a team or
        update the team's permission on a project, the authenticated user must
        have `admin` permissions for the project. The project and team must be
        part of the same organization.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `PUT
        /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
      tags:
        - - - - teams
      operationId: teams/add-or-update-project-permissions-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#add-or-update-team-project-permissions
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/project-id'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  type: string
                  description: >-
                    The permission to grant to the team for this project.
                    Default: the team's `permission` attribute will be used to
                    determine what permission to grant the team on this project.
                    Note that, if you choose not to pass any parameters, you'll
                    need to set `Content-Length` to zero when calling this
                    endpoint. For more information, see "[HTTP
                    method](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#http-method)."
                  enum:
                    - read
                    - write
                    - admin
              nullable: true
            examples:
              default:
                summary: Updates the permissions for the team to write for the project
                value:
                  permission: write
      responses:
        '204':
          description: Response
        '403':
          description: Forbidden if the project is not owned by the organization
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  documentation_url:
                    type: string
              examples:
                response-if-the-project-is-not-owned-by-the-organization:
                  value:
                    message: Must have admin rights to Repository.
                    documentation_url: >-
                      https://docs.github.com/enterprise-server@3.9/rest/teams/teams#add-or-update-team-project-permissions
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
    delete:
      summary: Remove a project from a team
      description: >-
        Removes an organization project from a team. An organization owner or a
        team maintainer can remove any project from the team. To remove a
        project from a team as an organization member, the authenticated user
        must have `read` access to both the team and project, or `admin` access
        to the team or project. This endpoint removes the project from the team,
        but does not delete the project.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `DELETE
        /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
      tags:
        - - - - teams
      operationId: teams/remove-project-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#remove-a-project-from-a-team
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/project-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
  /orgs/{org}/teams/{team_slug}/repos:
    get:
      summary: List team repositories
      description: >-
        Lists a team's repositories visible to the authenticated user.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `GET /organizations/{org_id}/team/{team_id}/repos`.
      tags:
        - - - - teams
      operationId: teams/list-repos-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#list-team-repositories
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
  /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}:
    get:
      summary: Check team permissions for a repository
      description: >-
        Checks whether a team has `admin`, `push`, `maintain`, `triage`, or
        `pull` permission for a repository. Repositories inherited through a
        parent team will also be checked.


        You can also get information about the specified repository, including
        what permissions the team grants on it, by passing the following custom
        [media
        type](https://docs.github.com/enterprise-server@3.9/rest/overview/media-types/)
        via the `application/vnd.github.v3.repository+json` accept header.


        If a team doesn't have permission for the repository, you will receive a
        `404 Not Found` response status.


        If the repository is private, you must have at least `read` permission
        for that repository, and your token must have the `repo` or `admin:org`
        scope. Otherwise, you will receive a `404 Not Found` response status.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `GET
        /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
      tags:
        - - - - teams
      operationId: teams/check-permissions-for-repo-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#check-team-permissions-for-a-repository
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Alternative response with repository permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-repository'
              examples:
                alternative-response-with-repository-permissions:
                  $ref: >-
                    #/components/examples/team-repository-alternative-response-with-repository-permissions
        '204':
          description: >-
            Response if team has permission for the repository. This is the
            response when the repository media type hasn't been provded in the
            Accept header.
        '404':
          description: Not Found if team does not have permission for the repository
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
    put:
      summary: Add or update team repository permissions
      description: >-
        To add a repository to a team or update the team's permission on a
        repository, the authenticated user must have admin access to the
        repository, and must be able to see the team. The repository must be
        owned by the organization, or a direct fork of a repository owned by the
        organization. You will get a `422 Unprocessable Entity` status if you
        attempt to add a repository to a team that is not owned by the
        organization. Note that, if you choose not to pass any parameters,
        you'll need to set `Content-Length` to zero when calling out to this
        endpoint. For more information, see "[HTTP
        method](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#http-method)."


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `PUT
        /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.


        For more information about the permission levels, see "[Repository
        permission levels for an
        organization](https://docs.github.com/enterprise-server@3.9/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
      tags:
        - - - - teams
      operationId: teams/add-or-update-repo-permissions-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#add-or-update-team-repository-permissions
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  type: string
                  description: >-
                    The permission to grant the team on this repository. We
                    accept the following permissions to be set: `pull`,
                    `triage`, `push`, `maintain`, `admin` and you can also
                    specify a custom repository role name, if the owning
                    organization has defined any. If no permission is specified,
                    the team's `permission` attribute will be used to determine
                    what permission to grant the team on this repository.
                  default: push
            examples:
              default:
                summary: >-
                  Adding a team to an organization repository with the write
                  role
                value:
                  permission: push
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
    delete:
      summary: Remove a repository from a team
      description: >-
        If the authenticated user is an organization owner or a team maintainer,
        they can remove any repositories from the team. To remove a repository
        from a team as an organization member, the authenticated user must have
        admin access to the repository and must be able to see the team. This
        does not delete the repository, it just removes it from the team.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `DELETE
        /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
      tags:
        - - - - teams
      operationId: teams/remove-repo-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#remove-a-repository-from-a-team
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
  /orgs/{org}/teams/{team_slug}/teams:
    get:
      summary: List child teams
      description: >-
        Lists the child teams of the team specified by `{team_slug}`.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `GET /organizations/{org_id}/team/{team_id}/teams`.
      tags:
        - - - - teams
      operationId: teams/list-child-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#list-child-teams
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: if child teams exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
              examples:
                response-if-child-teams-exist:
                  $ref: >-
                    #/components/examples/team-items-response-if-child-teams-exist
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
  /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams:
    get:
      summary: Get teams with access to the protected branch
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Lists the teams who have push access to this branch. The list includes
        child teams.
      tags:
        - - - - repos
      operationId: repos/get-teams-with-access-to-protected-branch
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#get-teams-with-access-to-the-protected-branch
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
              examples:
                default:
                  $ref: '#/components/examples/team-items'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    post:
      summary: Add team access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Grants the specified teams push access for this branch. You can also
        give push access to child teams.
      tags:
        - - - - repos
      operationId: repos/add-team-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#add-team-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    teams:
                      type: array
                      description: The slug values for teams
                      items:
                        type: string
                  required:
                    - teams
                  example:
                    teams:
                      - my-team
                - type: array
                  description: The slug values for teams
                  items:
                    type: string
            examples:
              default:
                summary: Example adding a team in a branch protection rule
                value:
                  teams:
                    - justice-league
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
              examples:
                default:
                  $ref: '#/components/examples/team-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: teams
        category: branches
        subcategory: branch-protection
    put:
      summary: Set team access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Replaces the list of teams that have push access to this branch. This
        removes all teams that previously had push access and grants push access
        to the new list of teams. Team restrictions include child teams.
      tags:
        - - - - repos
      operationId: repos/set-team-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#set-team-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    teams:
                      type: array
                      description: The slug values for teams
                      items:
                        type: string
                  required:
                    - teams
                  example:
                    teams:
                      - justice-league
                - type: array
                  description: The slug values for teams
                  items:
                    type: string
            examples:
              default:
                summary: Example replacing a team in a branch protection rule
                value:
                  teams:
                    - justice-league
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
              examples:
                default:
                  $ref: '#/components/examples/team-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: teams
        category: branches
        subcategory: branch-protection
    delete:
      summary: Remove team access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Removes the ability of a team to push to this branch. You can also
        remove push access for child teams.
      tags:
        - - - - repos
      operationId: repos/remove-team-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#remove-team-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    teams:
                      type: array
                      description: The slug values for teams
                      items:
                        type: string
                  required:
                    - teams
                  example:
                    teams:
                      - my-team
                - type: array
                  description: The slug values for teams
                  items:
                    type: string
            examples:
              default:
                summary: Example removing a team in a branch protection rule
                value:
                  teams:
                    - octocats
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
              examples:
                default:
                  $ref: '#/components/examples/team-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: teams
        category: branches
        subcategory: branch-protection
  /repos/{owner}/{repo}/teams:
    get:
      summary: List repository teams
      description: >-
        Lists the teams that have access to the specified repository and that
        are also visible to the authenticated user.


        For a public repository, a team is listed only if that team added the
        public repository explicitly.


        OAuth app tokens and personal access tokens (classic) need the
        `public_repo` or `repo` scope to use this endpoint with a public
        repository, and `repo` scope to use this endpoint with a private
        repository.
      tags:
        - - - - repos
      operationId: repos/list-teams
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#list-repository-teams
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
              examples:
                default:
                  $ref: '#/components/examples/team-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
  /teams/{team_id}:
    get:
      summary: Get a team (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the [Get a team by
        name](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#get-a-team-by-name)
        endpoint.
      tags:
        - - - - teams
      operationId: teams/get-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#get-a-team-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-full'
              examples:
                default:
                  $ref: '#/components/examples/team-full'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: teams
      deprecated: true
    patch:
      summary: Update a team (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Update a
        team](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#update-a-team)
        endpoint.


        To edit a team, the authenticated user must either be an organization
        owner or a team maintainer.


        **Note:** With nested teams, the `privacy` for parent teams cannot be
        `secret`.
      tags:
        - - - - teams
      operationId: teams/update-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#update-a-team-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the team.
                description:
                  type: string
                  description: The description of the team.
                privacy:
                  type: string
                  description: >-
                    The level of privacy this team should have. Editing teams
                    without specifying this parameter leaves `privacy` intact.
                    The options are:  

                    **For a non-nested team:**  
                     * `secret` - only visible to organization owners and members of this team.  
                     * `closed` - visible to all members of this organization.  
                    **For a parent or child team:**  
                     * `closed` - visible to all members of this organization.
                  enum:
                    - secret
                    - closed
                permission:
                  type: string
                  description: >-
                    **Deprecated**. The permission that new repositories will be
                    added to the team with when none is specified.
                  enum:
                    - pull
                    - push
                    - admin
                  default: pull
                parent_team_id:
                  type: integer
                  description: The ID of a team to set as the parent team.
                  nullable: true
              required:
                - name
            examples:
              default:
                value:
                  name: new team name
                  description: new team description
                  privacy: closed
      responses:
        '200':
          description: Response when the updated information already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-full'
              examples:
                default:
                  $ref: '#/components/examples/team-full'
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-full'
              examples:
                default:
                  $ref: '#/components/examples/team-full'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: teams
      deprecated: true
    delete:
      summary: Delete a team (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Delete a
        team](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#delete-a-team)
        endpoint.


        To delete a team, the authenticated user must be an organization owner
        or team maintainer.


        If you are an organization owner, deleting a parent team will delete all
        of its child teams as well.
      tags:
        - - - - teams
      operationId: teams/delete-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#delete-a-team-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
      responses:
        '204':
          description: Response
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: teams
      deprecated: true
  /teams/{team_id}/discussions:
    get:
      summary: List discussions (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [`List
        discussions`](https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#list-discussions)
        endpoint.


        List all discussions on a team's page.


        OAuth app tokens and personal access tokens (classic) need the
        `read:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/list-discussions-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#list-discussions-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team-discussion'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussions
      deprecated: true
    post:
      summary: Create a discussion (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [`Create a
        discussion`](https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#create-a-discussion)
        endpoint.


        Creates a new discussion post on a team's page.


        This endpoint triggers
        [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        Creating content too quickly using this endpoint may result in secondary
        rate limiting. For more information, see "[Rate limits for the
        API](https://docs.github.com/enterprise-server@3.9/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
        and "[Best practices for using the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/create-discussion-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#create-a-discussion-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The discussion post's title.
                body:
                  type: string
                  description: The discussion post's body text.
                private:
                  type: boolean
                  description: >-
                    Private posts are only visible to team members, organization
                    owners, and team maintainers. Public posts are visible to
                    all members of the organization. Set to `true` to create a
                    private post.
                  default: false
              required:
                - title
                - body
            examples:
              default:
                value:
                  title: Our first team post
                  body: Hi! This is an area for us to collaborate as a team.
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussions
      deprecated: true
  /teams/{team_id}/discussions/{discussion_number}:
    get:
      summary: Get a discussion (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Get a
        discussion](https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#get-a-discussion)
        endpoint.


        Get a specific discussion on a team's page.


        OAuth app tokens and personal access tokens (classic) need the
        `read:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/get-discussion-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#get-a-discussion-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussions
      deprecated: true
    patch:
      summary: Update a discussion (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Update a
        discussion](https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#update-a-discussion)
        endpoint.


        Edits the title and body text of a discussion post. Only the parameters
        you provide are updated.


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/update-discussion-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#update-a-discussion-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The discussion post's title.
                body:
                  type: string
                  description: The discussion post's body text.
            examples:
              default:
                value:
                  title: Welcome to our first team post
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-2'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussions
      deprecated: true
    delete:
      summary: Delete a discussion (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [`Delete a
        discussion`](https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#delete-a-discussion)
        endpoint.


        Delete a discussion from a team's page.


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/delete-discussion-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#delete-a-discussion-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussions
      deprecated: true
  /teams/{team_id}/discussions/{discussion_number}/comments:
    get:
      summary: List discussion comments (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [List discussion
        comments](https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#list-discussion-comments)
        endpoint.


        List all comments on a team discussion.


        OAuth app tokens and personal access tokens (classic) need the
        `read:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/list-discussion-comments-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#list-discussion-comments-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team-discussion-comment'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-comment-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussion-comments
      deprecated: true
    post:
      summary: Create a discussion comment (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Create a discussion
        comment](https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#create-a-discussion-comment)
        endpoint.


        Creates a new comment on a team discussion.


        This endpoint triggers
        [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        Creating content too quickly using this endpoint may result in secondary
        rate limiting. For more information, see "[Rate limits for the
        API](https://docs.github.com/enterprise-server@3.9/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
        and "[Best practices for using the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/create-discussion-comment-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#create-a-discussion-comment-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The discussion comment's body text.
              required:
                - body
            examples:
              default:
                value:
                  body: Do you like apples?
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion-comment'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-comment'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussion-comments
      deprecated: true
  /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}:
    get:
      summary: Get a discussion comment (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Get a discussion
        comment](https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#get-a-discussion-comment)
        endpoint.


        Get a specific comment on a team discussion.


        OAuth app tokens and personal access tokens (classic) need the
        `read:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/get-discussion-comment-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#get-a-discussion-comment-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/comment-number'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion-comment'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-comment'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussion-comments
      deprecated: true
    patch:
      summary: Update a discussion comment (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Update a discussion
        comment](https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#update-a-discussion-comment)
        endpoint.


        Edits the body text of a discussion comment.


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/update-discussion-comment-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#update-a-discussion-comment-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/comment-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The discussion comment's body text.
              required:
                - body
            examples:
              default:
                value:
                  body: Do you like pineapples?
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-discussion-comment'
              examples:
                default:
                  $ref: '#/components/examples/team-discussion-comment-2'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussion-comments
      deprecated: true
    delete:
      summary: Delete a discussion comment (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Delete a discussion
        comment](https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#delete-a-discussion-comment)
        endpoint.


        Deletes a comment on a team discussion.


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - teams
      operationId: teams/delete-discussion-comment-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#delete-a-discussion-comment-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/comment-number'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: discussion-comments
      deprecated: true
  /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions:
    get:
      summary: List reactions for a team discussion comment (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [`List reactions for a team discussion
        comment`](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment)
        endpoint.


        List the reactions to a [team discussion
        comment](https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#get-a-discussion-comment).


        OAuth app tokens and personal access tokens (classic) need the
        `read:discussion` scope to use this endpoint.
      tags:
        - - - - reactions
      operationId: reactions/list-for-team-discussion-comment-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/comment-number'
        - name: content
          description: >-
            Returns a single [reaction
            type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions).
            Omit this parameter to list all reactions to a team discussion
            comment.
          in: query
          required: false
          schema:
            type: string
            enum:
              - '+1'
              - '-1'
              - laugh
              - confused
              - heart
              - hooray
              - rocket
              - eyes
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-21'
        deprecationDate: '2020-02-26'
        category: reactions
        subcategory: reactions
      deprecated: true
    post:
      summary: Create reaction for a team discussion comment (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new "[Create reaction for a team discussion
        comment](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment)"
        endpoint.


        Create a reaction to a [team discussion
        comment](https://docs.github.com/enterprise-server@3.9/rest/teams/discussion-comments#get-a-discussion-comment).


        A response with an HTTP `200` status means that you already added the
        reaction type to this team discussion comment.


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - reactions
      operationId: reactions/create-for-team-discussion-comment-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
        - $ref: '#/components/parameters/comment-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: >-
                    The [reaction
                    type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions)
                    to add to the team discussion comment.
                  enum:
                    - '+1'
                    - '-1'
                    - laugh
                    - confused
                    - heart
                    - hooray
                    - rocket
                    - eyes
              required:
                - content
            examples:
              default:
                value:
                  content: heart
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-21'
        deprecationDate: '2020-02-26'
        category: reactions
        subcategory: reactions
      deprecated: true
  /teams/{team_id}/discussions/{discussion_number}/reactions:
    get:
      summary: List reactions for a team discussion (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [`List reactions for a team
        discussion`](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#list-reactions-for-a-team-discussion)
        endpoint.


        List the reactions to a [team
        discussion](https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#get-a-discussion).


        OAuth app tokens and personal access tokens (classic) need the
        `read:discussion` scope to use this endpoint.
      tags:
        - - - - reactions
      operationId: reactions/list-for-team-discussion-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#list-reactions-for-a-team-discussion-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
        - name: content
          description: >-
            Returns a single [reaction
            type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions).
            Omit this parameter to list all reactions to a team discussion.
          in: query
          required: false
          schema:
            type: string
            enum:
              - '+1'
              - '-1'
              - laugh
              - confused
              - heart
              - hooray
              - rocket
              - eyes
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-21'
        deprecationDate: '2020-02-26'
        category: reactions
        subcategory: reactions
      deprecated: true
    post:
      summary: Create reaction for a team discussion (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [`Create reaction for a team
        discussion`](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#create-reaction-for-a-team-discussion)
        endpoint.


        Create a reaction to a [team
        discussion](https://docs.github.com/enterprise-server@3.9/rest/teams/discussions#get-a-discussion).


        A response with an HTTP `200` status means that you already added the
        reaction type to this team discussion.


        OAuth app tokens and personal access tokens (classic) need the
        `write:discussion` scope to use this endpoint.
      tags:
        - - - - reactions
      operationId: reactions/create-for-team-discussion-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#create-reaction-for-a-team-discussion-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/discussion-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: >-
                    The [reaction
                    type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions)
                    to add to the team discussion.
                  enum:
                    - '+1'
                    - '-1'
                    - laugh
                    - confused
                    - heart
                    - hooray
                    - rocket
                    - eyes
              required:
                - content
            examples:
              default:
                value:
                  content: heart
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        removalDate: '2021-02-21'
        deprecationDate: '2020-02-26'
        category: reactions
        subcategory: reactions
      deprecated: true
  /teams/{team_id}/members:
    get:
      summary: List team members (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [`List team
        members`](https://docs.github.com/enterprise-server@3.9/rest/teams/members#list-team-members)
        endpoint.


        Team members will include the members of child teams.
      tags:
        - - - - teams
      operationId: teams/list-members-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/members#list-team-members-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - name: role
          description: Filters members returned by their role in the team.
          in: query
          required: false
          schema:
            type: string
            enum:
              - member
              - maintainer
              - all
            default: all
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: members
      deprecated: true
  /teams/{team_id}/members/{username}:
    get:
      summary: Get team member (Legacy)
      description: >-
        The "Get team member" endpoint (described below) is deprecated.


        We recommend using the [Get team membership for a
        user](https://docs.github.com/enterprise-server@3.9/rest/teams/members#get-team-membership-for-a-user)
        endpoint instead. It allows you to get both active and pending
        memberships.


        To list members in a team, the team must be visible to the authenticated
        user.
      tags:
        - - - - teams
      operationId: teams/get-member-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/members#get-team-member-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: if user is a member
        '404':
          description: if user is not a member
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: members
      deprecated: true
    put:
      summary: Add team member (Legacy)
      description: >-
        The "Add team member" endpoint (described below) is deprecated.


        We recommend using the [Add or update team membership for a
        user](https://docs.github.com/enterprise-server@3.9/rest/teams/members#add-or-update-team-membership-for-a-user)
        endpoint instead. It allows you to invite new organization members to
        your teams.


        Team synchronization is available for organizations using GitHub
        Enterprise Cloud. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        To add someone to a team, the authenticated user must be an organization
        owner or a team maintainer in the team they're changing. The person
        being added to the team must be a member of the team's organization.


        **Note:** When you have team synchronization set up for a team with your
        organization's identity provider (IdP), you will see an error if you
        attempt to use the API for making changes to the team's membership. If
        you have access to manage group membership in your IdP, you can manage
        GitHub Enterprise Server team membership through your identity provider,
        which automatically adds and removes team members in an organization.
        For more information, see "[Synchronizing teams between your identity
        provider and GitHub Enterprise
        Server](https://docs.github.com/enterprise-server@3.9/articles/synchronizing-teams-between-your-identity-provider-and-github/)."


        Note that you'll need to set `Content-Length` to zero when calling out
        to this endpoint. For more information, see "[HTTP
        method](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#http-method)."
      tags:
        - - - - teams
      operationId: teams/add-member-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/members#add-team-member-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Not Found if team synchronization is set up
        '422':
          description: >-
            Unprocessable Entity if you attempt to add an organization to a team
            or you attempt to add a user to a team when they are not a member of
            at least one other team in the same organization
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: members
      deprecated: true
    delete:
      summary: Remove team member (Legacy)
      description: >-
        The "Remove team member" endpoint (described below) is deprecated.


        We recommend using the [Remove team membership for a
        user](https://docs.github.com/enterprise-server@3.9/rest/teams/members#remove-team-membership-for-a-user)
        endpoint instead. It allows you to remove both active and pending
        memberships.


        Team synchronization is available for organizations using GitHub
        Enterprise Cloud. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        To remove a team member, the authenticated user must have 'admin'
        permissions to the team or be an owner of the org that the team is
        associated with. Removing a team member does not delete the user, it
        just removes them from the team.


        **Note:** When you have team synchronization set up for a team with your
        organization's identity provider (IdP), you will see an error if you
        attempt to use the API for making changes to the team's membership. If
        you have access to manage group membership in your IdP, you can manage
        GitHub Enterprise Server team membership through your identity provider,
        which automatically adds and removes team members in an organization.
        For more information, see "[Synchronizing teams between your identity
        provider and GitHub Enterprise
        Server](https://docs.github.com/enterprise-server@3.9/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
      tags:
        - - - - teams
      operationId: teams/remove-member-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/members#remove-team-member-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
        '404':
          description: Not Found if team synchronization is setup
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: members
      deprecated: true
  /teams/{team_id}/memberships/{username}:
    get:
      summary: Get team membership for a user (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Get team membership for a
        user](https://docs.github.com/enterprise-server@3.9/rest/teams/members#get-team-membership-for-a-user)
        endpoint.


        Team members will include the members of child teams.


        To get a user's membership with a team, the team must be visible to the
        authenticated user.


        **Note:**

        The response contains the `state` of the membership and the member's
        `role`.


        The `role` for organization owners is set to `maintainer`. For more
        information about `maintainer` roles, see [Create a
        team](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#create-a-team).
      tags:
        - - - - teams
      operationId: teams/get-membership-for-user-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/members#get-team-membership-for-a-user-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-membership'
              examples:
                response-if-user-is-a-team-maintainer:
                  $ref: >-
                    #/components/examples/team-membership-response-if-user-is-a-team-maintainer
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: members
      deprecated: true
    put:
      summary: Add or update team membership for a user (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Add or update team membership for a
        user](https://docs.github.com/enterprise-server@3.9/rest/teams/members#add-or-update-team-membership-for-a-user)
        endpoint.


        Team synchronization is available for organizations using GitHub
        Enterprise Cloud. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        If the user is already a member of the team's organization, this
        endpoint will add the user to the team. To add a membership between an
        organization member and a team, the authenticated user must be an
        organization owner or a team maintainer.


        **Note:** When you have team synchronization set up for a team with your
        organization's identity provider (IdP), you will see an error if you
        attempt to use the API for making changes to the team's membership. If
        you have access to manage group membership in your IdP, you can manage
        GitHub Enterprise Server team membership through your identity provider,
        which automatically adds and removes team members in an organization.
        For more information, see "[Synchronizing teams between your identity
        provider and GitHub Enterprise
        Server](https://docs.github.com/enterprise-server@3.9/articles/synchronizing-teams-between-your-identity-provider-and-github/)."


        If the user is unaffiliated with the team's organization, this endpoint
        will send an invitation to the user via email. This newly-created
        membership will be in the "pending" state until the user accepts the
        invitation, at which point the membership will transition to the
        "active" state and the user will be added as a member of the team. To
        add a membership between an unaffiliated user and a team, the
        authenticated user must be an organization owner.


        If the user is already a member of the team, this endpoint will update
        the role of the team member's role. To update the membership of a team
        member, the authenticated user must be an organization owner or a team
        maintainer.
      tags:
        - - - - teams
      operationId: teams/add-or-update-membership-for-user-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/members#add-or-update-team-membership-for-a-user-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/username'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  description: The role that this user should have in the team.
                  enum:
                    - member
                    - maintainer
                  default: member
            examples:
              default:
                summary: Assign the member role for a user in a team
                value:
                  role: member
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-membership'
              examples:
                response-if-users-membership-with-team-is-now-pending:
                  $ref: >-
                    #/components/examples/team-membership-response-if-users-membership-with-team-is-now-pending
        '403':
          description: Forbidden if team synchronization is set up
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          description: Unprocessable Entity if you attempt to add an organization to a team
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: members
      deprecated: true
    delete:
      summary: Remove team membership for a user (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Remove team membership for a
        user](https://docs.github.com/enterprise-server@3.9/rest/teams/members#remove-team-membership-for-a-user)
        endpoint.


        Team synchronization is available for organizations using GitHub
        Enterprise Cloud. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        To remove a membership between a user and a team, the authenticated user
        must have 'admin' permissions to the team or be an owner of the
        organization that the team is associated with. Removing team membership
        does not delete the user, it just removes their membership from the
        team.


        **Note:** When you have team synchronization set up for a team with your
        organization's identity provider (IdP), you will see an error if you
        attempt to use the API for making changes to the team's membership. If
        you have access to manage group membership in your IdP, you can manage
        GitHub Enterprise Server team membership through your identity provider,
        which automatically adds and removes team members in an organization.
        For more information, see "[Synchronizing teams between your identity
        provider and GitHub Enterprise
        Server](https://docs.github.com/enterprise-server@3.9/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
      tags:
        - - - - teams
      operationId: teams/remove-membership-for-user-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/members#remove-team-membership-for-a-user-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response
        '403':
          description: if team synchronization is set up
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: members
      deprecated: true
  /teams/{team_id}/projects:
    get:
      summary: List team projects (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [`List team
        projects`](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#list-team-projects)
        endpoint.


        Lists the organization projects for a team.
      tags:
        - - - - teams
      operationId: teams/list-projects-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#list-team-projects-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team-project'
              examples:
                default:
                  $ref: '#/components/examples/team-project-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: teams
      deprecated: true
  /teams/{team_id}/projects/{project_id}:
    get:
      summary: Check team permissions for a project (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Check team permissions for a
        project](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#check-team-permissions-for-a-project)
        endpoint.


        Checks whether a team has `read`, `write`, or `admin` permissions for an
        organization project. The response includes projects inherited from a
        parent team.
      tags:
        - - - - teams
      operationId: teams/check-permissions-for-project-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#check-team-permissions-for-a-project-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/project-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-project'
              examples:
                default:
                  $ref: '#/components/examples/team-project'
        '404':
          description: Not Found if project is not managed by this team
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: teams
      deprecated: true
    put:
      summary: Add or update team project permissions (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Add or update team project
        permissions](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#add-or-update-team-project-permissions)
        endpoint.


        Adds an organization project to a team. To add a project to a team or
        update the team's permission on a project, the authenticated user must
        have `admin` permissions for the project. The project and team must be
        part of the same organization.
      tags:
        - - - - teams
      operationId: teams/add-or-update-project-permissions-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#add-or-update-team-project-permissions-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/project-id'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  type: string
                  description: >-
                    The permission to grant to the team for this project.
                    Default: the team's `permission` attribute will be used to
                    determine what permission to grant the team on this project.
                    Note that, if you choose not to pass any parameters, you'll
                    need to set `Content-Length` to zero when calling this
                    endpoint. For more information, see "[HTTP
                    method](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#http-method)."
                  enum:
                    - read
                    - write
                    - admin
            examples:
              default:
                summary: Example of setting permission to read
                value:
                  permission: read
      responses:
        '204':
          description: Response
        '403':
          description: Forbidden if the project is not owned by the organization
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  documentation_url:
                    type: string
              examples:
                response-if-the-project-is-not-owned-by-the-organization:
                  value:
                    message: Must have admin rights to Repository.
                    documentation_url: >-
                      https://docs.github.com/enterprise-server@3.9/rest/teams/teams#add-or-update-team-project-permissions
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: teams
      deprecated: true
    delete:
      summary: Remove a project from a team (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Remove a project from a
        team](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#remove-a-project-from-a-team)
        endpoint.


        Removes an organization project from a team. An organization owner or a
        team maintainer can remove any project from the team. To remove a
        project from a team as an organization member, the authenticated user
        must have `read` access to both the team and project, or `admin` access
        to the team or project. **Note:** This endpoint removes the project from
        the team, but does not delete it.
      tags:
        - - - - teams
      operationId: teams/remove-project-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#remove-a-project-from-a-team-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/project-id'
      responses:
        '204':
          description: Response
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: teams
      deprecated: true
  /teams/{team_id}/repos:
    get:
      summary: List team repositories (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [List team
        repositories](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#list-team-repositories)
        endpoint.
      tags:
        - - - - teams
      operationId: teams/list-repos-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#list-team-repositories-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: teams
      deprecated: true
  /teams/{team_id}/repos/{owner}/{repo}:
    get:
      summary: Check team permissions for a repository (Legacy)
      description: >-
        **Note**: Repositories inherited through a parent team will also be
        checked.


        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Check team permissions for a
        repository](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#check-team-permissions-for-a-repository)
        endpoint.


        You can also get information about the specified repository, including
        what permissions the team grants on it, by passing the following custom
        [media
        type](https://docs.github.com/enterprise-server@3.9/rest/overview/media-types/)
        via the `Accept` header:
      tags:
        - - - - teams
      operationId: teams/check-permissions-for-repo-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#check-team-permissions-for-a-repository-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Alternative response with extra repository information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-repository'
              examples:
                alternative-response-with-extra-repository-information:
                  $ref: >-
                    #/components/examples/team-repository-alternative-response-with-extra-repository-information
        '204':
          description: Response if repository is managed by this team
        '404':
          description: Not Found if repository is not managed by this team
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: teams
      deprecated: true
    put:
      summary: Add or update team repository permissions (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new "[Add or update team repository
        permissions](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#add-or-update-team-repository-permissions)"
        endpoint.


        To add a repository to a team or update the team's permission on a
        repository, the authenticated user must have admin access to the
        repository, and must be able to see the team. The repository must be
        owned by the organization, or a direct fork of a repository owned by the
        organization. You will get a `422 Unprocessable Entity` status if you
        attempt to add a repository to a team that is not owned by the
        organization.


        Note that, if you choose not to pass any parameters, you'll need to set
        `Content-Length` to zero when calling out to this endpoint. For more
        information, see "[HTTP
        method](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#http-method)."
      tags:
        - - - - teams
      operationId: teams/add-or-update-repo-permissions-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#add-or-update-team-repository-permissions-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  type: string
                  description: >-
                    The permission to grant the team on this repository. If no
                    permission is specified, the team's `permission` attribute
                    will be used to determine what permission to grant the team
                    on this repository.
                  enum:
                    - pull
                    - push
                    - admin
            examples:
              default:
                summary: Example of setting permission to pull
                value:
                  permission: push
      responses:
        '204':
          description: Response
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: teams
      deprecated: true
    delete:
      summary: Remove a repository from a team (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Remove a repository from a
        team](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#remove-a-repository-from-a-team)
        endpoint.


        If the authenticated user is an organization owner or a team maintainer,
        they can remove any repositories from the team. To remove a repository
        from a team as an organization member, the authenticated user must have
        admin access to the repository and must be able to see the team. NOTE:
        This does not delete the repository, it just removes it from the team.
      tags:
        - - - - teams
      operationId: teams/remove-repo-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#remove-a-repository-from-a-team-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: teams
      deprecated: true
  /teams/{team_id}/teams:
    get:
      summary: List child teams (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [`List child
        teams`](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#list-child-teams)
        endpoint.
      tags:
        - - - - teams
      operationId: teams/list-child-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#list-child-teams-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: if child teams exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
              examples:
                response-if-child-teams-exist:
                  $ref: >-
                    #/components/examples/team-items-response-if-child-teams-exist
          headers:
            Link:
              $ref: '#/components/headers/link'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: teams
      deprecated: true
  /user/teams:
    get:
      summary: List teams for the authenticated user
      description: >-
        List all of the teams across all of the organizations to which the
        authenticated

        user belongs.


        OAuth app tokens and personal access tokens (classic) need the `user`,
        `repo`, or `read:org` scope to use this endpoint.


        When using a fine-grained personal access token, the resource owner of
        the token must be a single organization, and the response will only
        include the teams from that organization.
      tags:
        - - - - teams
      operationId: teams/list-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#list-teams-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team-full'
              examples:
                default:
                  $ref: '#/components/examples/team-full-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: teams
        subcategory: teams
components:
  schemas:
    ldap-mapping-team:
      type: object
      properties:
        ldap_dn:
          type: string
        id:
          type: integer
        node_id:
          type: string
        url:
          type: string
        html_url:
          type: string
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
        privacy:
          type: string
        permission:
          type: string
        members_url:
          type: string
        repositories_url:
          type: string
        parent:
          nullable: true
    team-full:
      title: Full Team
      description: >-
        Groups of organization members that gives permissions on specified
        repositories.
      type: object
      properties:
        id:
          description: Unique identifier of the team
          example: 42
          type: integer
        node_id:
          type: string
          example: MDQ6VGVhbTE=
        url:
          description: URL for the team
          example: https://api.github.com/organizations/1/team/1
          type: string
          format: uri
        html_url:
          type: string
          format: uri
          example: https://github.com/orgs/rails/teams/core
        name:
          description: Name of the team
          example: Developers
          type: string
        slug:
          type: string
          example: justice-league
        description:
          type: string
          example: A great team.
          nullable: true
        privacy:
          description: The level of privacy this team should have
          type: string
          enum:
            - closed
            - secret
          example: closed
        permission:
          description: Permission that the team will have for its repositories
          example: push
          type: string
        members_url:
          type: string
          example: https://api.github.com/organizations/1/team/1/members{/member}
        repositories_url:
          type: string
          format: uri
          example: https://api.github.com/organizations/1/team/1/repos
        parent:
          $ref: '#/components/schemas/nullable-team-simple'
        members_count:
          type: integer
          example: 3
        repos_count:
          type: integer
          example: 10
        created_at:
          type: string
          format: date-time
          example: '2017-07-14T16:53:42Z'
        updated_at:
          type: string
          format: date-time
          example: '2017-08-17T12:37:15Z'
        organization:
          $ref: '#/components/schemas/team-organization'
        ldap_dn:
          description: Distinguished Name (DN) that team maps to within LDAP environment
          example: uid=example,ou=users,dc=github,dc=com
          type: string
      required:
        - id
        - node_id
        - url
        - members_url
        - name
        - description
        - permission
        - html_url
        - repositories_url
        - slug
        - created_at
        - updated_at
        - members_count
        - repos_count
        - organization
    team-discussion:
      title: Team Discussion
      description: >-
        A team discussion is a persistent record of a free-form conversation
        within a team.
      type: object
      properties:
        author:
          $ref: '#/components/schemas/nullable-simple-user'
        body:
          description: The main text of the discussion.
          example: Please suggest improvements to our workflow in comments.
          type: string
        body_html:
          type: string
          example: <p>Hi! This is an area for us to collaborate as a team</p>
        body_version:
          description: >-
            The current version of the body content. If provided, this update
            operation will be rejected if the given version does not match the
            latest version on the server.
          example: 0307116bbf7ced493b8d8a346c650b71
          type: string
        comments_count:
          type: integer
          example: 0
        comments_url:
          type: string
          format: uri
          example: >-
            https://api.github.com/organizations/1/team/2343027/discussions/1/comments
        created_at:
          type: string
          format: date-time
          example: '2018-01-25T18:56:31Z'
        last_edited_at:
          type: string
          format: date-time
          nullable: true
        html_url:
          type: string
          format: uri
          example: https://github.com/orgs/github/teams/justice-league/discussions/1
        node_id:
          type: string
          example: MDE0OlRlYW1EaXNjdXNzaW9uMQ==
        number:
          description: The unique sequence number of a team discussion.
          example: 42
          type: integer
        pinned:
          description: Whether or not this discussion should be pinned for easy retrieval.
          example: true
          type: boolean
        private:
          description: >-
            Whether or not this discussion should be restricted to team members
            and organization owners.
          example: true
          type: boolean
        team_url:
          type: string
          format: uri
          example: https://api.github.com/organizations/1/team/2343027
        title:
          description: The title of the discussion.
          example: How can we improve our workflow?
          type: string
        updated_at:
          type: string
          format: date-time
          example: '2018-01-25T18:56:31Z'
        url:
          type: string
          format: uri
          example: https://api.github.com/organizations/1/team/2343027/discussions/1
        reactions:
          $ref: '#/components/schemas/reaction-rollup'
      required:
        - author
        - body
        - body_html
        - body_version
        - comments_count
        - comments_url
        - created_at
        - last_edited_at
        - html_url
        - pinned
        - private
        - node_id
        - number
        - team_url
        - title
        - updated_at
        - url
    team-discussion-comment:
      title: Team Discussion Comment
      description: A reply to a discussion within a team.
      type: object
      properties:
        author:
          $ref: '#/components/schemas/nullable-simple-user'
        body:
          description: The main text of the comment.
          example: I agree with this suggestion.
          type: string
        body_html:
          type: string
          example: <p>Do you like apples?</p>
        body_version:
          description: >-
            The current version of the body content. If provided, this update
            operation will be rejected if the given version does not match the
            latest version on the server.
          example: 0307116bbf7ced493b8d8a346c650b71
          type: string
        created_at:
          type: string
          format: date-time
          example: '2018-01-15T23:53:58Z'
        last_edited_at:
          type: string
          format: date-time
          nullable: true
        discussion_url:
          type: string
          format: uri
          example: https://api.github.com/organizations/1/team/2403582/discussions/1
        html_url:
          type: string
          format: uri
          example: >-
            https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1
        node_id:
          type: string
          example: MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=
        number:
          description: The unique sequence number of a team discussion comment.
          example: 42
          type: integer
        updated_at:
          type: string
          format: date-time
          example: '2018-01-15T23:53:58Z'
        url:
          type: string
          format: uri
          example: >-
            https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1
        reactions:
          $ref: '#/components/schemas/reaction-rollup'
      required:
        - author
        - body
        - body_html
        - body_version
        - created_at
        - last_edited_at
        - discussion_url
        - html_url
        - node_id
        - number
        - updated_at
        - url
    reaction:
      title: Reaction
      description: >-
        Reactions to conversations provide a way to help people express their
        feelings more simply and effectively.
      type: object
      properties:
        id:
          type: integer
          example: 1
        node_id:
          type: string
          example: MDg6UmVhY3Rpb24x
        user:
          $ref: '#/components/schemas/nullable-simple-user'
        content:
          description: The reaction to use
          example: heart
          type: string
          enum:
            - '+1'
            - '-1'
            - laugh
            - confused
            - heart
            - hooray
            - rocket
            - eyes
        created_at:
          type: string
          format: date-time
          example: '2016-05-20T20:09:31Z'
      required:
        - id
        - node_id
        - user
        - content
        - created_at
    external-groups:
      title: ExternalGroups
      description: A list of external groups available to be connected to a team
      type: object
      properties:
        groups:
          description: An array of external groups available to be mapped to a team
          example:
            - group_id: 1
              group_name: group-azuread-test
              updated_at: 2021-01-03 22:27:15:000 -700
            - group_id: 2
              group_name: group-azuread-test2
              updated_at: 2021-06-03 22:27:15:000 -700
          type: array
          items:
            type: object
            required:
              - group_id
              - group_name
              - updated_at
            properties:
              group_id:
                description: The internal ID of the group
                example: 1
                type: integer
              group_name:
                description: The display name of the group
                example: group-azuread-test
                type: string
              updated_at:
                description: The time of the last update for this group
                example: 2019-06-03 22:27:15:000 -700
                type: string
    external-group:
      title: ExternalGroup
      description: Information about an external group's usage and its members
      type: object
      required:
        - group_id
        - group_name
        - teams
        - members
      properties:
        group_id:
          description: The internal ID of the group
          example: 1
          type: integer
        group_name:
          description: The display name for the group
          example: group-azuread-test
          type: string
        updated_at:
          description: The date when the group was last updated_at
          example: 2021-01-03 22:27:15:000 -700
          type: string
        teams:
          description: An array of teams linked to this group
          example:
            - team_id: 1
              team_name: team-test
            - team_id: 2
              team_name: team-test2
          type: array
          items:
            type: object
            required:
              - team_id
              - team_name
            properties:
              team_id:
                description: The id for a team
                example: 1
                type: integer
              team_name:
                description: The name of the team
                example: team-test
                type: string
        members:
          description: An array of external members linked to this group
          example:
            - member_id: 1
              member_login: mona-lisa_eocsaxrs
              member_name: Mona Lisa
              member_email: mona_lisa@github.com
            - member_id: 2
              member_login: octo-lisa_eocsaxrs
              member_name: Octo Lisa
              member_email: octo_lisa@github.com
          type: array
          items:
            type: object
            required:
              - member_id
              - member_login
              - member_name
              - member_email
            properties:
              member_id:
                description: The internal user ID of the identity
                example: 1
                type: integer
              member_login:
                description: The handle/login for the user
                example: mona-lisa_eocsaxrs
                type: string
              member_name:
                description: The user display name/profile name
                example: Mona Lisa
                type: string
              member_email:
                description: An email attached to a user
                example: mona_lisa@github.com
                type: string
    team-membership:
      title: Team Membership
      description: Team Membership
      type: object
      properties:
        url:
          type: string
          format: uri
        role:
          description: The role of the user in the team.
          enum:
            - member
            - maintainer
          default: member
          example: member
          type: string
        state:
          description: The state of the user's membership in the team.
          type: string
          enum:
            - active
            - pending
      required:
        - role
        - state
        - url
    team-project:
      title: Team Project
      description: A team's access to a project.
      type: object
      properties:
        owner_url:
          type: string
        url:
          type: string
        html_url:
          type: string
        columns_url:
          type: string
        id:
          type: integer
        node_id:
          type: string
        name:
          type: string
        body:
          type: string
          nullable: true
        number:
          type: integer
        state:
          type: string
        creator:
          $ref: '#/components/schemas/simple-user'
        created_at:
          type: string
        updated_at:
          type: string
        organization_permission:
          description: >-
            The organization permission for this project. Only present when
            owner is an organization.
          type: string
        private:
          description: >-
            Whether the project is private or not. Only present when owner is an
            organization.
          type: boolean
        permissions:
          type: object
          properties:
            read:
              type: boolean
            write:
              type: boolean
            admin:
              type: boolean
          required:
            - read
            - write
            - admin
      required:
        - owner_url
        - url
        - html_url
        - columns_url
        - id
        - node_id
        - name
        - body
        - number
        - state
        - creator
        - created_at
        - updated_at
        - permissions
    team-repository:
      title: Team Repository
      description: A team's access to a repository.
      type: object
      properties:
        id:
          description: Unique identifier of the repository
          example: 42
          type: integer
        node_id:
          type: string
          example: MDEwOlJlcG9zaXRvcnkxMjk2MjY5
        name:
          description: The name of the repository.
          type: string
          example: Team Environment
        full_name:
          type: string
          example: octocat/Hello-World
        license:
          $ref: '#/components/schemas/nullable-license-simple'
        forks:
          type: integer
        permissions:
          type: object
          properties:
            admin:
              type: boolean
            pull:
              type: boolean
            triage:
              type: boolean
            push:
              type: boolean
            maintain:
              type: boolean
          required:
            - admin
            - pull
            - push
        role_name:
          type: string
          example: admin
        owner:
          $ref: '#/components/schemas/nullable-simple-user'
        private:
          description: Whether the repository is private or public.
          default: false
          type: boolean
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World
        description:
          type: string
          example: This your first repo!
          nullable: true
        fork:
          type: boolean
        url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World
        archive_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
        assignees_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/assignees{/user}
        blobs_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
        branches_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/branches{/branch}
        collaborators_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
        comments_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/comments{/number}
        commits_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/commits{/sha}
        compare_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
        contents_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/contents/{+path}
        contributors_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/contributors
        deployments_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/deployments
        downloads_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/downloads
        events_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/events
        forks_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/forks
        git_commits_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
        git_refs_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
        git_tags_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
        git_url:
          type: string
          example: git:github.com/octocat/Hello-World.git
        issue_comment_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
        issue_events_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
        issues_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/issues{/number}
        keys_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
        labels_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/labels{/name}
        languages_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/languages
        merges_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/merges
        milestones_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/milestones{/number}
        notifications_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
        pulls_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/pulls{/number}
        releases_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/releases{/id}
        ssh_url:
          type: string
          example: git@github.com:octocat/Hello-World.git
        stargazers_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/stargazers
        statuses_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
        subscribers_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/subscribers
        subscription_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/subscription
        tags_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/tags
        teams_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/teams
        trees_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
        clone_url:
          type: string
          example: https://github.com/octocat/Hello-World.git
        mirror_url:
          type: string
          format: uri
          example: git:git.example.com/octocat/Hello-World
          nullable: true
        hooks_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/hooks
        svn_url:
          type: string
          format: uri
          example: https://svn.github.com/octocat/Hello-World
        homepage:
          type: string
          format: uri
          example: https://github.com
          nullable: true
        language:
          type: string
          nullable: true
        forks_count:
          type: integer
          example: 9
        stargazers_count:
          type: integer
          example: 80
        watchers_count:
          type: integer
          example: 80
        size:
          type: integer
          example: 108
        default_branch:
          description: The default branch of the repository.
          type: string
          example: master
        open_issues_count:
          type: integer
          example: 0
        is_template:
          description: >-
            Whether this repository acts as a template that can be used to
            generate new repositories.
          default: false
          type: boolean
          example: true
        topics:
          type: array
          items:
            type: string
        has_issues:
          description: Whether issues are enabled.
          default: true
          type: boolean
          example: true
        has_projects:
          description: Whether projects are enabled.
          default: true
          type: boolean
          example: true
        has_wiki:
          description: Whether the wiki is enabled.
          default: true
          type: boolean
          example: true
        has_pages:
          type: boolean
        has_downloads:
          description: Whether downloads are enabled.
          default: true
          type: boolean
          example: true
        archived:
          description: Whether the repository is archived.
          default: false
          type: boolean
        disabled:
          type: boolean
          description: Returns whether or not this repository disabled.
        visibility:
          description: 'The repository visibility: public, private, or internal.'
          default: public
          type: string
        pushed_at:
          type: string
          format: date-time
          example: '2011-01-26T19:06:43Z'
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2011-01-26T19:01:12Z'
          nullable: true
        updated_at:
          type: string
          format: date-time
          example: '2011-01-26T19:14:43Z'
          nullable: true
        allow_rebase_merge:
          description: Whether to allow rebase merges for pull requests.
          default: true
          type: boolean
          example: true
        temp_clone_token:
          type: string
        allow_squash_merge:
          description: Whether to allow squash merges for pull requests.
          default: true
          type: boolean
          example: true
        allow_auto_merge:
          description: Whether to allow Auto-merge to be used on pull requests.
          default: false
          type: boolean
          example: false
        delete_branch_on_merge:
          description: Whether to delete head branches when pull requests are merged
          default: false
          type: boolean
          example: false
        allow_merge_commit:
          description: Whether to allow merge commits for pull requests.
          default: true
          type: boolean
          example: true
        allow_forking:
          description: Whether to allow forking this repo
          default: false
          type: boolean
          example: false
        web_commit_signoff_required:
          description: Whether to require contributors to sign off on web-based commits
          default: false
          type: boolean
          example: false
        subscribers_count:
          type: integer
        network_count:
          type: integer
        open_issues:
          type: integer
        watchers:
          type: integer
        master_branch:
          type: string
      required:
        - archive_url
        - assignees_url
        - blobs_url
        - branches_url
        - collaborators_url
        - comments_url
        - commits_url
        - compare_url
        - contents_url
        - contributors_url
        - deployments_url
        - description
        - downloads_url
        - events_url
        - fork
        - forks_url
        - full_name
        - git_commits_url
        - git_refs_url
        - git_tags_url
        - hooks_url
        - html_url
        - id
        - node_id
        - issue_comment_url
        - issue_events_url
        - issues_url
        - keys_url
        - labels_url
        - languages_url
        - merges_url
        - milestones_url
        - name
        - notifications_url
        - owner
        - private
        - pulls_url
        - releases_url
        - stargazers_url
        - statuses_url
        - subscribers_url
        - subscription_url
        - tags_url
        - teams_url
        - trees_url
        - url
        - clone_url
        - default_branch
        - forks
        - forks_count
        - git_url
        - has_downloads
        - has_issues
        - has_projects
        - has_wiki
        - has_pages
        - homepage
        - language
        - archived
        - disabled
        - mirror_url
        - open_issues
        - open_issues_count
        - license
        - pushed_at
        - size
        - ssh_url
        - stargazers_count
        - svn_url
        - watchers
        - watchers_count
        - created_at
        - updated_at
