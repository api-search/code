openapi: 3.0.3
info:
  version: 1.1.4
  title: ' repos'
  description: Needs description.
  license:
    name: MIT
    url: https://spdx.org/licenses/MIT
  termsOfService: https://docs.github.com/articles/github-terms-of-service
  contact:
    name: Support
    url: https://support.github.com/contact?tags=dotcom-rest-api
  x-github-plan: ghes
  x-github-release: 3.9
tags: []
servers:
  - url: '{protocol}://{hostname}/api/v3'
    variables:
      hostname:
        description: Self-hosted Enterprise Server hostname
        default: HOSTNAME
      protocol:
        description: Self-hosted Enterprise Server protocol
        default: http
externalDocs:
  description: GitHub Enterprise Developer Docs
  url: https://docs.github.com/enterprise-server@3.9/rest/
paths:
  /enterprise/stats/repos:
    get:
      summary: Get repository statistics
      operationId: enterprise-admin/get-repo-stats
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/admin-stats#get-repository-statistics
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/enterprise-repository-overview'
              examples:
                default:
                  value:
                    total_repos: 200
                    root_repos: 1
                    fork_repos: 10
                    org_repos: 150
                    total_pushes: 39000
                    total_wikis: 5
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: enterprise-admin
        subcategory: admin-stats
  /installation/repositories:
    get:
      summary: List repositories accessible to the app installation
      description: List repositories that an app installation can access.
      tags:
        - - - - apps
      operationId: apps/list-repos-accessible-to-installation
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/apps/installations#list-repositories-accessible-to-the-app-installation
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - repositories
                properties:
                  total_count:
                    type: integer
                  repositories:
                    type: array
                    items:
                      $ref: '#/components/schemas/repository'
                  repository_selection:
                    type: string
                    example: selected
              examples:
                default:
                  $ref: '#/components/examples/repository-paginated-2'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: apps
        subcategory: installations
  /orgs/{org}/actions/permissions/repositories:
    get:
      summary: List selected repositories enabled for GitHub Actions in an organization
      description: >-
        Lists the selected repositories that are enabled for GitHub Actions in
        an organization. To use this endpoint, the organization permission
        policy for `enabled_repositories` must be configured to `selected`. For
        more information, see "[Set GitHub Actions permissions for an
        organization](#set-github-actions-permissions-for-an-organization)."


        OAuth app tokens and personal access tokens (classic) need the
        `admin:org` scope to use this endpoint.
      operationId: actions/list-selected-repositories-enabled-github-actions-organization
      tags:
        - - - - actions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/permissions#list-selected-repositories-enabled-for-github-actions-in-an-organization
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - repositories
                properties:
                  total_count:
                    type: number
                  repositories:
                    type: array
                    items:
                      $ref: '#/components/schemas/repository'
              examples:
                default:
                  $ref: '#/components/examples/repository-paginated'
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: false
        category: actions
        subcategory: permissions
    put:
      summary: Set selected repositories enabled for GitHub Actions in an organization
      description: >-
        Replaces the list of selected repositories that are enabled for GitHub
        Actions in an organization. To use this endpoint, the organization
        permission policy for `enabled_repositories` must be configured to
        `selected`. For more information, see "[Set GitHub Actions permissions
        for an
        organization](#set-github-actions-permissions-for-an-organization)."



        OAuth app tokens and personal access tokens (classic) need the
        `admin:org` scope to use this endpoint.
      operationId: actions/set-selected-repositories-enabled-github-actions-organization
      tags:
        - - - - actions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/permissions#set-selected-repositories-enabled-for-github-actions-in-an-organization
      parameters:
        - $ref: '#/components/parameters/org'
      responses:
        '204':
          description: Response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                selected_repository_ids:
                  description: List of repository IDs to enable for GitHub Actions.
                  type: array
                  items:
                    type: integer
                    description: Unique identifier of the repository.
              required:
                - selected_repository_ids
            examples:
              default:
                value:
                  selected_repository_ids:
                    - 32
                    - 42
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: false
        category: actions
        subcategory: permissions
  /orgs/{org}/actions/permissions/repositories/{repository_id}:
    put:
      summary: Enable a selected repository for GitHub Actions in an organization
      description: >-
        Adds a repository to the list of selected repositories that are enabled
        for GitHub Actions in an organization. To use this endpoint, the
        organization permission policy for `enabled_repositories` must be must
        be configured to `selected`. For more information, see "[Set GitHub
        Actions permissions for an
        organization](#set-github-actions-permissions-for-an-organization)."


        OAuth tokens and personal access tokens (classic) need the `admin:org`
        scope to use this endpoint.
      operationId: actions/enable-selected-repository-github-actions-organization
      tags:
        - - - - actions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/permissions#enable-a-selected-repository-for-github-actions-in-an-organization
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/repository-id'
      responses:
        '204':
          description: Response
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: false
        category: actions
        subcategory: permissions
    delete:
      summary: Disable a selected repository for GitHub Actions in an organization
      description: >-
        Removes a repository from the list of selected repositories that are
        enabled for GitHub Actions in an organization. To use this endpoint, the
        organization permission policy for `enabled_repositories` must be
        configured to `selected`. For more information, see "[Set GitHub Actions
        permissions for an
        organization](#set-github-actions-permissions-for-an-organization)."


        OAuth tokens and personal access tokens (classic) need the `admin:org`
        scope to use this endpoint.
      operationId: actions/disable-selected-repository-github-actions-organization
      tags:
        - - - - actions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/permissions#disable-a-selected-repository-for-github-actions-in-an-organization
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/repository-id'
      responses:
        '204':
          description: Response
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: false
        category: actions
        subcategory: permissions
  /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories:
    get:
      summary: List repository access to a self-hosted runner group in an organization
      description: >-
        Lists the repositories with access to a self-hosted runner group
        configured in an organization.


        OAuth app tokens and personal access tokens (classic) need the
        `admin:org` scope to use this endpoint.
      operationId: actions/list-repo-access-to-self-hosted-runner-group-in-org
      tags:
        - - - - actions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/self-hosted-runner-groups#list-repository-access-to-a-self-hosted-runner-group-in-an-organization
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/runner-group-id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per-page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - repositories
                properties:
                  total_count:
                    type: number
                  repositories:
                    type: array
                    items:
                      $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-paginated'
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: true
        category: actions
        subcategory: self-hosted-runner-groups
    put:
      summary: Set repository access for a self-hosted runner group in an organization
      description: >-
        Replaces the list of repositories that have access to a self-hosted
        runner group configured in an organization.


        OAuth app tokens and personal access tokens (classic) need the
        `admin:org` scope to use this endpoint.
      operationId: actions/set-repo-access-to-self-hosted-runner-group-in-org
      tags:
        - - - - actions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/self-hosted-runner-groups#set-repository-access-for-a-self-hosted-runner-group-in-an-organization
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/runner-group-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                selected_repository_ids:
                  description: List of repository IDs that can access the runner group.
                  type: array
                  items:
                    type: integer
                    description: Unique identifier of the repository.
              required:
                - selected_repository_ids
            examples:
              default:
                value:
                  selected_repository_ids:
                    - 32
                    - 91
      responses:
        '204':
          description: Response
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: true
        category: actions
        subcategory: self-hosted-runner-groups
  /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}:
    put:
      summary: Add repository access to a self-hosted runner group in an organization
      description: >-
        Adds a repository to the list of repositories that can access a
        self-hosted runner group. The runner group must have `visibility` set to
        `selected`. For more information, see "[Create a self-hosted runner
        group for an
        organization](#create-a-self-hosted-runner-group-for-an-organization)."


        OAuth tokens and personal access tokens (classic) need the `admin:org`
        scope to use this endpoint.
      operationId: actions/add-repo-access-to-self-hosted-runner-group-in-org
      tags:
        - - - - actions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/self-hosted-runner-groups#add-repository-access-to-a-self-hosted-runner-group-in-an-organization
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/runner-group-id'
        - $ref: '#/components/parameters/repository-id'
      responses:
        '204':
          description: Response
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: true
        category: actions
        subcategory: self-hosted-runner-groups
    delete:
      summary: >-
        Remove repository access to a self-hosted runner group in an
        organization
      description: >-
        Removes a repository from the list of selected repositories that can
        access a self-hosted runner group. The runner group must have
        `visibility` set to `selected`. For more information, see "[Create a
        self-hosted runner group for an
        organization](#create-a-self-hosted-runner-group-for-an-organization)."


        OAuth app tokens and personal access tokens (classic) need the
        `admin:org` scope to use this endpoint.
      operationId: actions/remove-repo-access-to-self-hosted-runner-group-in-org
      tags:
        - - - - actions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/self-hosted-runner-groups#remove-repository-access-to-a-self-hosted-runner-group-in-an-organization
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/runner-group-id'
        - $ref: '#/components/parameters/repository-id'
      responses:
        '204':
          description: Response
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: true
        category: actions
        subcategory: self-hosted-runner-groups
  /orgs/{org}/actions/secrets/{secret_name}/repositories:
    get:
      summary: List selected repositories for an organization secret
      description: >-
        Lists all repositories that have been selected when the `visibility`

        for repository access to a secret is set to `selected`.


        Authenticated users must have collaborator access to a repository to
        create, update, or read secrets.


        OAuth app tokens and personal access tokens (classic) need the
        `admin:org` scope to use this endpoint. If the repository is private,
        the `repo` scope is also required.
      tags:
        - - - - actions
      operationId: actions/list-selected-repos-for-org-secret
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#list-selected-repositories-for-an-organization-secret
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/secret-name'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per-page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - repositories
                properties:
                  total_count:
                    type: integer
                  repositories:
                    type: array
                    items:
                      $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/public-repository-paginated'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: secrets
    put:
      summary: Set selected repositories for an organization secret
      description: >-
        Replaces all repositories for an organization secret when the
        `visibility`

        for repository access is set to `selected`. The visibility is set when
        you [Create

        or update an organization
        secret](https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#create-or-update-an-organization-secret).


        Authenticated users must have collaborator access to a repository to
        create, update, or read secrets.


        OAuth app tokens and personal access tokens (classic) need the
        `admin:org` scope to use this endpoint. If the repository is private,
        the `repo` scope is also required.
      tags:
        - - - - actions
      operationId: actions/set-selected-repos-for-org-secret
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#set-selected-repositories-for-an-organization-secret
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/secret-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                selected_repository_ids:
                  type: array
                  description: >-
                    An array of repository ids that can access the organization
                    secret. You can only provide a list of repository ids when
                    the `visibility` is set to `selected`. You can add and
                    remove individual repositories using the [Add selected
                    repository to an organization
                    secret](https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#add-selected-repository-to-an-organization-secret)
                    and [Remove selected repository from an organization
                    secret](https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#remove-selected-repository-from-an-organization-secret)
                    endpoints.
                  items:
                    type: integer
              required:
                - selected_repository_ids
            examples:
              default:
                value:
                  selected_repository_ids:
                    - 64780797
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: secrets
  /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}:
    put:
      summary: Add selected repository to an organization secret
      description: >-
        Adds a repository to an organization secret when the `visibility` for

        repository access is set to `selected`. For more information about
        setting the visibility, see [Create or

        update an organization
        secret](https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#create-or-update-an-organization-secret).


        Authenticated users must have collaborator access to a repository to
        create, update, or read secrets.


        OAuth tokens and personal access tokens (classic) need the `admin:org`
        scope to use this endpoint. If the repository is private, OAuth tokens
        and personal access tokens (classic) need the `repo` scope to use this
        endpoint.
      tags:
        - - - - actions
      operationId: actions/add-selected-repo-to-org-secret
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#add-selected-repository-to-an-organization-secret
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/secret-name'
        - name: repository_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content when repository was added to the selected list
        '409':
          description: Conflict when visibility type is not set to selected
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: secrets
    delete:
      summary: Remove selected repository from an organization secret
      description: >-
        Removes a repository from an organization secret when the `visibility`

        for repository access is set to `selected`. The visibility is set when
        you [Create

        or update an organization
        secret](https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#create-or-update-an-organization-secret).


        Authenticated users must have collaborator access to a repository to
        create, update, or read secrets.


        OAuth app tokens and personal access tokens (classic) need the
        `admin:org` scope to use this endpoint. If the repository is private,
        the `repo` scope is also required.
      tags:
        - - - - actions
      operationId: actions/remove-selected-repo-from-org-secret
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#remove-selected-repository-from-an-organization-secret
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/secret-name'
        - name: repository_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Response when repository was removed from the selected list
        '409':
          description: Conflict when visibility type not set to selected
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: secrets
  /orgs/{org}/actions/variables/{name}/repositories:
    get:
      summary: List selected repositories for an organization variable
      description: >-
        Lists all repositories that can access an organization variable

        that is available to selected repositories.


        Authenticated users must have collaborator access to a repository to
        create, update, or read variables.


        OAuth app tokens and personal access tokens (classic) need the
        `admin:org` scope to use this endpoint. If the repository is private,
        the `repo` scope is also required.
      tags:
        - - - - actions
      operationId: actions/list-selected-repos-for-org-variable
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/variables#list-selected-repositories-for-an-organization-variable
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/variable-name'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per-page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - repositories
                properties:
                  total_count:
                    type: integer
                  repositories:
                    type: array
                    items:
                      $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/public-repository-paginated'
        '409':
          description: >-
            Response when the visibility of the variable is not set to
            `selected`
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: variables
    put:
      summary: Set selected repositories for an organization variable
      description: >-
        Replaces all repositories for an organization variable that is available

        to selected repositories. Organization variables that are available to
        selected

        repositories have their `visibility` field set to `selected`.


        Authenticated users must have collaborator access to a repository to
        create, update, or read variables.


        OAuth app tokens and personal access tokens (classic) need the
        `admin:org` scope to use this endpoint. If the repository is private,
        the `repo` scope is also required.
      tags:
        - - - - actions
      operationId: actions/set-selected-repos-for-org-variable
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/variables#set-selected-repositories-for-an-organization-variable
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/variable-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                selected_repository_ids:
                  type: array
                  description: >-
                    The IDs of the repositories that can access the organization
                    variable.
                  items:
                    type: integer
              required:
                - selected_repository_ids
            examples:
              default:
                value:
                  selected_repository_ids:
                    - 64780797
      responses:
        '204':
          description: Response
        '409':
          description: >-
            Response when the visibility of the variable is not set to
            `selected`
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: variables
  /orgs/{org}/actions/variables/{name}/repositories/{repository_id}:
    put:
      summary: Add selected repository to an organization variable
      description: >-
        Adds a repository to an organization variable that is available to
        selected repositories.

        Organization variables that are available to selected repositories have
        their `visibility` field set to `selected`.


        Authenticated users must have collaborator access to a repository to
        create, update, or read secrets.


        OAuth tokens and personal access tokens (classic) need the `admin:org`
        scope to use this endpoint. If the repository is private, OAuth tokens
        and personal access tokens (classic) need the `repo` scope to use this
        endpoint.
      tags:
        - - - - actions
      operationId: actions/add-selected-repo-to-org-variable
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/variables#add-selected-repository-to-an-organization-variable
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/variable-name'
        - name: repository_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Response
        '409':
          description: >-
            Response when the visibility of the variable is not set to
            `selected`
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: variables
    delete:
      summary: Remove selected repository from an organization variable
      description: >-
        Removes a repository from an organization variable that is

        available to selected repositories. Organization variables that are
        available to

        selected repositories have their `visibility` field set to `selected`.


        Authenticated users must have collaborator access to a repository to
        create, update, or read variables.


        OAuth app tokens and personal access tokens (classic) need the
        `admin:org` scope to use this endpoint. If the repository is private,
        the `repo` scope is also required.
      tags:
        - - - - actions
      operationId: actions/remove-selected-repo-from-org-variable
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/variables#remove-selected-repository-from-an-organization-variable
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/variable-name'
        - name: repository_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Response
        '409':
          description: >-
            Response when the visibility of the variable is not set to
            `selected`
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: variables
  /orgs/{org}/dependabot/secrets/{secret_name}/repositories:
    get:
      summary: List selected repositories for an organization secret
      description: >-
        Lists all repositories that have been selected when the `visibility`

        for repository access to a secret is set to `selected`.


        OAuth app tokens and personal access tokens (classic) need the
        `admin:org` scope to use this endpoint.
      tags:
        - - - - dependabot
      operationId: dependabot/list-selected-repos-for-org-secret
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/secret-name'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per-page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - repositories
                properties:
                  total_count:
                    type: integer
                  repositories:
                    type: array
                    items:
                      $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/public-repository-paginated'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: dependabot
        subcategory: secrets
    put:
      summary: Set selected repositories for an organization secret
      description: >-
        Replaces all repositories for an organization secret when the
        `visibility`

        for repository access is set to `selected`. The visibility is set when
        you [Create

        or update an organization
        secret](https://docs.github.com/enterprise-server@3.9/rest/dependabot/secrets#create-or-update-an-organization-secret).


        OAuth app tokens and personal access tokens (classic) need the
        `admin:org` scope to use this endpoint.
      tags:
        - - - - dependabot
      operationId: dependabot/set-selected-repos-for-org-secret
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/secret-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                selected_repository_ids:
                  type: array
                  description: >-
                    An array of repository ids that can access the organization
                    secret. You can only provide a list of repository ids when
                    the `visibility` is set to `selected`. You can add and
                    remove individual repositories using the [Set selected
                    repositories for an organization
                    secret](https://docs.github.com/enterprise-server@3.9/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret)
                    and [Remove selected repository from an organization
                    secret](https://docs.github.com/enterprise-server@3.9/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret)
                    endpoints.
                  items:
                    type: integer
              required:
                - selected_repository_ids
            examples:
              default:
                value:
                  selected_repository_ids:
                    - 64780797
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: dependabot
        subcategory: secrets
  /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}:
    put:
      summary: Add selected repository to an organization secret
      description: >-
        Adds a repository to an organization secret when the `visibility` for

        repository access is set to `selected`. The visibility is set when you
        [Create or

        update an organization
        secret](https://docs.github.com/enterprise-server@3.9/rest/dependabot/secrets#create-or-update-an-organization-secret).


        OAuth app tokens and personal access tokens (classic) need the
        `admin:org` scope to use this endpoint.
      tags:
        - - - - dependabot
      operationId: dependabot/add-selected-repo-to-org-secret
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/dependabot/secrets#add-selected-repository-to-an-organization-secret
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/secret-name'
        - name: repository_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content when repository was added to the selected list
        '409':
          description: Conflict when visibility type is not set to selected
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: dependabot
        subcategory: secrets
    delete:
      summary: Remove selected repository from an organization secret
      description: >-
        Removes a repository from an organization secret when the `visibility`

        for repository access is set to `selected`. The visibility is set when
        you [Create

        or update an organization
        secret](https://docs.github.com/enterprise-server@3.9/rest/dependabot/secrets#create-or-update-an-organization-secret).


        OAuth app tokens and personal access tokens (classic) need the
        `admin:org` scope to use this endpoint.
      tags:
        - - - - dependabot
      operationId: dependabot/remove-selected-repo-from-org-secret
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/secret-name'
        - name: repository_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Response when repository was removed from the selected list
        '409':
          description: Conflict when visibility type not set to selected
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: dependabot
        subcategory: secrets
  /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock:
    delete:
      summary: Unlock an organization repository
      description: >-
        Unlocks a repository that was locked for migration. You should unlock
        each migrated repository and [delete
        them](https://docs.github.com/enterprise-server@3.9/rest/repos/repos#delete-a-repository)
        when the migration is complete and you no longer need the source data.
      tags:
        - - - - migrations
      operationId: migrations/unlock-repo-for-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/migrations/orgs#unlock-an-organization-repository
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/migration-id'
        - $ref: '#/components/parameters/repo-name'
      responses:
        '204':
          description: Response
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: migrations
        subcategory: orgs
  /orgs/{org}/migrations/{migration_id}/repositories:
    get:
      summary: List repositories in an organization migration
      description: List all the repositories for this organization migration.
      tags:
        - - - - migrations
      operationId: migrations/list-repos-for-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/migrations/orgs#list-repositories-in-an-organization-migration
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/migration-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: migrations
        subcategory: orgs
  /orgs/{org}/repos:
    get:
      summary: List organization repositories
      description: >-
        Lists repositories for the specified organization.


        **Note:** In order to see the `security_and_analysis` block for a
        repository you must have admin permissions for the repository or be an
        owner or security manager for the organization that owns the repository.
        For more information, see "[Managing security managers in your
        organization](https://docs.github.com/enterprise-server@3.9/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
      tags:
        - - - - repos
      operationId: repos/list-for-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#list-organization-repositories
      parameters:
        - $ref: '#/components/parameters/org'
        - name: type
          description: >-
            Specifies the types of repositories you want returned. `internal` is
            not yet supported when a GitHub App calls this endpoint with an
            installation access token.
          in: query
          required: false
          schema:
            type: string
            enum:
              - all
              - public
              - private
              - forks
              - sources
              - member
              - internal
        - name: sort
          description: The property to sort the results by.
          in: query
          required: false
          schema:
            type: string
            enum:
              - created
              - updated
              - pushed
              - full_name
            default: created
        - name: direction
          description: >-
            The order to sort by. Default: `asc` when using `full_name`,
            otherwise `desc`.
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
    post:
      summary: Create an organization repository
      description: >-
        Creates a new repository in the specified organization. The
        authenticated user must be a member of the organization.


        OAuth app tokens and personal access tokens (classic) need the
        `public_repo` or `repo` scope to create a public repository, and `repo`
        scope to create a private repository.
      tags:
        - - - - repos
      operationId: repos/create-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#create-an-organization-repository
      parameters:
        - $ref: '#/components/parameters/org'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the repository.
                description:
                  type: string
                  description: A short description of the repository.
                homepage:
                  type: string
                  description: A URL with more information about the repository.
                private:
                  type: boolean
                  description: Whether the repository is private.
                  default: false
                visibility:
                  type: string
                  description: >-
                    The visibility of the repository. **Note**: For GitHub
                    Enterprise Server, this endpoint will only list repositories
                    available to all users on the enterprise. For more
                    information, see "[Creating an internal
                    repository](https://docs.github.com/enterprise-server@3.9/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)"
                    in the GitHub Help documentation.  

                    The `visibility` parameter overrides the `private` parameter
                    when you use both parameters with the `nebula-preview`
                    preview header.
                  enum:
                    - public
                    - private
                    - internal
                has_issues:
                  type: boolean
                  description: >-
                    Either `true` to enable issues for this repository or
                    `false` to disable them.
                  default: true
                has_projects:
                  type: boolean
                  description: >-
                    Either `true` to enable projects for this repository or
                    `false` to disable them. **Note:** If you're creating a
                    repository in an organization that has disabled repository
                    projects, the default is `false`, and if you pass `true`,
                    the API returns an error.
                  default: true
                has_wiki:
                  type: boolean
                  description: >-
                    Either `true` to enable the wiki for this repository or
                    `false` to disable it.
                  default: true
                has_downloads:
                  description: Whether downloads are enabled.
                  default: true
                  type: boolean
                  example: true
                is_template:
                  type: boolean
                  description: >-
                    Either `true` to make this repo available as a template
                    repository or `false` to prevent it.
                  default: false
                team_id:
                  type: integer
                  description: >-
                    The id of the team that will be granted access to this
                    repository. This is only valid when creating a repository in
                    an organization.
                auto_init:
                  type: boolean
                  description: Pass `true` to create an initial commit with empty README.
                  default: false
                gitignore_template:
                  type: string
                  description: >-
                    Desired language or platform [.gitignore
                    template](https://github.com/github/gitignore) to apply. Use
                    the name of the template without the extension. For example,
                    "Haskell".
                license_template:
                  type: string
                  description: >-
                    Choose an [open source license
                    template](https://choosealicense.com/) that best suits your
                    needs, and then use the [license
                    keyword](https://docs.github.com/enterprise-server@3.9/articles/licensing-a-repository/#searching-github-by-license-type)
                    as the `license_template` string. For example, "mit" or
                    "mpl-2.0".
                allow_squash_merge:
                  type: boolean
                  description: >-
                    Either `true` to allow squash-merging pull requests, or
                    `false` to prevent squash-merging.
                  default: true
                allow_merge_commit:
                  type: boolean
                  description: >-
                    Either `true` to allow merging pull requests with a merge
                    commit, or `false` to prevent merging pull requests with
                    merge commits.
                  default: true
                allow_rebase_merge:
                  type: boolean
                  description: >-
                    Either `true` to allow rebase-merging pull requests, or
                    `false` to prevent rebase-merging.
                  default: true
                allow_auto_merge:
                  type: boolean
                  description: >-
                    Either `true` to allow auto-merge on pull requests, or
                    `false` to disallow auto-merge.
                  default: false
                delete_branch_on_merge:
                  type: boolean
                  description: >-
                    Either `true` to allow automatically deleting head branches
                    when pull requests are merged, or `false` to prevent
                    automatic deletion. **The authenticated user must be an
                    organization owner to set this property to `true`.**
                  default: false
                use_squash_pr_title_as_default:
                  type: boolean
                  description: >-
                    Either `true` to allow squash-merge commits to use pull
                    request title, or `false` to use commit message. **This
                    property has been deprecated. Please use
                    `squash_merge_commit_title` instead.
                  default: false
                  deprecated: true
                squash_merge_commit_title:
                  type: string
                  enum:
                    - PR_TITLE
                    - COMMIT_OR_PR_TITLE
                  description: >-
                    The default value for a squash merge commit title:


                    - `PR_TITLE` - default to the pull request's title.

                    - `COMMIT_OR_PR_TITLE` - default to the commit's title (if
                    only one commit) or the pull request's title (when more than
                    one commit).
                squash_merge_commit_message:
                  type: string
                  enum:
                    - PR_BODY
                    - COMMIT_MESSAGES
                    - BLANK
                  description: >-
                    The default value for a squash merge commit message:


                    - `PR_BODY` - default to the pull request's body.

                    - `COMMIT_MESSAGES` - default to the branch's commit
                    messages.

                    - `BLANK` - default to a blank commit message.
                merge_commit_title:
                  type: string
                  enum:
                    - PR_TITLE
                    - MERGE_MESSAGE
                  description: >-
                    The default value for a merge commit title.


                    - `PR_TITLE` - default to the pull request's title.

                    - `MERGE_MESSAGE` - default to the classic title for a merge
                    message (e.g., Merge pull request #123 from branch-name).
                merge_commit_message:
                  type: string
                  enum:
                    - PR_BODY
                    - PR_TITLE
                    - BLANK
                  description: |-
                    The default value for a merge commit message.

                    - `PR_TITLE` - default to the pull request's title.
                    - `PR_BODY` - default to the pull request's body.
                    - `BLANK` - default to a blank commit message.
              required:
                - name
            examples:
              default:
                value:
                  name: Hello-World
                  description: This is your first repository
                  homepage: https://github.com
                  private: false
                  has_issues: true
                  has_projects: true
                  has_wiki: true
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/full-repository'
              examples:
                default:
                  $ref: '#/components/examples/full-repository'
          headers:
            Location:
              example: https://api.github.com/repos/octocat/Hello-World
              schema:
                type: string
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
  /orgs/{org}/repository-fine-grained-permissions:
    get:
      summary: List repository fine-grained permissions for an organization
      description: >-
        Lists the fine-grained permissions that can be used in custom repository
        roles for an organization. For more information, see "[About custom
        repository
        roles](https://docs.github.com/enterprise-server@3.9/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-repository-roles)."


        The authenticated user must be an administrator of the organization or
        of a repository of the organization to use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the
        `admin:org` or `repo` scope to use this endpoint.
      tags:
        - - - - orgs
      operationId: orgs/list-repo-fine-grained-permissions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/orgs/custom-roles#list-repository-fine-grained-permissions-for-an-organization
      parameters:
        - $ref: '#/components/parameters/org'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/repository-fine-grained-permission'
              examples:
                default:
                  $ref: >-
                    #/components/examples/repository-fine-grained-permission-example
      x-github:
        githubCloudOnly: true
        enabledForGitHubApps: true
        category: orgs
        subcategory: custom-roles
  /orgs/{org}/teams/{team_slug}/repos:
    get:
      summary: List team repositories
      description: >-
        Lists a team's repositories visible to the authenticated user.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `GET /organizations/{org_id}/team/{team_id}/repos`.
      tags:
        - - - - teams
      operationId: teams/list-repos-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#list-team-repositories
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
  /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}:
    get:
      summary: Check team permissions for a repository
      description: >-
        Checks whether a team has `admin`, `push`, `maintain`, `triage`, or
        `pull` permission for a repository. Repositories inherited through a
        parent team will also be checked.


        You can also get information about the specified repository, including
        what permissions the team grants on it, by passing the following custom
        [media
        type](https://docs.github.com/enterprise-server@3.9/rest/overview/media-types/)
        via the `application/vnd.github.v3.repository+json` accept header.


        If a team doesn't have permission for the repository, you will receive a
        `404 Not Found` response status.


        If the repository is private, you must have at least `read` permission
        for that repository, and your token must have the `repo` or `admin:org`
        scope. Otherwise, you will receive a `404 Not Found` response status.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `GET
        /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
      tags:
        - - - - teams
      operationId: teams/check-permissions-for-repo-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#check-team-permissions-for-a-repository
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Alternative response with repository permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-repository'
              examples:
                alternative-response-with-repository-permissions:
                  $ref: >-
                    #/components/examples/team-repository-alternative-response-with-repository-permissions
        '204':
          description: >-
            Response if team has permission for the repository. This is the
            response when the repository media type hasn't been provded in the
            Accept header.
        '404':
          description: Not Found if team does not have permission for the repository
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
    put:
      summary: Add or update team repository permissions
      description: >-
        To add a repository to a team or update the team's permission on a
        repository, the authenticated user must have admin access to the
        repository, and must be able to see the team. The repository must be
        owned by the organization, or a direct fork of a repository owned by the
        organization. You will get a `422 Unprocessable Entity` status if you
        attempt to add a repository to a team that is not owned by the
        organization. Note that, if you choose not to pass any parameters,
        you'll need to set `Content-Length` to zero when calling out to this
        endpoint. For more information, see "[HTTP
        method](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#http-method)."


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `PUT
        /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.


        For more information about the permission levels, see "[Repository
        permission levels for an
        organization](https://docs.github.com/enterprise-server@3.9/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
      tags:
        - - - - teams
      operationId: teams/add-or-update-repo-permissions-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#add-or-update-team-repository-permissions
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  type: string
                  description: >-
                    The permission to grant the team on this repository. We
                    accept the following permissions to be set: `pull`,
                    `triage`, `push`, `maintain`, `admin` and you can also
                    specify a custom repository role name, if the owning
                    organization has defined any. If no permission is specified,
                    the team's `permission` attribute will be used to determine
                    what permission to grant the team on this repository.
                  default: push
            examples:
              default:
                summary: >-
                  Adding a team to an organization repository with the write
                  role
                value:
                  permission: push
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
    delete:
      summary: Remove a repository from a team
      description: >-
        If the authenticated user is an organization owner or a team maintainer,
        they can remove any repositories from the team. To remove a repository
        from a team as an organization member, the authenticated user must have
        admin access to the repository and must be able to see the team. This
        does not delete the repository, it just removes it from the team.


        **Note:** You can also specify a team by `org_id` and `team_id` using
        the route `DELETE
        /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
      tags:
        - - - - teams
      operationId: teams/remove-repo-in-org
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#remove-a-repository-from-a-team
      parameters:
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/team-slug'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: teams
        subcategory: teams
  /repos/{owner}/{repo}:
    get:
      summary: Get a repository
      description: >-
        The `parent` and `source` objects are present when the repository is a
        fork. `parent` is the repository this repository was forked from,
        `source` is the ultimate source for the network.


        **Note:** In order to see the `security_and_analysis` block for a
        repository you must have admin permissions for the repository or be an
        owner or security manager for the organization that owns the repository.
        For more information, see "[Managing security managers in your
        organization](https://docs.github.com/enterprise-server@3.9/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
      tags:
        - - - - repos
      operationId: repos/get
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#get-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/full-repository'
              examples:
                default-response:
                  $ref: '#/components/examples/full-repository-default-response'
        '301':
          $ref: '#/components/responses/moved_permanently'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
    patch:
      summary: Update a repository
      description: >-
        **Note**: To edit a repository's topics, use the [Replace all repository
        topics](https://docs.github.com/enterprise-server@3.9/rest/repos/repos#replace-all-repository-topics)
        endpoint.
      tags:
        - - - - repos
      operationId: repos/update
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#update-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the repository.
                description:
                  type: string
                  description: A short description of the repository.
                homepage:
                  type: string
                  description: A URL with more information about the repository.
                private:
                  type: boolean
                  description: >-
                    Either `true` to make the repository private or `false` to
                    make it public. Default: `false`.  

                    **Note**: You will get a `422` error if the organization
                    restricts [changing repository
                    visibility](https://docs.github.com/enterprise-server@3.9/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories)
                    to organization owners and a non-owner tries to change the
                    value of private.
                  default: false
                visibility:
                  type: string
                  description: The visibility of the repository.
                  enum:
                    - public
                    - private
                    - internal
                security_and_analysis:
                  type: object
                  description: >-
                    Specify which security and analysis features to enable or
                    disable for the repository.


                    To use this parameter, you must have admin permissions for
                    the repository or be an owner or security manager for the
                    organization that owns the repository. For more information,
                    see "[Managing security managers in your
                    organization](https://docs.github.com/enterprise-server@3.9/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."


                    For example, to enable GitHub Advanced Security, use this
                    data in the body of the `PATCH` request:

                    `{ "security_and_analysis": {"advanced_security": {
                    "status": "enabled" } } }`.


                    You can check which security and analysis features are
                    currently enabled by using a `GET /repos/{owner}/{repo}`
                    request.
                  nullable: true
                  properties:
                    advanced_security:
                      type: object
                      description: >-
                        Use the `status` property to enable or disable GitHub
                        Advanced Security for this repository. For more
                        information, see "[About GitHub Advanced
                        Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
                      properties:
                        status:
                          type: string
                          description: Can be `enabled` or `disabled`.
                    secret_scanning:
                      type: object
                      description: >-
                        Use the `status` property to enable or disable secret
                        scanning for this repository. For more information, see
                        "[About secret
                        scanning](/code-security/secret-security/about-secret-scanning)."
                      properties:
                        status:
                          type: string
                          description: Can be `enabled` or `disabled`.
                    secret_scanning_push_protection:
                      type: object
                      description: >-
                        Use the `status` property to enable or disable secret
                        scanning push protection for this repository. For more
                        information, see "[Protecting pushes with secret
                        scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."
                      properties:
                        status:
                          type: string
                          description: Can be `enabled` or `disabled`.
                has_issues:
                  type: boolean
                  description: >-
                    Either `true` to enable issues for this repository or
                    `false` to disable them.
                  default: true
                has_projects:
                  type: boolean
                  description: >-
                    Either `true` to enable projects for this repository or
                    `false` to disable them. **Note:** If you're creating a
                    repository in an organization that has disabled repository
                    projects, the default is `false`, and if you pass `true`,
                    the API returns an error.
                  default: true
                has_wiki:
                  type: boolean
                  description: >-
                    Either `true` to enable the wiki for this repository or
                    `false` to disable it.
                  default: true
                is_template:
                  type: boolean
                  description: >-
                    Either `true` to make this repo available as a template
                    repository or `false` to prevent it.
                  default: false
                default_branch:
                  type: string
                  description: Updates the default branch for this repository.
                allow_squash_merge:
                  type: boolean
                  description: >-
                    Either `true` to allow squash-merging pull requests, or
                    `false` to prevent squash-merging.
                  default: true
                allow_merge_commit:
                  type: boolean
                  description: >-
                    Either `true` to allow merging pull requests with a merge
                    commit, or `false` to prevent merging pull requests with
                    merge commits.
                  default: true
                allow_rebase_merge:
                  type: boolean
                  description: >-
                    Either `true` to allow rebase-merging pull requests, or
                    `false` to prevent rebase-merging.
                  default: true
                delete_branch_on_merge:
                  type: boolean
                  description: >-
                    Either `true` to allow automatically deleting head branches
                    when pull requests are merged, or `false` to prevent
                    automatic deletion.
                  default: false
                allow_update_branch:
                  type: boolean
                  description: >-
                    Either `true` to always allow a pull request head branch
                    that is behind its base branch to be updated even if it is
                    not required to be up to date before merging, or false
                    otherwise.
                  default: false
                use_squash_pr_title_as_default:
                  type: boolean
                  description: >-
                    Either `true` to allow squash-merge commits to use pull
                    request title, or `false` to use commit message. **This
                    property has been deprecated. Please use
                    `squash_merge_commit_title` instead.
                  default: false
                  deprecated: true
                squash_merge_commit_title:
                  type: string
                  enum:
                    - PR_TITLE
                    - COMMIT_OR_PR_TITLE
                  description: >-
                    The default value for a squash merge commit title:


                    - `PR_TITLE` - default to the pull request's title.

                    - `COMMIT_OR_PR_TITLE` - default to the commit's title (if
                    only one commit) or the pull request's title (when more than
                    one commit).
                squash_merge_commit_message:
                  type: string
                  enum:
                    - PR_BODY
                    - COMMIT_MESSAGES
                    - BLANK
                  description: >-
                    The default value for a squash merge commit message:


                    - `PR_BODY` - default to the pull request's body.

                    - `COMMIT_MESSAGES` - default to the branch's commit
                    messages.

                    - `BLANK` - default to a blank commit message.
                merge_commit_title:
                  type: string
                  enum:
                    - PR_TITLE
                    - MERGE_MESSAGE
                  description: >-
                    The default value for a merge commit title.


                    - `PR_TITLE` - default to the pull request's title.

                    - `MERGE_MESSAGE` - default to the classic title for a merge
                    message (e.g., Merge pull request #123 from branch-name).
                merge_commit_message:
                  type: string
                  enum:
                    - PR_BODY
                    - PR_TITLE
                    - BLANK
                  description: |-
                    The default value for a merge commit message.

                    - `PR_TITLE` - default to the pull request's title.
                    - `PR_BODY` - default to the pull request's body.
                    - `BLANK` - default to a blank commit message.
                archived:
                  type: boolean
                  description: >-
                    Whether to archive this repository. `false` will unarchive a
                    previously archived repository.
                  default: false
                allow_forking:
                  type: boolean
                  description: >-
                    Either `true` to allow private forks, or `false` to prevent
                    private forks.
                  default: false
                web_commit_signoff_required:
                  type: boolean
                  description: >-
                    Either `true` to require contributors to sign off on
                    web-based commits, or `false` to not require contributors to
                    sign off on web-based commits.
                  default: false
            examples:
              default:
                value:
                  name: Hello-World
                  description: This is your first repository
                  homepage: https://github.com
                  private: true
                  has_issues: true
                  has_projects: true
                  has_wiki: true
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/full-repository'
              examples:
                default:
                  $ref: '#/components/examples/full-repository'
        '307':
          $ref: '#/components/responses/temporary_redirect'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
        previews:
          - required: false
            name: nebula
            note: >-
              You can set the visibility of a repository using the new
              `visibility` parameter in the [Repositories
              API](https://docs.github.com/enterprise-server@3.9/rest/repos),
              and get a repository's visibility with a new response key. For
              more information, see the [blog
              post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).


              To access repository visibility during the preview period, you
              must provide a custom [media
              type](https://docs.github.com/enterprise-server@3.9/rest/overview/media-types)
              in the `Accept` header:

              ```shell

              application/vnd.github.nebula-preview+json

              ```
          - required: false
            name: baptiste
            note: >-
              The `is_template` and `template_repository` keys are currently
              available for developer to preview. See [Create a repository using
              a
              template](https://docs.github.com/enterprise-server@3.9/rest/repos/repos#create-a-repository-using-a-template)
              to learn how to create template repositories. To access these new
              response keys during the preview period, you must provide a custom
              [media
              type](https://docs.github.com/enterprise-server@3.9/rest/overview/media-types)
              in the `Accept` header:


              ```shell

              application/vnd.github.baptiste-preview+json

              ```
    delete:
      summary: Delete a repository
      description: >-
        Deleting a repository requires admin access.


        If an organization owner has configured the organization to prevent
        members from deleting organization-owned

        repositories, you will get a `403 Forbidden` response.


        OAuth app tokens and personal access tokens (classic) need the
        `delete_repo` scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/delete
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#delete-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response
        '307':
          $ref: '#/components/responses/temporary_redirect'
        '403':
          description: >-
            If an organization owner has configured the organization to prevent
            members from deleting organization-owned repositories, a member will
            get this response:
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  documentation_url:
                    type: string
              examples:
                default:
                  value:
                    message: Organization members cannot delete repositories.
                    documentation_url: >-
                      https://docs.github.com/enterprise-server@3.9/rest/repos/repos#delete-a-repository
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
  /repos/{owner}/{repo}/actions/artifacts:
    get:
      summary: List artifacts for a repository
      description: >-
        Lists all artifacts for a repository.


        Anyone with read access to the repository can use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint with a private repository.
      tags:
        - - - - actions
      operationId: actions/list-artifacts-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/artifacts#list-artifacts-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/artifact-name'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - artifacts
                properties:
                  total_count:
                    type: integer
                  artifacts:
                    type: array
                    items:
                      $ref: '#/components/schemas/artifact'
              examples:
                default:
                  $ref: '#/components/examples/artifact-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: artifacts
  /repos/{owner}/{repo}/actions/artifacts/{artifact_id}:
    get:
      summary: Get an artifact
      description: >-
        Gets a specific artifact for a workflow run.


        Anyone with read access to the repository can use this endpoint.


        If the repository is private, OAuth tokens and personal access tokens
        (classic) need the `repo` scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/get-artifact
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/artifacts#get-an-artifact
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/artifact-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifact'
              examples:
                default:
                  $ref: '#/components/examples/artifact'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: artifacts
    delete:
      summary: Delete an artifact
      description: >-
        Deletes an artifact for a workflow run.

        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/delete-artifact
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/artifacts#delete-an-artifact
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/artifact-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: artifacts
  /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}:
    get:
      summary: Download an artifact
      description: >-
        Gets a redirect URL to download an archive for a repository. This URL
        expires after 1 minute. Look for `Location:` in

        the response header to find the URL for the download. The
        `:archive_format` must be `zip`.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/download-artifact
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/artifacts#download-an-artifact
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/artifact-id'
        - name: archive_format
          in: path
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Response
          headers:
            Location:
              $ref: '#/components/headers/location'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: artifacts
  /repos/{owner}/{repo}/actions/cache/usage:
    get:
      summary: Get GitHub Actions cache usage for a repository
      description: >-
        Gets GitHub Actions cache usage for a repository.

        The data fetched using this API is refreshed approximately every 5
        minutes, so values returned from this endpoint may take at least 5
        minutes to get updated.


        Anyone with read access to the repository can use this endpoint.


        If the repository is private, OAuth tokens and personal access tokens
        (classic) need the `repo` scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/get-actions-cache-usage
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/cache#get-github-actions-cache-usage-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actions-cache-usage-by-repository'
              examples:
                default:
                  $ref: '#/components/examples/actions-cache-usage'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: cache
  /repos/{owner}/{repo}/actions/cache/usage-policy:
    get:
      summary: Get GitHub Actions cache usage policy for a repository
      description: >-
        Gets GitHub Actions cache usage policy for a repository.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/get-actions-cache-usage-policy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/cache#get-github-actions-cache-usage-policy-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actions-cache-usage-policy-for-repository'
              examples:
                default:
                  $ref: '#/components/examples/actions-cache-usage-policy'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: cache
    patch:
      summary: Set GitHub Actions cache usage policy for a repository
      description: >-
        Sets GitHub Actions cache usage policy for a repository.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/set-actions-cache-usage-policy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/cache#set-github-actions-cache-usage-policy-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/actions-cache-usage-policy-for-repository'
            examples:
              selected_actions:
                $ref: '#/components/examples/actions-cache-usage-policy'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: cache
  /repos/{owner}/{repo}/actions/caches:
    get:
      summary: List GitHub Actions caches for a repository
      description: >-
        Lists the GitHub Actions caches for a repository.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/get-actions-cache-list
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/cache#list-github-actions-caches-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/actions-cache-git-ref-full'
        - $ref: '#/components/parameters/actions-cache-key'
        - $ref: '#/components/parameters/actions-cache-list-sort'
        - $ref: '#/components/parameters/direction'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actions-cache-list'
              examples:
                default:
                  $ref: '#/components/examples/actions-cache-list'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        previews: []
        category: actions
        subcategory: cache
    delete:
      summary: Delete GitHub Actions caches for a repository (using a cache key)
      description: >-
        Deletes one or more GitHub Actions caches for a repository, using a
        complete cache key. By default, all caches that match the provided key
        are deleted, but you can optionally provide a Git ref to restrict
        deletions to caches that match both the provided key and the Git ref.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/delete-actions-cache-by-key
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/cache#delete-github-actions-caches-for-a-repository-using-a-cache-key
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/actions-cache-key-required'
        - $ref: '#/components/parameters/actions-cache-git-ref-full'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actions-cache-list'
              examples:
                default:
                  $ref: '#/components/examples/actions-cache-list'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: cache
  /repos/{owner}/{repo}/actions/caches/{cache_id}:
    delete:
      summary: Delete a GitHub Actions cache for a repository (using a cache ID)
      description: >-
        Deletes a GitHub Actions cache for a repository, using a cache ID.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/delete-actions-cache-by-id
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/cache#delete-a-github-actions-cache-for-a-repository-using-a-cache-id
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/cache-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: cache
  /repos/{owner}/{repo}/actions/jobs/{job_id}:
    get:
      summary: Get a job for a workflow run
      description: >-
        Gets a specific job in a workflow run.


        Anyone with read access to the repository can use this endpoint.


        If the repository is private, OAuth tokens and personal access tokens
        (classic) need the `repo` scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/get-job-for-workflow-run
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-jobs#get-a-job-for-a-workflow-run
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/job-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
              examples:
                default:
                  $ref: '#/components/examples/job'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflow-jobs
  /repos/{owner}/{repo}/actions/jobs/{job_id}/logs:
    get:
      summary: Download job logs for a workflow run
      description: >-
        Gets a redirect URL to download a plain text file of logs for a workflow
        job. This link expires after 1 minute. Look

        for `Location:` in the response header to find the URL for the download.


        Anyone with read access to the repository can use this endpoint.


        If the repository is private, OAuth tokens and personal access tokens
        (classic) need the `repo` scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/download-job-logs-for-workflow-run
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-jobs#download-job-logs-for-a-workflow-run
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/job-id'
      responses:
        '302':
          description: Response
          headers:
            Location:
              example: >-
                https://pipelines.actions.githubusercontent.com/ab1f3cCFPB34Nd6imvFxpGZH5hNlDp2wijMwl2gDoO0bcrrlJj/_apis/pipelines/1/jobs/19/signedlogcontent?urlExpires=2020-01-22T22%3A44%3A54.1389777Z&urlSigningMethod=HMACV1&urlSignature=2TUDfIg4fm36OJmfPy6km5QD5DLCOkBVzvhWZM8B%2BUY%3D
              schema:
                type: string
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflow-jobs
  /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun:
    post:
      summary: Re-run a job from a workflow run
      description: >-
        Re-run a job and its dependent jobs in a workflow run.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/re-run-job-for-workflow-run
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/job-id'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              nullable: true
              properties:
                enable_debug_logging:
                  type: boolean
                  default: false
                  description: Whether to enable debug logging for the re-run.
            examples:
              default:
                value: null
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty-object'
              examples:
                default:
                  value: null
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflow-runs
  /repos/{owner}/{repo}/actions/oidc/customization/sub:
    get:
      summary: >-
        Get the customization template for an OIDC subject claim for a
        repository
      description: >-
        Gets the customization template for an OpenID Connect (OIDC) subject
        claim.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/get-custom-oidc-sub-claim-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Status response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oidc-custom-sub-repo'
              examples:
                default:
                  $ref: '#/components/examples/oidc-custom-sub-repo'
        '400':
          $ref: '#/components/responses/bad_request'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        enabledForGitHubApps: true
        previews: []
        category: actions
        subcategory: oidc
    put:
      summary: >-
        Set the customization template for an OIDC subject claim for a
        repository
      description: >-
        Sets the customization template and `opt-in` or `opt-out` flag for an
        OpenID Connect (OIDC) subject claim for a repository.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/set-custom-oidc-sub-claim-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: Actions OIDC subject customization for a repository
              description: Actions OIDC subject customization for a repository
              type: object
              required:
                - use_default
              properties:
                use_default:
                  description: >-
                    Whether to use the default template or not. If `true`, the
                    `include_claim_keys` field is ignored.
                  type: boolean
                include_claim_keys:
                  description: >-
                    Array of unique strings. Each claim key can only contain
                    alphanumeric characters and underscores.
                  type: array
                  items:
                    type: string
            examples:
              default:
                value:
                  use_default: false
                  include_claim_keys:
                    - repo
                    - context
      responses:
        '201':
          description: Empty response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty-object'
              examples:
                default:
                  value: null
        '400':
          $ref: '#/components/responses/bad_request'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed_simple'
      x-github:
        enabledForGitHubApps: true
        previews: []
        category: actions
        subcategory: oidc
  /repos/{owner}/{repo}/actions/organization-secrets:
    get:
      summary: List repository organization secrets
      description: >-
        Lists all organization secrets shared with a repository without
        revealing their encrypted

        values.


        Authenticated users must have collaborator access to a repository to
        create, update, or read secrets.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/list-repo-organization-secrets
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#list-repository-organization-secrets
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - secrets
                properties:
                  total_count:
                    type: integer
                  secrets:
                    type: array
                    items:
                      $ref: '#/components/schemas/actions-secret'
              examples:
                default:
                  $ref: '#/components/examples/actions-secret-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: secrets
  /repos/{owner}/{repo}/actions/organization-variables:
    get:
      summary: List repository organization variables
      description: >-
        Lists all organization variables shared with a repository.


        Authenticated users must have collaborator access to a repository to
        create, update, or read variables.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/list-repo-organization-variables
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/variables#list-repository-organization-variables
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/variables-per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - variables
                properties:
                  total_count:
                    type: integer
                  variables:
                    type: array
                    items:
                      $ref: '#/components/schemas/actions-variable'
              examples:
                default:
                  $ref: '#/components/examples/actions-variables-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: variables
  /repos/{owner}/{repo}/actions/permissions:
    get:
      summary: Get GitHub Actions permissions for a repository
      description: >-
        Gets the GitHub Actions permissions policy for a repository, including
        whether GitHub Actions is enabled and the actions allowed to run in the
        repository.


        You must authenticate using an access token with the `repo` scope to use
        this endpoint. GitHub Apps must have the `administration` repository
        permission to use this API.
      operationId: actions/get-github-actions-permissions-repository
      tags:
        - - - - actions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/permissions#get-github-actions-permissions-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actions-repository-permissions'
              examples:
                default:
                  $ref: '#/components/examples/actions-repository-permissions'
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: false
        category: actions
        subcategory: permissions
    put:
      summary: Set GitHub Actions permissions for a repository
      description: >-
        Sets the GitHub Actions permissions policy for enabling GitHub Actions
        and allowed actions in the repository.


        If the repository belongs to an organization or enterprise that has set
        restrictive permissions at the organization or enterprise levels, such
        as `allowed_actions` to `selected` actions, then you cannot override
        them for the repository.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      operationId: actions/set-github-actions-permissions-repository
      tags:
        - - - - actions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/permissions#set-github-actions-permissions-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  $ref: '#/components/schemas/actions-enabled'
                allowed_actions:
                  $ref: '#/components/schemas/allowed-actions'
              required:
                - enabled
            examples:
              default:
                value:
                  enabled: true
                  allowed_actions: selected
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: false
        category: actions
        subcategory: permissions
  /repos/{owner}/{repo}/actions/permissions/access:
    get:
      summary: Get the level of access for workflows outside of the repository
      description: >-
        Gets the level of access that workflows outside of the repository have
        to actions and reusable workflows in the repository.

        This endpoint only applies to internal and private repositories.

        For more information, see "[Allowing access to components in a private
        repository](https://docs.github.com/enterprise-server@3.9/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)"
        and

        "[Allowing access to components in an internal
        repository](https://docs.github.com/enterprise-server@3.9/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)."


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/get-workflow-access-to-repository
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/permissions#get-the-level-of-access-for-workflows-outside-of-the-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actions-workflow-access-to-repository'
              examples:
                default:
                  $ref: '#/components/examples/actions-workflow-access-to-repository'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        previews: []
        category: actions
        subcategory: permissions
    put:
      summary: Set the level of access for workflows outside of the repository
      description: >-
        Sets the level of access that workflows outside of the repository have
        to actions and reusable workflows in the repository.

        This endpoint only applies to internal and private repositories.

        For more information, see "[Allowing access to components in a private
        repository](https://docs.github.com/enterprise-server@3.9/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)"
        and

        "[Allowing access to components in an internal
        repository](https://docs.github.com/enterprise-server@3.9/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)."


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/set-workflow-access-to-repository
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/permissions#set-the-level-of-access-for-workflows-outside-of-the-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/actions-workflow-access-to-repository'
            examples:
              default:
                $ref: '#/components/examples/actions-workflow-access-to-repository'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        previews: []
        category: actions
        subcategory: permissions
  /repos/{owner}/{repo}/actions/permissions/selected-actions:
    get:
      summary: Get allowed actions for a repository
      description: >-
        Gets the settings for selected actions that are allowed in a repository.
        To use this endpoint, the repository policy for `allowed_actions` must
        be configured to `selected`. For more information, see "[Set GitHub
        Actions permissions for a
        repository](#set-github-actions-permissions-for-a-repository)."


        You must authenticate using an access token with the `repo` scope to use
        this endpoint. GitHub Apps must have the `administration` repository
        permission to use this API.
      operationId: actions/get-allowed-actions-repository
      tags:
        - - - - actions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/permissions#get-allowed-actions-and-reusable-workflows-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/selected-actions'
              examples:
                default:
                  $ref: '#/components/examples/selected-actions'
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: false
        category: actions
        subcategory: permissions
    put:
      summary: Set allowed actions for a repository
      description: >-
        Sets the actions that are allowed in a repository. To use this endpoint,
        the repository permission policy for `allowed_actions` must be
        configured to `selected`. For more information, see "[Set GitHub Actions
        permissions for a
        repository](#set-github-actions-permissions-for-a-repository)."


        If the repository belongs to an organization or enterprise that has
        `selected` actions set at the organization or enterprise levels, then
        you cannot override any of the allowed actions settings.


        To use the `patterns_allowed` setting for private repositories, the
        repository must belong to an enterprise. If the repository does not
        belong to an enterprise, then the `patterns_allowed` setting only
        applies to public repositories.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      operationId: actions/set-allowed-actions-repository
      tags:
        - - - - actions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/permissions#set-allowed-actions-and-reusable-workflows-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/selected-actions'
            examples:
              selected_actions:
                $ref: '#/components/examples/selected-actions'
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: false
        category: actions
        subcategory: permissions
  /repos/{owner}/{repo}/actions/permissions/workflow:
    get:
      summary: Get default workflow permissions for a repository
      description: >-
        Gets the default workflow permissions granted to the `GITHUB_TOKEN` when
        running workflows in a repository,

        as well as if GitHub Actions can submit approving pull request reviews.

        For more information, see "[Setting the permissions of the GITHUB_TOKEN
        for your
        repository](https://docs.github.com/enterprise-server@3.9/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/get-github-actions-default-workflow-permissions-repository
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/permissions#get-default-workflow-permissions-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actions-get-default-workflow-permissions'
              examples:
                default:
                  $ref: '#/components/examples/actions-default-workflow-permissions'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: permissions
    put:
      summary: Set default workflow permissions for a repository
      description: >-
        Sets the default workflow permissions granted to the `GITHUB_TOKEN` when
        running workflows in a repository, and sets if GitHub Actions

        can submit approving pull request reviews.

        For more information, see "[Setting the permissions of the GITHUB_TOKEN
        for your
        repository](https://docs.github.com/enterprise-server@3.9/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/set-github-actions-default-workflow-permissions-repository
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/permissions#set-default-workflow-permissions-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Success response
        '409':
          description: >-
            Conflict response when changing a setting is prevented by the owning
            organization or enterprise
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/actions-set-default-workflow-permissions'
            examples:
              default:
                $ref: '#/components/examples/actions-default-workflow-permissions'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: permissions
  /repos/{owner}/{repo}/actions/runners:
    get:
      summary: List self-hosted runners for a repository
      description: >-
        Lists all self-hosted runners configured in a repository.


        Authenticated users must have admin access to the repository to use this
        endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/list-self-hosted-runners-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/self-hosted-runners#list-self-hosted-runners-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - runners
                properties:
                  total_count:
                    type: integer
                  runners:
                    type: array
                    items:
                      $ref: '#/components/schemas/runner'
              examples:
                default:
                  $ref: '#/components/examples/runner-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: self-hosted-runners
  /repos/{owner}/{repo}/actions/runners/downloads:
    get:
      summary: List runner applications for a repository
      description: >-
        Lists binaries for the runner application that you can download and run.


        Authenticated users must have admin access to the repository to use this
        endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/list-runner-applications-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/self-hosted-runners#list-runner-applications-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/runner-application'
              examples:
                default:
                  $ref: '#/components/examples/runner-application-items-airgap'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: self-hosted-runners
  /repos/{owner}/{repo}/actions/runners/registration-token:
    post:
      summary: Create a registration token for a repository
      description: >-
        Returns a token that you can pass to the `config` script. The token
        expires after one hour.


        For example, you can replace `TOKEN` in the following example with the
        registration token provided by this endpoint to configure your
        self-hosted runner:


        ```

        ./config.sh --url https://github.com/octo-org --token TOKEN

        ```


        Authenticated users must have admin access to the repository to use this
        endpoint.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/create-registration-token-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/self-hosted-runners#create-a-registration-token-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authentication-token'
              examples:
                default:
                  $ref: '#/components/examples/authentication-token'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: self-hosted-runners
  /repos/{owner}/{repo}/actions/runners/remove-token:
    post:
      summary: Create a remove token for a repository
      description: >-
        Returns a token that you can pass to the `config` script to remove a
        self-hosted runner from an repository. The token expires after one hour.


        For example, you can replace `TOKEN` in the following example with the
        registration token provided by this endpoint to remove your self-hosted
        runner from an organization:


        ```

        ./config.sh remove --token TOKEN

        ```


        Authenticated users must have admin access to the repository to use this
        endpoint.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/create-remove-token-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/self-hosted-runners#create-a-remove-token-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authentication-token'
              examples:
                default:
                  $ref: '#/components/examples/authentication-token-2'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: self-hosted-runners
  /repos/{owner}/{repo}/actions/runners/{runner_id}:
    get:
      summary: Get a self-hosted runner for a repository
      description: >-
        Gets a specific self-hosted runner configured in a repository.


        Authenticated users must have admin access to the repository to use this
        endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/get-self-hosted-runner-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/self-hosted-runners#get-a-self-hosted-runner-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/runner-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runner'
              examples:
                default:
                  $ref: '#/components/examples/runner'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: self-hosted-runners
    delete:
      summary: Delete a self-hosted runner from a repository
      description: >-
        Forces the removal of a self-hosted runner from a repository. You can
        use this endpoint to completely remove the runner when the machine you
        were using no longer exists.


        Authenticated users must have admin access to the repository to use this
        endpoint.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/delete-self-hosted-runner-from-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/self-hosted-runners#delete-a-self-hosted-runner-from-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/runner-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: self-hosted-runners
  /repos/{owner}/{repo}/actions/runners/{runner_id}/labels:
    get:
      summary: List labels for a self-hosted runner for a repository
      description: >-
        Lists all labels for a self-hosted runner configured in a repository.


        Authenticated users must have admin access to the repository to use this
        endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/list-labels-for-self-hosted-runner-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/self-hosted-runners#list-labels-for-a-self-hosted-runner-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/runner-id'
      responses:
        '200':
          $ref: '#/components/responses/actions_runner_labels'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: self-hosted-runners
    post:
      summary: Add custom labels to a self-hosted runner for a repository
      description: >-
        Adds custom labels to a self-hosted runner configured in a repository.


        Authenticated users must have admin access to the organization to use
        this endpoint.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/add-custom-labels-to-self-hosted-runner-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/self-hosted-runners#add-custom-labels-to-a-self-hosted-runner-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/runner-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - labels
              properties:
                labels:
                  type: array
                  minItems: 1
                  maxItems: 100
                  description: The names of the custom labels to add to the runner.
                  items:
                    type: string
            examples:
              default:
                value:
                  labels:
                    - gpu
                    - accelerated
      responses:
        '200':
          $ref: '#/components/responses/actions_runner_labels'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed_simple'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: self-hosted-runners
    put:
      summary: Set custom labels for a self-hosted runner for a repository
      description: >-
        Remove all previous custom labels and set the new custom labels for a
        specific

        self-hosted runner configured in a repository.


        Authenticated users must have admin access to the repository to use this
        endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/set-custom-labels-for-self-hosted-runner-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/self-hosted-runners#set-custom-labels-for-a-self-hosted-runner-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/runner-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - labels
              properties:
                labels:
                  type: array
                  minItems: 0
                  maxItems: 100
                  description: >-
                    The names of the custom labels to set for the runner. You
                    can pass an empty array to remove all custom labels.
                  items:
                    type: string
            examples:
              default:
                value:
                  labels:
                    - gpu
                    - accelerated
      responses:
        '200':
          $ref: '#/components/responses/actions_runner_labels'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed_simple'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: self-hosted-runners
    delete:
      summary: Remove all custom labels from a self-hosted runner for a repository
      description: >-
        Remove all custom labels from a self-hosted runner configured in a

        repository. Returns the remaining read-only labels from the runner.


        Authenticated users must have admin access to the repository to use this
        endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/remove-all-custom-labels-from-self-hosted-runner-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/self-hosted-runners#remove-all-custom-labels-from-a-self-hosted-runner-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/runner-id'
      responses:
        '200':
          $ref: '#/components/responses/actions_runner_labels_readonly'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: self-hosted-runners
  /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}:
    delete:
      summary: Remove a custom label from a self-hosted runner for a repository
      description: >-
        Remove a custom label from a self-hosted runner configured

        in a repository. Returns the remaining labels from the runner.


        This endpoint returns a `404 Not Found` status if the custom label is
        not

        present on the runner.


        Authenticated users must have admin access to the repository to use this
        endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/remove-custom-label-from-self-hosted-runner-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/self-hosted-runners#remove-a-custom-label-from-a-self-hosted-runner-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/runner-id'
        - $ref: '#/components/parameters/runner-label-name'
      responses:
        '200':
          $ref: '#/components/responses/actions_runner_labels'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed_simple'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: self-hosted-runners
  /repos/{owner}/{repo}/actions/runs:
    get:
      summary: List workflow runs for a repository
      description: >-
        Lists all workflow runs for a repository. You can use parameters to
        narrow the list of results. For more information about using parameters,
        see
        [Parameters](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#parameters).


        Anyone with read access to the repository can use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint with a private repository.
      tags:
        - - - - actions
      operationId: actions/list-workflow-runs-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs#list-workflow-runs-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/actor'
        - $ref: '#/components/parameters/workflow-run-branch'
        - $ref: '#/components/parameters/event'
        - $ref: '#/components/parameters/workflow-run-status'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/created'
        - $ref: '#/components/parameters/exclude-pull-requests'
        - $ref: '#/components/parameters/workflow-run-check-suite-id'
        - $ref: '#/components/parameters/workflow-run-head-sha'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - workflow_runs
                properties:
                  total_count:
                    type: integer
                  workflow_runs:
                    type: array
                    items:
                      $ref: '#/components/schemas/workflow-run'
              examples:
                default:
                  $ref: '#/components/examples/workflow-run-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflow-runs
  /repos/{owner}/{repo}/actions/runs/{run_id}:
    get:
      summary: Get a workflow run
      description: >-
        Gets a specific workflow run.


        Anyone with read access to the repository can use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint with a private repository.
      tags:
        - - - - actions
      operationId: actions/get-workflow-run
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs#get-a-workflow-run
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/run-id'
        - $ref: '#/components/parameters/exclude-pull-requests'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workflow-run'
              examples:
                default:
                  $ref: '#/components/examples/workflow-run'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflow-runs
    delete:
      summary: Delete a workflow run
      description: >-
        Deletes a specific workflow run.


        Anyone with write access to the repository can use this endpoint.


        If the repository is private, OAuth tokens and personal access tokens
        (classic) need the `repo` scope to use this endpoint.
      operationId: actions/delete-workflow-run
      tags:
        - - - - actions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs#delete-a-workflow-run
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/run-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflow-runs
  /repos/{owner}/{repo}/actions/runs/{run_id}/approvals:
    get:
      summary: Get the review history for a workflow run
      description: >-
        Anyone with read access to the repository can use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint with a private repository.
      tags:
        - - - - actions
      operationId: actions/get-reviews-for-run
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs#get-the-review-history-for-a-workflow-run
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/run-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/environment-approvals'
              examples:
                default:
                  $ref: '#/components/examples/environment-approvals-items'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflow-runs
  /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts:
    get:
      summary: List workflow run artifacts
      description: >-
        Lists artifacts for a workflow run.


        Anyone with read access to the repository can use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint with a private repository.
      tags:
        - - - - actions
      operationId: actions/list-workflow-run-artifacts
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/artifacts#list-workflow-run-artifacts
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/run-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/artifact-name'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - artifacts
                properties:
                  total_count:
                    type: integer
                  artifacts:
                    type: array
                    items:
                      $ref: '#/components/schemas/artifact'
              examples:
                default:
                  $ref: '#/components/examples/artifact-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: artifacts
  /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}:
    get:
      summary: Get a workflow run attempt
      description: >-
        Gets a specific workflow run attempt.


        Anyone with read access to the repository can use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint with a private repository.
      tags:
        - - - - actions
      operationId: actions/get-workflow-run-attempt
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs#get-a-workflow-run-attempt
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/run-id'
        - $ref: '#/components/parameters/attempt-number'
        - $ref: '#/components/parameters/exclude-pull-requests'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workflow-run'
              examples:
                default:
                  $ref: '#/components/examples/workflow-run'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflow-runs
  /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs:
    get:
      summary: List jobs for a workflow run attempt
      description: >-
        Lists jobs for a specific workflow run attempt. You can use parameters
        to narrow the list of results. For more information

        about using parameters, see
        [Parameters](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#parameters).


        Anyone with read access to the repository can use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint  with a private repository.
      tags:
        - - - - actions
      operationId: actions/list-jobs-for-workflow-run-attempt
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-jobs#list-jobs-for-a-workflow-run-attempt
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/run-id'
        - $ref: '#/components/parameters/attempt-number'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - jobs
                properties:
                  total_count:
                    type: integer
                  jobs:
                    type: array
                    items:
                      $ref: '#/components/schemas/job'
              examples:
                default:
                  $ref: '#/components/examples/job-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflow-jobs
  /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs:
    get:
      summary: Download workflow run attempt logs
      description: >-
        Gets a redirect URL to download an archive of log files for a specific
        workflow run attempt. This link expires after

        1 minute. Look for `Location:` in the response header to find the URL
        for the download.


        Anyone with read access to the repository can use this endpoint.


        If the repository is private, OAuth tokens and personal access tokens
        (classic) need the `repo` scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/download-workflow-run-attempt-logs
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs#download-workflow-run-attempt-logs
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/run-id'
        - $ref: '#/components/parameters/attempt-number'
      responses:
        '302':
          description: Response
          headers:
            Location:
              example: >-
                https://pipelines.actions.githubusercontent.com/ab1f3cCFPB34Nd6imvFxpGZH5hNlDp2wijMwl2gDoO0bcrrlJj/_apis/pipelines/1/runs/19/signedlogcontent?urlExpires=2020-01-22T22%3A44%3A54.1389777Z&urlSigningMethod=HMACV1&urlSignature=2TUDfIg4fm36OJmfPy6km5QD5DLCOkBVzvhWZM8B%2BUY%3D
              schema:
                type: string
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflow-runs
  /repos/{owner}/{repo}/actions/runs/{run_id}/cancel:
    post:
      summary: Cancel a workflow run
      description: >-
        Cancels a workflow run using its `id`.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/cancel-workflow-run
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs#cancel-a-workflow-run
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/run-id'
      responses:
        '202':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty-object'
              examples:
                default:
                  value: null
        '409':
          $ref: '#/components/responses/conflict'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflow-runs
  /repos/{owner}/{repo}/actions/runs/{run_id}/jobs:
    get:
      summary: List jobs for a workflow run
      description: >-
        Lists jobs for a workflow run. You can use parameters to narrow the list
        of results. For more information

        about using parameters, see
        [Parameters](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#parameters).


        Anyone with read access to the repository can use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint with a private repository.
      tags:
        - - - - actions
      operationId: actions/list-jobs-for-workflow-run
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-jobs#list-jobs-for-a-workflow-run
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/run-id'
        - name: filter
          description: >-
            Filters jobs by their `completed_at` timestamp. `latest` returns
            jobs from the most recent execution of the workflow run. `all`
            returns all jobs for a workflow run, including from old executions
            of the workflow run.
          in: query
          required: false
          schema:
            type: string
            enum:
              - latest
              - all
            default: latest
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - jobs
                properties:
                  total_count:
                    type: integer
                  jobs:
                    type: array
                    items:
                      $ref: '#/components/schemas/job'
              examples:
                default:
                  $ref: '#/components/examples/job-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflow-jobs
  /repos/{owner}/{repo}/actions/runs/{run_id}/logs:
    get:
      summary: Download workflow run logs
      description: >-
        Gets a redirect URL to download an archive of log files for a workflow
        run. This link expires after 1 minute. Look for

        `Location:` in the response header to find the URL for the download.


        Anyone with read access to the repository can use this endpoint.


        If the repository is private, OAuth tokens and personal access tokens
        (classic) need the `repo` scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/download-workflow-run-logs
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs#download-workflow-run-logs
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/run-id'
      responses:
        '302':
          description: Response
          headers:
            Location:
              example: >-
                https://pipelines.actions.githubusercontent.com/ab1f3cCFPB34Nd6imvFxpGZH5hNlDp2wijMwl2gDoO0bcrrlJj/_apis/pipelines/1/runs/19/signedlogcontent?urlExpires=2020-01-22T22%3A44%3A54.1389777Z&urlSigningMethod=HMACV1&urlSignature=2TUDfIg4fm36OJmfPy6km5QD5DLCOkBVzvhWZM8B%2BUY%3D
              schema:
                type: string
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflow-runs
    delete:
      summary: Delete workflow run logs
      description: >-
        Deletes all logs for a workflow run.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/delete-workflow-run-logs
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs#delete-workflow-run-logs
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/run-id'
      responses:
        '204':
          description: Response
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internal_error'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflow-runs
  /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments:
    get:
      summary: Get pending deployments for a workflow run
      description: >-
        Get all deployment environments for a workflow run that are waiting for
        protection rules to pass.


        Anyone with read access to the repository can use this endpoint.


        If the repository is private, OAuth tokens and personal access tokens
        (classic) need the `repo` scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/get-pending-deployments-for-run
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs#get-pending-deployments-for-a-workflow-run
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/run-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pending-deployment'
              examples:
                default:
                  $ref: '#/components/examples/pending-deployment-items'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflow-runs
    post:
      summary: Review pending deployments for a workflow run
      description: >-
        Approve or reject pending deployments that are waiting on approval by a
        required reviewer.


        Required reviewers with read access to the repository contents and
        deployments can use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/review-pending-deployments-for-run
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/run-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                environment_ids:
                  type: array
                  description: The list of environment ids to approve or reject
                  example:
                    - 161171787
                    - 161171795
                  items:
                    type: integer
                    example: 161171787
                state:
                  type: string
                  description: >-
                    Whether to approve or reject deployment to the specified
                    environments.
                  enum:
                    - approved
                    - rejected
                  example: approved
                comment:
                  type: string
                  description: A comment to accompany the deployment review
                  example: Ship it!
              required:
                - environment_ids
                - state
                - comment
            examples:
              default:
                value:
                  environment_ids:
                    - 161171787
                  state: approved
                  comment: Ship it!
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/deployment'
              examples:
                default:
                  $ref: '#/components/examples/deployment-items'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: actions
        subcategory: workflow-runs
  /repos/{owner}/{repo}/actions/runs/{run_id}/rerun:
    post:
      summary: Re-run a workflow
      description: >-
        Re-runs your workflow run using its `id`.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/re-run-workflow
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs#re-run-a-workflow
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/run-id'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              nullable: true
              properties:
                enable_debug_logging:
                  type: boolean
                  default: false
                  description: Whether to enable debug logging for the re-run.
            examples:
              default:
                value: null
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty-object'
              examples:
                default:
                  value: null
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: actions
        subcategory: workflow-runs
  /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs:
    post:
      summary: Re-run failed jobs from a workflow run
      description: >-
        Re-run all of the failed jobs and their dependent jobs in a workflow run
        using the `id` of the workflow run.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/re-run-workflow-failed-jobs
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs#re-run-failed-jobs-from-a-workflow-run
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/run-id'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              nullable: true
              properties:
                enable_debug_logging:
                  type: boolean
                  default: false
                  description: Whether to enable debug logging for the re-run.
            examples:
              default:
                value: null
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty-object'
              examples:
                default:
                  value: null
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflow-runs
  /repos/{owner}/{repo}/actions/secrets:
    get:
      summary: List repository secrets
      description: >-
        Lists all secrets available in a repository without revealing their
        encrypted

        values.


        Authenticated users must have collaborator access to a repository to
        create, update, or read secrets.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/list-repo-secrets
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#list-repository-secrets
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - secrets
                properties:
                  total_count:
                    type: integer
                  secrets:
                    type: array
                    items:
                      $ref: '#/components/schemas/actions-secret'
              examples:
                default:
                  $ref: '#/components/examples/actions-secret-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: secrets
  /repos/{owner}/{repo}/actions/secrets/public-key:
    get:
      summary: Get a repository public key
      description: >-
        Gets your public key, which you need to encrypt secrets. You need to

        encrypt a secret before you can create or update secrets.


        Anyone with read access to the repository can use this endpoint.


        If the repository is private, OAuth tokens and personal access tokens
        (classic) need the `repo` scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/get-repo-public-key
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#get-a-repository-public-key
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actions-public-key'
              examples:
                default:
                  $ref: '#/components/examples/actions-public-key'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: secrets
  /repos/{owner}/{repo}/actions/secrets/{secret_name}:
    get:
      summary: Get a repository secret
      description: >-
        Gets a single repository secret without revealing its encrypted value.


        The authenticated user must have collaborator access to the repository
        to use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/get-repo-secret
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#get-a-repository-secret
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/secret-name'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actions-secret'
              examples:
                default:
                  $ref: '#/components/examples/actions-secret'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: secrets
    put:
      summary: Create or update a repository secret
      description: >-
        Creates or updates a repository secret with an encrypted value. Encrypt
        your secret using

        [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).
        For more information, see "[Encrypting secrets for the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/encrypting-secrets-for-the-rest-api)."


        Authenticated users must have collaborator access to a repository to
        create, update, or read secrets.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/create-or-update-repo-secret
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#create-or-update-a-repository-secret
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/secret-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                encrypted_value:
                  type: string
                  description: >-
                    Value for your secret, encrypted with
                    [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages)
                    using the public key retrieved from the [Get a repository
                    public
                    key](https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#get-a-repository-public-key)
                    endpoint.
                  pattern: >-
                    ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
                key_id:
                  type: string
                  description: ID of the key you used to encrypt the secret.
            examples:
              default:
                value:
                  encrypted_value: c2VjcmV0
                  key_id: '012345678912345678'
      responses:
        '201':
          description: Response when creating a secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty-object'
              examples:
                default:
                  value: null
        '204':
          description: Response when updating a secret
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: secrets
    delete:
      summary: Delete a repository secret
      description: >-
        Deletes a secret in a repository using the secret name.


        Authenticated users must have collaborator access to a repository to
        create, update, or read secrets.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/delete-repo-secret
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#delete-a-repository-secret
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/secret-name'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: secrets
  /repos/{owner}/{repo}/actions/variables:
    get:
      summary: List repository variables
      description: >-
        Lists all repository variables.


        Authenticated users must have collaborator access to a repository to
        create, update, or read variables.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/list-repo-variables
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/variables#list-repository-variables
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/variables-per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - variables
                properties:
                  total_count:
                    type: integer
                  variables:
                    type: array
                    items:
                      $ref: '#/components/schemas/actions-variable'
              examples:
                default:
                  $ref: '#/components/examples/actions-variables-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: variables
    post:
      summary: Create a repository variable
      description: >-
        Creates a repository variable that you can reference in a GitHub Actions
        workflow.


        Authenticated users must have collaborator access to a repository to
        create, update, or read variables.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/create-repo-variable
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/variables#create-a-repository-variable
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the variable.
                value:
                  type: string
                  description: The value of the variable.
              required:
                - name
                - value
            examples:
              default:
                value:
                  name: USERNAME
                  value: octocat
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty-object'
              examples:
                default:
                  value: null
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: variables
  /repos/{owner}/{repo}/actions/variables/{name}:
    get:
      summary: Get a repository variable
      description: >-
        Gets a specific variable in a repository.


        The authenticated user must have collaborator access to the repository
        to use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/get-repo-variable
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/variables#get-a-repository-variable
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/variable-name'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actions-variable'
              examples:
                default:
                  $ref: '#/components/examples/actions-variable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: variables
    patch:
      summary: Update a repository variable
      description: >-
        Updates a repository variable that you can reference in a GitHub Actions
        workflow.


        Authenticated users must have collaborator access to a repository to
        create, update, or read variables.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/update-repo-variable
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/variables#update-a-repository-variable
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/variable-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the variable.
                value:
                  type: string
                  description: The value of the variable.
            examples:
              default:
                value:
                  name: USERNAME
                  value: octocat
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: variables
    delete:
      summary: Delete a repository variable
      description: >-
        Deletes a repository variable using the variable name.


        Authenticated users must have collaborator access to a repository to
        create, update, or read variables.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/delete-repo-variable
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/variables#delete-a-repository-variable
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/variable-name'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: variables
  /repos/{owner}/{repo}/actions/workflows:
    get:
      summary: List repository workflows
      description: >-
        Lists the workflows in a repository.


        Anyone with read access to the repository can use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint with a private repository.
      tags:
        - - - - actions
      operationId: actions/list-repo-workflows
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflows#list-repository-workflows
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - workflows
                properties:
                  total_count:
                    type: integer
                  workflows:
                    type: array
                    items:
                      $ref: '#/components/schemas/workflow'
              examples:
                default:
                  $ref: '#/components/examples/workflow-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflows
  /repos/{owner}/{repo}/actions/workflows/{workflow_id}:
    get:
      summary: Get a workflow
      description: >-
        Gets a specific workflow. You can replace `workflow_id` with the
        workflow

        file name. For example, you could use `main.yaml`.


        Anyone with read access to the repository can use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint with a private repository.
      tags:
        - - - - actions
      operationId: actions/get-workflow
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflows#get-a-workflow
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/workflow-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workflow'
              examples:
                default:
                  $ref: '#/components/examples/workflow'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflows
  /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable:
    put:
      summary: Disable a workflow
      description: >-
        Disables a workflow and sets the `state` of the workflow to
        `disabled_manually`. You can replace `workflow_id` with the workflow
        file name. For example, you could use `main.yaml`.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/disable-workflow
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflows#disable-a-workflow
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/workflow-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflows
  /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches:
    post:
      summary: Create a workflow dispatch event
      description: >-
        You can use this endpoint to manually trigger a GitHub Actions workflow
        run. You can replace `workflow_id` with the workflow file name. For
        example, you could use `main.yaml`.


        You must configure your GitHub Actions workflow to run when the
        [`workflow_dispatch`
        webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch)
        event occurs. The `inputs` are configured in the workflow file. For more
        information about how to configure the `workflow_dispatch` event in the
        workflow file, see "[Events that trigger
        workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      operationId: actions/create-workflow-dispatch
      tags:
        - - - - actions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflows#create-a-workflow-dispatch-event
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/workflow-id'
      responses:
        '204':
          description: Response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ref:
                  type: string
                  description: >-
                    The git reference for the workflow. The reference can be a
                    branch or tag name.
                inputs:
                  type: object
                  description: >-
                    Input keys and values configured in the workflow file. The
                    maximum number of properties is 10. Any default properties
                    configured in the workflow file will be used when `inputs`
                    are omitted.
                  additionalProperties: true
                  maxProperties: 10
              required:
                - ref
            examples:
              default:
                value:
                  ref: topic-branch
                  inputs:
                    name: Mona the Octocat
                    home: San Francisco, CA
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflows
  /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable:
    put:
      summary: Enable a workflow
      description: >-
        Enables a workflow and sets the `state` of the workflow to `active`. You
        can replace `workflow_id` with the workflow file name. For example, you
        could use `main.yaml`.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/enable-workflow
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflows#enable-a-workflow
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/workflow-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflows
  /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs:
    get:
      summary: List workflow runs for a workflow
      description: >-
        List all workflow runs for a workflow. You can replace `workflow_id`
        with the workflow file name. For example, you could use `main.yaml`. You
        can use parameters to narrow the list of results. For more information
        about using parameters, see
        [Parameters](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#parameters).


        Anyone with read access to the repository can use this endpoint


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint with a private repository.
      tags:
        - - - - actions
      operationId: actions/list-workflow-runs
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs#list-workflow-runs-for-a-workflow
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/workflow-id'
        - $ref: '#/components/parameters/actor'
        - $ref: '#/components/parameters/workflow-run-branch'
        - $ref: '#/components/parameters/event'
        - $ref: '#/components/parameters/workflow-run-status'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/created'
        - $ref: '#/components/parameters/exclude-pull-requests'
        - $ref: '#/components/parameters/workflow-run-check-suite-id'
        - $ref: '#/components/parameters/workflow-run-head-sha'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - workflow_runs
                properties:
                  total_count:
                    type: integer
                  workflow_runs:
                    type: array
                    items:
                      $ref: '#/components/schemas/workflow-run'
              examples:
                default:
                  $ref: '#/components/examples/workflow-run-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: workflow-runs
  /repos/{owner}/{repo}/assignees:
    get:
      summary: List assignees
      description: >-
        Lists the [available
        assignees](https://docs.github.com/enterprise-server@3.9/articles/assigning-issues-and-pull-requests-to-other-github-users/)
        for issues in a repository.
      tags:
        - - - - issues
      operationId: issues/list-assignees
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/assignees#list-assignees
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: assignees
  /repos/{owner}/{repo}/assignees/{assignee}:
    get:
      summary: Check if a user can be assigned
      description: >-
        Checks if a user has permission to be assigned to an issue in this
        repository.


        If the `assignee` can be assigned to issues in the repository, a `204`
        header with no content is returned.


        Otherwise a `404` status code is returned.
      tags:
        - - - - issues
      operationId: issues/check-user-can-be-assigned
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/assignees#check-if-a-user-can-be-assigned
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: assignee
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: >-
            If the `assignee` can be assigned to issues in the repository, a
            `204` header with no content is returned.
        '404':
          description: Otherwise a `404` status code is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/basic-error'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: assignees
  /repos/{owner}/{repo}/autolinks:
    get:
      summary: Get all autolinks of a repository
      description: >-
        Gets all autolinks that are configured for a repository.


        Information about autolinks are only available to repository
        administrators.
      tags:
        - - - - repos
      operationId: repos/list-autolinks
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/autolinks#get-all-autolinks-of-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/autolink'
              examples:
                default:
                  $ref: '#/components/examples/autolink-items'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: autolinks
    post:
      summary: Create an autolink reference for a repository
      description: Users with admin access to the repository can create an autolink.
      tags:
        - - - - repos
      operationId: repos/create-autolink
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/autolinks#create-an-autolink-reference-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key_prefix:
                  type: string
                  description: >-
                    This prefix appended by certain characters will generate a
                    link any time it is found in an issue, pull request, or
                    commit.
                url_template:
                  type: string
                  description: >-
                    The URL must contain `<num>` for the reference number.
                    `<num>` matches different characters depending on the value
                    of `is_alphanumeric`.
                is_alphanumeric:
                  type: boolean
                  default: true
                  description: >-
                    Whether this autolink reference matches alphanumeric
                    characters. If true, the `<num>` parameter of the
                    `url_template` matches alphanumeric characters `A-Z` (case
                    insensitive), `0-9`, and `-`. If false, this autolink
                    reference only matches numeric characters.
              required:
                - key_prefix
                - url_template
            examples:
              default:
                value:
                  key_prefix: TICKET-
                  url_template: https://example.com/TICKET?query=<num>
                  is_alphanumeric: true
      responses:
        '201':
          description: response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/autolink'
              examples:
                default:
                  $ref: '#/components/examples/autolink'
          headers:
            Location:
              example: https://api.github.com/repos/octocat/Hello-World/autolinks/1
              schema:
                type: string
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: autolinks
  /repos/{owner}/{repo}/autolinks/{autolink_id}:
    get:
      summary: Get an autolink reference of a repository
      description: >-
        This returns a single autolink reference by ID that was configured for
        the given repository.


        Information about autolinks are only available to repository
        administrators.
      tags:
        - - - - repos
      operationId: repos/get-autolink
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/autolinks#get-an-autolink-reference-of-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/autolink-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/autolink'
              examples:
                default:
                  $ref: '#/components/examples/autolink'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: autolinks
    delete:
      summary: Delete an autolink reference from a repository
      description: >-
        This deletes a single autolink reference by ID that was configured for
        the given repository.


        Information about autolinks are only available to repository
        administrators.
      tags:
        - - - - repos
      operationId: repos/delete-autolink
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/autolinks#delete-an-autolink-reference-from-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/autolink-id'
      responses:
        '204':
          description: Response
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: autolinks
  /repos/{owner}/{repo}/branches:
    get:
      summary: List branches
      description: ''
      tags:
        - - - - repos
      operationId: repos/list-branches
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branches#list-branches
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: protected
          description: >-
            Setting to `true` returns only protected branches. When set to
            `false`, only unprotected branches are returned. Omitting this
            parameter returns all branches.
          in: query
          required: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/short-branch'
              examples:
                default:
                  $ref: '#/components/examples/short-branch-with-protection-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branches
  /repos/{owner}/{repo}/branches/{branch}:
    get:
      summary: Get a branch
      description: ''
      tags:
        - - - - repos
      operationId: repos/get-branch
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branches#get-a-branch
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/branch-with-protection'
              examples:
                default:
                  $ref: '#/components/examples/branch-get'
        '301':
          $ref: '#/components/responses/moved_permanently'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branches
  /repos/{owner}/{repo}/branches/{branch}/protection:
    get:
      summary: Get branch protection
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.
      tags:
        - - - - repos
      operationId: repos/get-branch-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#get-branch-protection
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/branch-protection'
              examples:
                default:
                  $ref: '#/components/examples/branch-protection'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    put:
      summary: Update branch protection
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Protecting a branch requires admin or owner permissions to the
        repository.


        **Note**: Passing new arrays of `users` and `teams` replaces their
        previous values.


        **Note**: The list of users, apps, and teams in total is limited to 100
        items.
      tags:
        - - - - repos
      operationId: repos/update-branch-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#update-branch-protection
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                required_status_checks:
                  type: object
                  description: >-
                    Require status checks to pass before merging. Set to `null`
                    to disable.
                  nullable: true
                  properties:
                    strict:
                      type: boolean
                      description: Require branches to be up to date before merging.
                    contexts:
                      type: array
                      deprecated: true
                      description: >
                        **Deprecated**: The list of status checks to require in
                        order to merge into this branch. If any of these checks
                        have recently been set by a particular GitHub App, they
                        will be required to come from that app in future for the
                        branch to merge. Use `checks` instead of `contexts` for
                        more fine-grained control.
                      items:
                        type: string
                    checks:
                      type: array
                      description: >-
                        The list of status checks to require in order to merge
                        into this branch.
                      items:
                        type: object
                        required:
                          - context
                        properties:
                          context:
                            type: string
                            description: The name of the required check
                          app_id:
                            type: integer
                            description: >-
                              The ID of the GitHub App that must provide this
                              check. Omit this field to automatically select the
                              GitHub App that has recently provided this check,
                              or any app if it was not set by a GitHub App. Pass
                              -1 to explicitly allow any app to set the status.
                  required:
                    - strict
                    - contexts
                enforce_admins:
                  type: boolean
                  description: >-
                    Enforce all configured restrictions for administrators. Set
                    to `true` to enforce required status checks for repository
                    administrators. Set to `null` to disable.
                  nullable: true
                required_pull_request_reviews:
                  type: object
                  description: >-
                    Require at least one approving review on a pull request,
                    before merging. Set to `null` to disable.
                  nullable: true
                  properties:
                    dismissal_restrictions:
                      type: object
                      description: >-
                        Specify which users, teams, and apps can dismiss pull
                        request reviews. Pass an empty `dismissal_restrictions`
                        object to disable. User and team
                        `dismissal_restrictions` are only available for
                        organization-owned repositories. Omit this parameter for
                        personal repositories.
                      properties:
                        users:
                          type: array
                          description: The list of user `login`s with dismissal access
                          items:
                            type: string
                        teams:
                          type: array
                          description: The list of team `slug`s with dismissal access
                          items:
                            type: string
                        apps:
                          type: array
                          description: The list of app `slug`s with dismissal access
                          items:
                            type: string
                    dismiss_stale_reviews:
                      type: boolean
                      description: >-
                        Set to `true` if you want to automatically dismiss
                        approving reviews when someone pushes a new commit.
                    require_code_owner_reviews:
                      type: boolean
                      description: >-
                        Blocks merging pull requests until [code
                        owners](https://docs.github.com/enterprise-server@3.9/articles/about-code-owners/)
                        review them.
                    required_approving_review_count:
                      type: integer
                      description: >-
                        Specify the number of reviewers required to approve pull
                        requests. Use a number between 1 and 6 or 0 to not
                        require reviewers.
                    require_last_push_approval:
                      type: boolean
                      description: >-
                        Whether the most recent push must be approved by someone
                        other than the person who pushed it. Default: `false`.
                      default: false
                    bypass_pull_request_allowances:
                      type: object
                      description: >-
                        Allow specific users, teams, or apps to bypass pull
                        request requirements.
                      properties:
                        users:
                          type: array
                          description: >-
                            The list of user `login`s allowed to bypass pull
                            request requirements.
                          items:
                            type: string
                        teams:
                          type: array
                          description: >-
                            The list of team `slug`s allowed to bypass pull
                            request requirements.
                          items:
                            type: string
                        apps:
                          type: array
                          description: >-
                            The list of app `slug`s allowed to bypass pull
                            request requirements.
                          items:
                            type: string
                restrictions:
                  type: object
                  description: >-
                    Restrict who can push to the protected branch. User, app,
                    and team `restrictions` are only available for
                    organization-owned repositories. Set to `null` to disable.
                  nullable: true
                  properties:
                    users:
                      type: array
                      description: The list of user `login`s with push access
                      items:
                        type: string
                    teams:
                      type: array
                      description: The list of team `slug`s with push access
                      items:
                        type: string
                    apps:
                      type: array
                      description: The list of app `slug`s with push access
                      items:
                        type: string
                  required:
                    - users
                    - teams
                required_linear_history:
                  type: boolean
                  description: >-
                    Enforces a linear commit Git history, which prevents anyone
                    from pushing merge commits to a branch. Set to `true` to
                    enforce a linear commit history. Set to `false` to disable a
                    linear commit Git history. Your repository must allow squash
                    merging or rebase merging before you can enable a linear
                    commit history. Default: `false`. For more information, see
                    "[Requiring a linear commit
                    history](https://docs.github.com/enterprise-server@3.9/github/administering-a-repository/requiring-a-linear-commit-history)"
                    in the GitHub Help documentation.
                allow_force_pushes:
                  type: boolean
                  description: >-
                    Permits force pushes to the protected branch by anyone with
                    write access to the repository. Set to `true` to allow force
                    pushes. Set to `false` or `null` to block force pushes.
                    Default: `false`. For more information, see "[Enabling force
                    pushes to a protected
                    branch](https://docs.github.com/enterprise-server@3.9/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)"
                    in the GitHub Help documentation."
                  nullable: true
                allow_deletions:
                  type: boolean
                  description: >-
                    Allows deletion of the protected branch by anyone with write
                    access to the repository. Set to `false` to prevent deletion
                    of the protected branch. Default: `false`. For more
                    information, see "[Enabling force pushes to a protected
                    branch](https://docs.github.com/enterprise-server@3.9/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)"
                    in the GitHub Help documentation.
                block_creations:
                  type: boolean
                  description: >-
                    If set to `true`, the `restrictions` branch protection
                    settings which limits who can push will also block pushes
                    which create new branches, unless the push is initiated by a
                    user, team, or app which has the ability to push. Set to
                    `true` to restrict new branch creation. Default: `false`.
                required_conversation_resolution:
                  type: boolean
                  description: >-
                    Requires all conversations on code to be resolved before a
                    pull request can be merged into a branch that matches this
                    rule. Set to `false` to disable. Default: `false`.
                lock_branch:
                  type: boolean
                  description: >-
                    Whether to set the branch as read-only. If this is true,
                    users will not be able to push to the branch. Default:
                    `false`.
                  default: false
                allow_fork_syncing:
                  type: boolean
                  description: >-
                    Whether users can pull changes from upstream when the branch
                    is locked. Set to `true` to allow fork syncing. Set to
                    `false` to prevent fork syncing. Default: `false`.
                  default: false
              required:
                - required_status_checks
                - enforce_admins
                - required_pull_request_reviews
                - restrictions
            examples:
              default:
                value:
                  required_status_checks:
                    strict: true
                    contexts:
                      - continuous-integration/travis-ci
                  enforce_admins: true
                  required_pull_request_reviews:
                    dismissal_restrictions:
                      users:
                        - octocat
                      teams:
                        - justice-league
                    dismiss_stale_reviews: true
                    require_code_owner_reviews: true
                    required_approving_review_count: 2
                    require_last_push_approval: true
                    bypass_pull_request_allowances:
                      users:
                        - octocat
                      teams:
                        - justice-league
                  restrictions:
                    users:
                      - octocat
                    teams:
                      - justice-league
                    apps:
                      - super-ci
                  required_linear_history: true
                  allow_force_pushes: true
                  allow_deletions: true
                  block_creations: true
                  required_conversation_resolution: true
                  lock_branch: true
                  allow_fork_syncing: true
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/protected-branch'
              examples:
                default:
                  $ref: '#/components/examples/branch-protection-update'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed_simple'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    delete:
      summary: Delete branch protection
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.
      tags:
        - - - - repos
      operationId: repos/delete-branch-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#delete-branch-protection
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '204':
          description: Response
        '403':
          $ref: '#/components/responses/forbidden'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
  /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins:
    get:
      summary: Get admin branch protection
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.
      tags:
        - - - - repos
      operationId: repos/get-admin-branch-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#get-admin-branch-protection
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/protected-branch-admin-enforced'
              examples:
                default:
                  $ref: '#/components/examples/protected-branch-admin-enforced-2'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    post:
      summary: Set admin branch protection
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Adding admin enforcement requires admin or owner permissions to the
        repository and branch protection to be enabled.
      tags:
        - - - - repos
      operationId: repos/set-admin-branch-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#set-admin-branch-protection
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/protected-branch-admin-enforced'
              examples:
                default:
                  $ref: '#/components/examples/protected-branch-admin-enforced-2'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    delete:
      summary: Delete admin branch protection
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Removing admin enforcement requires admin or owner permissions to the
        repository and branch protection to be enabled.
      tags:
        - - - - repos
      operationId: repos/delete-admin-branch-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#delete-admin-branch-protection
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '204':
          description: Response
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
  /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews:
    get:
      summary: Get pull request review protection
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.
      tags:
        - - - - repos
      operationId: repos/get-pull-request-review-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#get-pull-request-review-protection
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/protected-branch-pull-request-review'
              examples:
                default:
                  $ref: '#/components/examples/protected-branch-pull-request-review'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    patch:
      summary: Update pull request review protection
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Updating pull request review enforcement requires admin or owner
        permissions to the repository and branch protection to be enabled.


        **Note**: Passing new arrays of `users` and `teams` replaces their
        previous values.
      tags:
        - - - - repos
      operationId: repos/update-pull-request-review-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#update-pull-request-review-protection
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                dismissal_restrictions:
                  type: object
                  description: >-
                    Specify which users, teams, and apps can dismiss pull
                    request reviews. Pass an empty `dismissal_restrictions`
                    object to disable. User and team `dismissal_restrictions`
                    are only available for organization-owned repositories. Omit
                    this parameter for personal repositories.
                  properties:
                    users:
                      type: array
                      description: The list of user `login`s with dismissal access
                      items:
                        type: string
                    teams:
                      type: array
                      description: The list of team `slug`s with dismissal access
                      items:
                        type: string
                    apps:
                      type: array
                      description: The list of app `slug`s with dismissal access
                      items:
                        type: string
                dismiss_stale_reviews:
                  type: boolean
                  description: >-
                    Set to `true` if you want to automatically dismiss approving
                    reviews when someone pushes a new commit.
                require_code_owner_reviews:
                  type: boolean
                  description: >-
                    Blocks merging pull requests until [code
                    owners](https://docs.github.com/enterprise-server@3.9/articles/about-code-owners/)
                    have reviewed.
                required_approving_review_count:
                  type: integer
                  description: >-
                    Specifies the number of reviewers required to approve pull
                    requests. Use a number between 1 and 6 or 0 to not require
                    reviewers.
                require_last_push_approval:
                  type: boolean
                  description: >-
                    Whether the most recent push must be approved by someone
                    other than the person who pushed it. Default: `false`
                  default: false
                bypass_pull_request_allowances:
                  type: object
                  description: >-
                    Allow specific users, teams, or apps to bypass pull request
                    requirements.
                  properties:
                    users:
                      type: array
                      description: >-
                        The list of user `login`s allowed to bypass pull request
                        requirements.
                      items:
                        type: string
                    teams:
                      type: array
                      description: >-
                        The list of team `slug`s allowed to bypass pull request
                        requirements.
                      items:
                        type: string
                    apps:
                      type: array
                      description: >-
                        The list of app `slug`s allowed to bypass pull request
                        requirements.
                      items:
                        type: string
            examples:
              default:
                value:
                  dismissal_restrictions:
                    users:
                      - octocat
                    teams:
                      - justice-league
                    apps:
                      - octoapp
                  bypass_pull_request_allowances:
                    users:
                      - octocat
                    teams:
                      - justice-league
                    apps:
                      - octoapp
                  dismiss_stale_reviews: true
                  require_code_owner_reviews: true
                  required_approving_review_count: 2
                  require_last_push_approval: true
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/protected-branch-pull-request-review'
              examples:
                default:
                  $ref: '#/components/examples/protected-branch-pull-request-review'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    delete:
      summary: Delete pull request review protection
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.
      tags:
        - - - - repos
      operationId: repos/delete-pull-request-review-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#delete-pull-request-review-protection
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '204':
          description: Response
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
  /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures:
    get:
      summary: Get commit signature protection
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        When authenticated with admin or owner permissions to the repository,
        you can use this endpoint to check whether a branch requires signed
        commits. An enabled status of `true` indicates you must sign commits on
        this branch. For more information, see [Signing commits with
        GPG](https://docs.github.com/enterprise-server@3.9/articles/signing-commits-with-gpg)
        in GitHub Help.


        **Note**: You must enable branch protection to require signed commits.
      tags:
        - - - - repos
      operationId: repos/get-commit-signature-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#get-commit-signature-protection
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/protected-branch-admin-enforced'
              examples:
                default:
                  $ref: '#/components/examples/protected-branch-admin-enforced'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    post:
      summary: Create commit signature protection
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        When authenticated with admin or owner permissions to the repository,
        you can use this endpoint to require signed commits on a branch. You
        must enable branch protection to require signed commits.
      tags:
        - - - - repos
      operationId: repos/create-commit-signature-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#create-commit-signature-protection
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/protected-branch-admin-enforced'
              examples:
                default:
                  $ref: '#/components/examples/protected-branch-admin-enforced'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    delete:
      summary: Delete commit signature protection
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        When authenticated with admin or owner permissions to the repository,
        you can use this endpoint to disable required signed commits on a
        branch. You must enable branch protection to require signed commits.
      tags:
        - - - - repos
      operationId: repos/delete-commit-signature-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#delete-commit-signature-protection
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '204':
          description: Response
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
  /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks:
    get:
      summary: Get status checks protection
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.
      tags:
        - - - - repos
      operationId: repos/get-status-checks-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#get-status-checks-protection
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status-check-policy'
              examples:
                default:
                  $ref: '#/components/examples/status-check-policy'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    patch:
      summary: Update status check protection
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Updating required status checks requires admin or owner permissions to
        the repository and branch protection to be enabled.
      tags:
        - - - - repos
      operationId: repos/update-status-check-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#update-status-check-protection
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                strict:
                  type: boolean
                  description: Require branches to be up to date before merging.
                contexts:
                  type: array
                  deprecated: true
                  description: >
                    **Deprecated**: The list of status checks to require in
                    order to merge into this branch. If any of these checks have
                    recently been set by a particular GitHub App, they will be
                    required to come from that app in future for the branch to
                    merge. Use `checks` instead of `contexts` for more
                    fine-grained control.
                  items:
                    type: string
                checks:
                  type: array
                  description: >-
                    The list of status checks to require in order to merge into
                    this branch.
                  items:
                    type: object
                    required:
                      - context
                    properties:
                      context:
                        type: string
                        description: The name of the required check
                      app_id:
                        type: integer
                        description: >-
                          The ID of the GitHub App that must provide this check.
                          Omit this field to automatically select the GitHub App
                          that has recently provided this check, or any app if
                          it was not set by a GitHub App. Pass -1 to explicitly
                          allow any app to set the status.
            examples:
              default:
                value:
                  strict: true
                  contexts:
                    - continuous-integration/travis-ci
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status-check-policy'
              examples:
                default:
                  $ref: '#/components/examples/status-check-policy'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    delete:
      summary: Remove status check protection
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.
      tags:
        - - - - repos
      operationId: repos/remove-status-check-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#remove-status-check-protection
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
  /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts:
    get:
      summary: Get all status check contexts
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.
      tags:
        - - - - repos
      operationId: repos/get-all-status-check-contexts
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#get-all-status-check-contexts
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                default:
                  value:
                    - continuous-integration/travis-ci
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    post:
      summary: Add status check contexts
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.
      tags:
        - - - - repos
      operationId: repos/add-status-check-contexts
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#add-status-check-contexts
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    contexts:
                      type: array
                      description: The name of the status checks
                      items:
                        type: string
                  required:
                    - contexts
                  example:
                    contexts:
                      - contexts
                - type: array
                  description: The name of the status checks
                  items:
                    type: string
            examples:
              default:
                summary: Example adding status checks to a branch protection rule
                value:
                  contexts:
                    - continuous-integration/travis-ci
                    - continuous-integration/jenkins
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                default:
                  value:
                    - continuous-integration/travis-ci
                    - continuous-integration/jenkins
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: contexts
        category: branches
        subcategory: branch-protection
    put:
      summary: Set status check contexts
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.
      tags:
        - - - - repos
      operationId: repos/set-status-check-contexts
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#set-status-check-contexts
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    contexts:
                      type: array
                      description: The name of the status checks
                      items:
                        type: string
                  required:
                    - contexts
                  example:
                    contexts:
                      - contexts
                - type: array
                  description: The name of the status checks
                  items:
                    type: string
            examples:
              default:
                summary: Example updating status checks for a branch protection rule
                value:
                  contexts:
                    - continuous-integration/travis-ci
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                default:
                  value:
                    - continuous-integration/travis-ci
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: contexts
        category: branches
        subcategory: branch-protection
    delete:
      summary: Remove status check contexts
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.
      tags:
        - - - - repos
      operationId: repos/remove-status-check-contexts
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#remove-status-check-contexts
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    contexts:
                      type: array
                      description: The name of the status checks
                      items:
                        type: string
                  required:
                    - contexts
                  example:
                    contexts:
                      - contexts
                - type: array
                  description: The name of the status checks
                  items:
                    type: string
            examples:
              default:
                summary: Example removing status checks from a branch protection rule
                value:
                  contexts:
                    - continuous-integration/jenkins
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                default:
                  value:
                    - continuous-integration/travis-ci
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: contexts
        category: branches
        subcategory: branch-protection
  /repos/{owner}/{repo}/branches/{branch}/protection/restrictions:
    get:
      summary: Get access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Lists who has access to this protected branch.


        **Note**: Users, apps, and teams `restrictions` are only available for
        organization-owned repositories.
      tags:
        - - - - repos
      operationId: repos/get-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#get-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/branch-restriction-policy'
              examples:
                default:
                  $ref: '#/components/examples/branch-restriction-policy'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    delete:
      summary: Delete access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Disables the ability to restrict who can push to this branch.
      tags:
        - - - - repos
      operationId: repos/delete-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#delete-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
  /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps:
    get:
      summary: Get apps with access to the protected branch
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Lists the GitHub Apps that have push access to this branch. Only GitHub
        Apps that are installed on the repository and that have been granted
        write access to the repository contents can be added as authorized
        actors on a protected branch.
      tags:
        - - - - repos
      operationId: repos/get-apps-with-access-to-protected-branch
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#get-apps-with-access-to-the-protected-branch
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/integration'
              examples:
                default:
                  $ref: '#/components/examples/integration-items'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    post:
      summary: Add app access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Grants the specified apps push access for this branch. Only GitHub Apps
        that are installed on the repository and that have been granted write
        access to the repository contents can be added as authorized actors on a
        protected branch.
      tags:
        - - - - repos
      operationId: repos/add-app-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#add-app-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    apps:
                      type: array
                      description: >-
                        The GitHub Apps that have push access to this branch.
                        Use the slugified version of the app name. **Note**: The
                        list of users, apps, and teams in total is limited to
                        100 items.
                      items:
                        type: string
                  required:
                    - apps
                  example:
                    apps:
                      - my-app
                - type: array
                  items:
                    type: string
            examples:
              default:
                value:
                  apps:
                    - octoapp
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/integration'
              examples:
                default:
                  $ref: '#/components/examples/integration-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: apps
        category: branches
        subcategory: branch-protection
    put:
      summary: Set app access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Replaces the list of apps that have push access to this branch. This
        removes all apps that previously had push access and grants push access
        to the new list of apps. Only GitHub Apps that are installed on the
        repository and that have been granted write access to the repository
        contents can be added as authorized actors on a protected branch.
      tags:
        - - - - repos
      operationId: repos/set-app-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#set-app-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    apps:
                      type: array
                      description: >-
                        The GitHub Apps that have push access to this branch.
                        Use the slugified version of the app name. **Note**: The
                        list of users, apps, and teams in total is limited to
                        100 items.
                      items:
                        type: string
                  required:
                    - apps
                  example:
                    apps:
                      - my-app
                - type: array
                  items:
                    type: string
            examples:
              default:
                value:
                  apps:
                    - octoapp
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/integration'
              examples:
                default:
                  $ref: '#/components/examples/integration-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: apps
        category: branches
        subcategory: branch-protection
    delete:
      summary: Remove app access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Removes the ability of an app to push to this branch. Only GitHub Apps
        that are installed on the repository and that have been granted write
        access to the repository contents can be added as authorized actors on a
        protected branch.
      tags:
        - - - - repos
      operationId: repos/remove-app-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#remove-app-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    apps:
                      type: array
                      description: >-
                        The GitHub Apps that have push access to this branch.
                        Use the slugified version of the app name. **Note**: The
                        list of users, apps, and teams in total is limited to
                        100 items.
                      items:
                        type: string
                  required:
                    - apps
                  example:
                    apps:
                      - my-app
                - type: array
                  items:
                    type: string
            examples:
              default:
                value:
                  apps:
                    - my-app
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/integration'
              examples:
                default:
                  $ref: '#/components/examples/integration-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: apps
        category: branches
        subcategory: branch-protection
  /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams:
    get:
      summary: Get teams with access to the protected branch
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Lists the teams who have push access to this branch. The list includes
        child teams.
      tags:
        - - - - repos
      operationId: repos/get-teams-with-access-to-protected-branch
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#get-teams-with-access-to-the-protected-branch
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
              examples:
                default:
                  $ref: '#/components/examples/team-items'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    post:
      summary: Add team access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Grants the specified teams push access for this branch. You can also
        give push access to child teams.
      tags:
        - - - - repos
      operationId: repos/add-team-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#add-team-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    teams:
                      type: array
                      description: The slug values for teams
                      items:
                        type: string
                  required:
                    - teams
                  example:
                    teams:
                      - my-team
                - type: array
                  description: The slug values for teams
                  items:
                    type: string
            examples:
              default:
                summary: Example adding a team in a branch protection rule
                value:
                  teams:
                    - justice-league
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
              examples:
                default:
                  $ref: '#/components/examples/team-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: teams
        category: branches
        subcategory: branch-protection
    put:
      summary: Set team access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Replaces the list of teams that have push access to this branch. This
        removes all teams that previously had push access and grants push access
        to the new list of teams. Team restrictions include child teams.
      tags:
        - - - - repos
      operationId: repos/set-team-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#set-team-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    teams:
                      type: array
                      description: The slug values for teams
                      items:
                        type: string
                  required:
                    - teams
                  example:
                    teams:
                      - justice-league
                - type: array
                  description: The slug values for teams
                  items:
                    type: string
            examples:
              default:
                summary: Example replacing a team in a branch protection rule
                value:
                  teams:
                    - justice-league
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
              examples:
                default:
                  $ref: '#/components/examples/team-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: teams
        category: branches
        subcategory: branch-protection
    delete:
      summary: Remove team access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Removes the ability of a team to push to this branch. You can also
        remove push access for child teams.
      tags:
        - - - - repos
      operationId: repos/remove-team-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#remove-team-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    teams:
                      type: array
                      description: The slug values for teams
                      items:
                        type: string
                  required:
                    - teams
                  example:
                    teams:
                      - my-team
                - type: array
                  description: The slug values for teams
                  items:
                    type: string
            examples:
              default:
                summary: Example removing a team in a branch protection rule
                value:
                  teams:
                    - octocats
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
              examples:
                default:
                  $ref: '#/components/examples/team-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: teams
        category: branches
        subcategory: branch-protection
  /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users:
    get:
      summary: Get users with access to the protected branch
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Lists the people who have push access to this branch.
      tags:
        - - - - repos
      operationId: repos/get-users-with-access-to-protected-branch
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#get-users-with-access-to-the-protected-branch
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branch-protection
    post:
      summary: Add user access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Grants the specified people push access for this branch.


        | Type    |
        Description                                                                                                                  
        |

        | - | -- |

        | `array` | Usernames for people who can have push access. **Note**: The
        list of users, apps, and teams in total is limited to 100 items. |
      tags:
        - - - - repos
      operationId: repos/add-user-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#add-user-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    users:
                      type: array
                      description: The username for users
                      items:
                        type: string
                  required:
                    - users
                  example:
                    users:
                      - mona
                - type: array
                  items:
                    type: string
            examples:
              default:
                summary: Example adding a user in a branch protection rule
                value:
                  users:
                    - octocat
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: users
        category: branches
        subcategory: branch-protection
    put:
      summary: Set user access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Replaces the list of people that have push access to this branch. This
        removes all people that previously had push access and grants push
        access to the new list of people.


        | Type    |
        Description                                                                                                                  
        |

        | - | -- |

        | `array` | Usernames for people who can have push access. **Note**: The
        list of users, apps, and teams in total is limited to 100 items. |
      tags:
        - - - - repos
      operationId: repos/set-user-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#set-user-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    users:
                      type: array
                      description: The username for users
                      items:
                        type: string
                  required:
                    - users
                  example:
                    users:
                      - mona
                - type: array
                  items:
                    type: string
            examples:
              default:
                summary: Example replacing a user in a branch protection rule
                value:
                  users:
                    - octocat
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: users
        category: branches
        subcategory: branch-protection
    delete:
      summary: Remove user access restrictions
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Removes the ability of a user to push to this branch.


        | Type    |
        Description                                                                                                                                  
        |

        | - |

        |

        | `array` | Usernames of the people who should no longer have push
        access. **Note**: The list of users, apps, and teams in total is limited
        to 100 items. |
      tags:
        - - - - repos
      operationId: repos/remove-user-access-restrictions
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection#remove-user-access-restrictions
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    users:
                      type: array
                      description: The username for users
                      items:
                        type: string
                  required:
                    - users
                  example:
                    users:
                      - mona
                - type: array
                  items:
                    type: string
            examples:
              default:
                summary: Example removing a user in a branch protection rule
                value:
                  users:
                    - octocat
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        requestBodyParameterName: users
        category: branches
        subcategory: branch-protection
  /repos/{owner}/{repo}/branches/{branch}/rename:
    post:
      summary: Rename a branch
      description: >-
        Renames a branch in a repository.


        **Note:** Although the API responds immediately, the branch rename
        process might take some extra time to complete in the background. You
        won't be able to push to the old branch name while the rename process is
        in progress. For more information, see "[Renaming a
        branch](https://docs.github.com/enterprise-server@3.9/github/administering-a-repository/renaming-a-branch)".


        The authenticated user must have push access to the branch. If the
        branch is the default branch, the authenticated user must also have
        admin or owner permissions.


        In order to rename the default branch, fine-grained access tokens also
        need the `administration:write` repository permission.
      tags:
        - - - - repos
      operationId: repos/rename-branch
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branches#rename-a-branch
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/branch'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_name:
                  type: string
                  description: The new name of the branch.
              required:
                - new_name
            examples:
              default:
                value:
                  new_name: my_renamed_branch
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/branch-with-protection'
              examples:
                default:
                  $ref: '#/components/examples/branch-with-protection'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branches
  /repos/{owner}/{repo}/check-runs:
    post:
      summary: Create a check run
      description: >-
        Creates a new check run for a specific commit in a repository.


        To create a check run, you must use a GitHub App. OAuth apps and
        authenticated users are not able to create a check suite.


        In a check suite, GitHub limits the number of check runs with the same
        name to 1000. Once these check runs exceed 1000, GitHub will start to
        automatically delete older check runs.


        **Note:** The Checks API only looks for pushes in the repository where
        the check suite or check run were created. Pushes to a branch in a
        forked repository are not detected and return an empty `pull_requests`
        array.
      tags:
        - - - - checks
      operationId: checks/create
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/checks/runs#create-a-check-run
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the check. For example, "code-coverage".
                head_sha:
                  type: string
                  description: The SHA of the commit.
                details_url:
                  type: string
                  description: >-
                    The URL of the integrator's site that has the full details
                    of the check. If the integrator does not provide this, then
                    the homepage of the GitHub app is used.
                external_id:
                  type: string
                  description: A reference for the run on the integrator's system.
                status:
                  type: string
                  description: The current status.
                  enum:
                    - queued
                    - in_progress
                    - completed
                  default: queued
                started_at:
                  type: string
                  format: date-time
                  description: >-
                    The time that the check run began. This is a timestamp in
                    [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
                    `YYYY-MM-DDTHH:MM:SSZ`.
                conclusion:
                  type: string
                  description: >-
                    **Required if you provide `completed_at` or a `status` of
                    `completed`**. The final conclusion of the check. 

                    **Note:** Providing `conclusion` will automatically set the
                    `status` parameter to `completed`. You cannot change a check
                    run conclusion to `stale`, only GitHub can set this.
                  enum:
                    - action_required
                    - cancelled
                    - failure
                    - neutral
                    - success
                    - skipped
                    - stale
                    - timed_out
                completed_at:
                  type: string
                  format: date-time
                  description: >-
                    The time the check completed. This is a timestamp in [ISO
                    8601](https://en.wikipedia.org/wiki/ISO_8601) format:
                    `YYYY-MM-DDTHH:MM:SSZ`.
                output:
                  type: object
                  description: >-
                    Check runs can accept a variety of data in the `output`
                    object, including a `title` and `summary` and can optionally
                    provide descriptive details about the run.
                  properties:
                    title:
                      type: string
                      description: The title of the check run.
                    summary:
                      type: string
                      maxLength: 65535
                      description: >-
                        The summary of the check run. This parameter supports
                        Markdown. **Maximum length**: 65535 characters.
                    text:
                      type: string
                      maxLength: 65535
                      description: >-
                        The details of the check run. This parameter supports
                        Markdown. **Maximum length**: 65535 characters.
                    annotations:
                      type: array
                      description: >-
                        Adds information from your analysis to specific lines of
                        code. Annotations are visible on GitHub in the
                        **Checks** and **Files changed** tab of the pull
                        request. The Checks API limits the number of annotations
                        to a maximum of 50 per API request. To create more than
                        50 annotations, you have to make multiple requests to
                        the [Update a check
                        run](https://docs.github.com/enterprise-server@3.9/rest/checks/runs#update-a-check-run)
                        endpoint. Each time you update the check run,
                        annotations are appended to the list of annotations that
                        already exist for the check run. GitHub Actions are
                        limited to 10 warning annotations and 10 error
                        annotations per step. For details about how you can view
                        annotations on GitHub, see "[About status
                        checks](https://docs.github.com/enterprise-server@3.9/articles/about-status-checks#checks)".
                      maxItems: 50
                      items:
                        type: object
                        properties:
                          path:
                            type: string
                            description: >-
                              The path of the file to add an annotation to. For
                              example, `assets/css/main.css`.
                          start_line:
                            type: integer
                            description: >-
                              The start line of the annotation. Line numbers
                              start at 1.
                          end_line:
                            type: integer
                            description: The end line of the annotation.
                          start_column:
                            type: integer
                            description: >-
                              The start column of the annotation. Annotations
                              only support `start_column` and `end_column` on
                              the same line. Omit this parameter if `start_line`
                              and `end_line` have different values. Column
                              numbers start at 1.
                          end_column:
                            type: integer
                            description: >-
                              The end column of the annotation. Annotations only
                              support `start_column` and `end_column` on the
                              same line. Omit this parameter if `start_line` and
                              `end_line` have different values.
                          annotation_level:
                            type: string
                            description: The level of the annotation.
                            enum:
                              - notice
                              - warning
                              - failure
                          message:
                            type: string
                            description: >-
                              A short description of the feedback for these
                              lines of code. The maximum size is 64 KB.
                          title:
                            type: string
                            description: >-
                              The title that represents the annotation. The
                              maximum size is 255 characters.
                          raw_details:
                            type: string
                            description: >-
                              Details about this annotation. The maximum size is
                              64 KB.
                        required:
                          - path
                          - start_line
                          - end_line
                          - annotation_level
                          - message
                    images:
                      type: array
                      description: >-
                        Adds images to the output displayed in the GitHub pull
                        request UI.
                      items:
                        type: object
                        properties:
                          alt:
                            type: string
                            description: The alternative text for the image.
                          image_url:
                            type: string
                            description: The full URL of the image.
                          caption:
                            type: string
                            description: A short image description.
                        required:
                          - alt
                          - image_url
                  required:
                    - title
                    - summary
                actions:
                  type: array
                  description: >-
                    Displays a button on GitHub that can be clicked to alert
                    your app to do additional tasks. For example, a code linting
                    app can display a button that automatically fixes detected
                    errors. The button created in this object is displayed after
                    the check run completes. When a user clicks the button,
                    GitHub sends the [`check_run.requested_action`
                    webhook](https://docs.github.com/enterprise-server@3.9/webhooks/event-payloads/#check_run)
                    to your app. Each action includes a `label`, `identifier`
                    and `description`. A maximum of three actions are accepted.
                    To learn more about check runs and requested actions, see
                    "[Check runs and requested
                    actions](https://docs.github.com/enterprise-server@3.9/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions)."
                  maxItems: 3
                  items:
                    type: object
                    properties:
                      label:
                        type: string
                        maxLength: 20
                        description: >-
                          The text to be displayed on a button in the web UI.
                          The maximum size is 20 characters.
                      description:
                        type: string
                        maxLength: 40
                        description: >-
                          A short explanation of what this action would do. The
                          maximum size is 40 characters.
                      identifier:
                        type: string
                        maxLength: 20
                        description: >-
                          A reference for the action on the integrator's system.
                          The maximum size is 20 characters.
                    required:
                      - label
                      - description
                      - identifier
              required:
                - name
                - head_sha
              oneOf:
                - properties:
                    status:
                      enum:
                        - completed
                  required:
                    - status
                    - conclusion
                  additionalProperties: true
                - properties:
                    status:
                      enum:
                        - queued
                        - in_progress
                  additionalProperties: true
            examples:
              example-of-in-progress-conclusion:
                summary: Example of an in_progress conclusion
                value:
                  name: mighty_readme
                  head_sha: ce587453ced02b1526dfb4cb910479d431683101
                  status: in_progress
                  external_id: '42'
                  started_at: '2018-05-04T01:14:52Z'
                  output:
                    title: Mighty Readme report
                    summary: ''
                    text: ''
              example-of-completed-conclusion:
                summary: Example of a completed conclusion
                value:
                  name: mighty_readme
                  head_sha: ce587453ced02b1526dfb4cb910479d431683101
                  status: completed
                  started_at: '2017-11-30T19:39:10Z'
                  conclusion: success
                  completed_at: '2017-11-30T19:49:10Z'
                  output:
                    title: Mighty Readme report
                    summary: There are 0 failures, 2 warnings, and 1 notices.
                    text: >-
                      You may have some misspelled words on lines 2 and 4. You
                      also may want to add a section in your README about how to
                      install your app.
                    annotations:
                      - path: README.md
                        annotation_level: warning
                        title: Spell Checker
                        message: Check your spelling for 'banaas'.
                        raw_details: Do you mean 'bananas' or 'banana'?
                        start_line: 2
                        end_line: 2
                      - path: README.md
                        annotation_level: warning
                        title: Spell Checker
                        message: Check your spelling for 'aples'
                        raw_details: Do you mean 'apples' or 'Naples'
                        start_line: 4
                        end_line: 4
                    images:
                      - alt: Super bananas
                        image_url: http://example.com/images/42
                  actions:
                    - label: Fix
                      identifier: fix_errors
                      description: Allow us to fix these errors for you
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/check-run'
              examples:
                example-of-completed-conclusion:
                  $ref: >-
                    #/components/examples/check-run-example-of-completed-conclusion
                example-of-in-progress-conclusion:
                  $ref: >-
                    #/components/examples/check-run-example-of-in-progress-conclusion
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: checks
        subcategory: runs
  /repos/{owner}/{repo}/check-runs/{check_run_id}:
    get:
      summary: Get a check run
      description: >-
        Gets a single check run using its `id`.


        **Note:** The Checks API only looks for pushes in the repository where
        the check suite or check run were created. Pushes to a branch in a
        forked repository are not detected and return an empty `pull_requests`
        array.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint on a private repository.
      tags:
        - - - - checks
      operationId: checks/get
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/checks/runs#get-a-check-run
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/check-run-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/check-run'
              examples:
                default:
                  $ref: '#/components/examples/check-run'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: checks
        subcategory: runs
    patch:
      summary: Update a check run
      description: >-
        Updates a check run for a specific commit in a repository.


        **Note:** The endpoints to manage checks only look for pushes in the
        repository where the check suite or check run were created. Pushes to a
        branch in a forked repository are not detected and return an empty
        `pull_requests` array.


        OAuth apps and personal access tokens (classic) cannot use this
        endpoint.
      tags:
        - - - - checks
      operationId: checks/update
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/checks/runs#update-a-check-run
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/check-run-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the check. For example, "code-coverage".
                details_url:
                  type: string
                  description: >-
                    The URL of the integrator's site that has the full details
                    of the check.
                external_id:
                  type: string
                  description: A reference for the run on the integrator's system.
                started_at:
                  type: string
                  format: date-time
                  description: >-
                    This is a timestamp in [ISO
                    8601](https://en.wikipedia.org/wiki/ISO_8601) format:
                    `YYYY-MM-DDTHH:MM:SSZ`.
                status:
                  type: string
                  description: The current status.
                  enum:
                    - queued
                    - in_progress
                    - completed
                conclusion:
                  type: string
                  description: >-
                    **Required if you provide `completed_at` or a `status` of
                    `completed`**. The final conclusion of the check. 

                    **Note:** Providing `conclusion` will automatically set the
                    `status` parameter to `completed`. You cannot change a check
                    run conclusion to `stale`, only GitHub can set this.
                  enum:
                    - action_required
                    - cancelled
                    - failure
                    - neutral
                    - success
                    - skipped
                    - stale
                    - timed_out
                completed_at:
                  type: string
                  format: date-time
                  description: >-
                    The time the check completed. This is a timestamp in [ISO
                    8601](https://en.wikipedia.org/wiki/ISO_8601) format:
                    `YYYY-MM-DDTHH:MM:SSZ`.
                output:
                  type: object
                  description: >-
                    Check runs can accept a variety of data in the `output`
                    object, including a `title` and `summary` and can optionally
                    provide descriptive details about the run.
                  properties:
                    title:
                      type: string
                      description: '**Required**.'
                    summary:
                      type: string
                      description: Can contain Markdown.
                      maxLength: 65535
                    text:
                      type: string
                      description: Can contain Markdown.
                      maxLength: 65535
                    annotations:
                      type: array
                      description: >-
                        Adds information from your analysis to specific lines of
                        code. Annotations are visible in GitHub's pull request
                        UI. Annotations are visible in GitHub's pull request UI.
                        The Checks API limits the number of annotations to a
                        maximum of 50 per API request. To create more than 50
                        annotations, you have to make multiple requests to the
                        [Update a check
                        run](https://docs.github.com/enterprise-server@3.9/rest/checks/runs#update-a-check-run)
                        endpoint. Each time you update the check run,
                        annotations are appended to the list of annotations that
                        already exist for the check run. GitHub Actions are
                        limited to 10 warning annotations and 10 error
                        annotations per step. For details about annotations in
                        the UI, see "[About status
                        checks](https://docs.github.com/enterprise-server@3.9/articles/about-status-checks#checks)".
                      maxItems: 50
                      items:
                        type: object
                        properties:
                          path:
                            type: string
                            description: >-
                              The path of the file to add an annotation to. For
                              example, `assets/css/main.css`.
                          start_line:
                            type: integer
                            description: >-
                              The start line of the annotation. Line numbers
                              start at 1.
                          end_line:
                            type: integer
                            description: The end line of the annotation.
                          start_column:
                            type: integer
                            description: >-
                              The start column of the annotation. Annotations
                              only support `start_column` and `end_column` on
                              the same line. Omit this parameter if `start_line`
                              and `end_line` have different values. Column
                              numbers start at 1.
                          end_column:
                            type: integer
                            description: >-
                              The end column of the annotation. Annotations only
                              support `start_column` and `end_column` on the
                              same line. Omit this parameter if `start_line` and
                              `end_line` have different values.
                          annotation_level:
                            type: string
                            description: The level of the annotation.
                            enum:
                              - notice
                              - warning
                              - failure
                          message:
                            type: string
                            description: >-
                              A short description of the feedback for these
                              lines of code. The maximum size is 64 KB.
                          title:
                            type: string
                            description: >-
                              The title that represents the annotation. The
                              maximum size is 255 characters.
                          raw_details:
                            type: string
                            description: >-
                              Details about this annotation. The maximum size is
                              64 KB.
                        required:
                          - path
                          - start_line
                          - end_line
                          - annotation_level
                          - message
                    images:
                      type: array
                      description: >-
                        Adds images to the output displayed in the GitHub pull
                        request UI.
                      items:
                        type: object
                        properties:
                          alt:
                            type: string
                            description: The alternative text for the image.
                          image_url:
                            type: string
                            description: The full URL of the image.
                          caption:
                            type: string
                            description: A short image description.
                        required:
                          - alt
                          - image_url
                  required:
                    - summary
                actions:
                  type: array
                  description: >-
                    Possible further actions the integrator can perform, which a
                    user may trigger. Each action includes a `label`,
                    `identifier` and `description`. A maximum of three actions
                    are accepted. To learn more about check runs and requested
                    actions, see "[Check runs and requested
                    actions](https://docs.github.com/enterprise-server@3.9/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions)."
                  maxItems: 3
                  items:
                    type: object
                    properties:
                      label:
                        type: string
                        maxLength: 20
                        description: >-
                          The text to be displayed on a button in the web UI.
                          The maximum size is 20 characters.
                      description:
                        type: string
                        maxLength: 40
                        description: >-
                          A short explanation of what this action would do. The
                          maximum size is 40 characters.
                      identifier:
                        type: string
                        maxLength: 20
                        description: >-
                          A reference for the action on the integrator's system.
                          The maximum size is 20 characters.
                    required:
                      - label
                      - description
                      - identifier
              anyOf:
                - properties:
                    status:
                      enum:
                        - completed
                  required:
                    - conclusion
                  additionalProperties: true
                - properties:
                    status:
                      enum:
                        - queued
                        - in_progress
                  additionalProperties: true
            examples:
              default:
                value:
                  name: mighty_readme
                  started_at: '2018-05-04T01:14:52Z'
                  status: completed
                  conclusion: success
                  completed_at: '2018-05-04T01:14:52Z'
                  output:
                    title: Mighty Readme report
                    summary: There are 0 failures, 2 warnings, and 1 notices.
                    text: >-
                      You may have some misspelled words on lines 2 and 4. You
                      also may want to add a section in your README about how to
                      install your app.
                    annotations:
                      - path: README.md
                        annotation_level: warning
                        title: Spell Checker
                        message: Check your spelling for 'banaas'.
                        raw_details: Do you mean 'bananas' or 'banana'?
                        start_line: 2
                        end_line: 2
                      - path: README.md
                        annotation_level: warning
                        title: Spell Checker
                        message: Check your spelling for 'aples'
                        raw_details: Do you mean 'apples' or 'Naples'
                        start_line: 4
                        end_line: 4
                    images:
                      - alt: Super bananas
                        image_url: http://example.com/images/42
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/check-run'
              examples:
                default:
                  $ref: '#/components/examples/check-run'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: checks
        subcategory: runs
  /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations:
    get:
      summary: List check run annotations
      description: >-
        Lists annotations for a check run using the annotation `id`.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint on a private repository.
      tags:
        - - - - checks
      operationId: checks/list-annotations
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/checks/runs#list-check-run-annotations
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/check-run-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/check-annotation'
              examples:
                default:
                  $ref: '#/components/examples/check-annotation-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: checks
        subcategory: runs
  /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest:
    post:
      summary: Rerequest a check run
      description: >-
        Triggers GitHub to rerequest an existing check run, without pushing new
        code to a repository. This endpoint will trigger the [`check_run`
        webhook](https://docs.github.com/enterprise-server@3.9/webhooks/event-payloads/#check_run)
        event with the action `rerequested`. When a check run is `rerequested`,
        its `status` is reset to `queued` and the `conclusion` is cleared.


        For more information about how to re-run GitHub Actions jobs, see
        "[Re-run a job from a workflow
        run](https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run)".


        OAuth apps and personal access tokens (classic) cannot use this
        endpoint.
      tags:
        - - - - checks
      operationId: checks/rerequest-run
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/checks/runs#rerequest-a-check-run
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/check-run-id'
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty-object'
              examples:
                default:
                  value: null
        '403':
          description: >-
            Forbidden if the check run is not rerequestable or doesn't belong to
            the authenticated GitHub App
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/basic-error'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          description: Validation error if the check run is not rerequestable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/basic-error'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: checks
        subcategory: runs
  /repos/{owner}/{repo}/check-suites:
    post:
      summary: Create a check suite
      description: >-
        Creates a check suite manually. By default, check suites are
        automatically created when you create a [check
        run](https://docs.github.com/enterprise-server@3.9/rest/checks/runs).
        You only need to use this endpoint for manually creating check suites
        when you've disabled automatic creation using "[Update repository
        preferences for check
        suites](https://docs.github.com/enterprise-server@3.9/rest/checks/suites#update-repository-preferences-for-check-suites)".


        **Note:** The Checks API only looks for pushes in the repository where
        the check suite or check run were created. Pushes to a branch in a
        forked repository are not detected and return an empty `pull_requests`
        array and a `null` value for `head_branch`.


        OAuth apps and personal access tokens (classic) cannot use this
        endpoint.
      tags:
        - - - - checks
      operationId: checks/create-suite
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/checks/suites#create-a-check-suite
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                head_sha:
                  type: string
                  description: The sha of the head commit.
              required:
                - head_sha
            examples:
              default:
                value:
                  head_sha: d6fde92930d4715a2b49857d24b940956b26d2d3
      responses:
        '200':
          description: Response when the suite already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/check-suite'
              examples:
                default:
                  $ref: '#/components/examples/check-suite'
        '201':
          description: Response when the suite was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/check-suite'
              examples:
                default:
                  $ref: '#/components/examples/check-suite'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: checks
        subcategory: suites
  /repos/{owner}/{repo}/check-suites/preferences:
    patch:
      summary: Update repository preferences for check suites
      description: >-
        Changes the default automatic flow when creating check suites. By
        default, a check suite is automatically created each time code is pushed
        to a repository. When you disable the automatic creation of check
        suites, you can manually [Create a check
        suite](https://docs.github.com/enterprise-server@3.9/rest/checks/suites#create-a-check-suite).

        You must have admin permissions in the repository to set preferences for
        check suites.
      tags:
        - - - - checks
      operationId: checks/set-suites-preferences
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/checks/suites#update-repository-preferences-for-check-suites
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                auto_trigger_checks:
                  type: array
                  description: >-
                    Enables or disables automatic creation of CheckSuite events
                    upon pushes to the repository. Enabled by default.
                  items:
                    type: object
                    properties:
                      app_id:
                        type: integer
                        description: The `id` of the GitHub App.
                      setting:
                        type: boolean
                        description: >-
                          Set to `true` to enable automatic creation of
                          CheckSuite events upon pushes to the repository, or
                          `false` to disable them.
                        default: true
                    required:
                      - app_id
                      - setting
            examples:
              default:
                value:
                  auto_trigger_checks:
                    - app_id: 4
                      setting: false
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/check-suite-preference'
              examples:
                default:
                  $ref: '#/components/examples/check-suite-preference'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: checks
        subcategory: suites
  /repos/{owner}/{repo}/check-suites/{check_suite_id}:
    get:
      summary: Get a check suite
      description: >-
        Gets a single check suite using its `id`.


        **Note:** The Checks API only looks for pushes in the repository where
        the check suite or check run were created. Pushes to a branch in a
        forked repository are not detected and return an empty `pull_requests`
        array and a `null` value for `head_branch`.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint on a private repository.
      tags:
        - - - - checks
      operationId: checks/get-suite
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/checks/suites#get-a-check-suite
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/check-suite-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/check-suite'
              examples:
                default:
                  $ref: '#/components/examples/check-suite'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: checks
        subcategory: suites
  /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs:
    get:
      summary: List check runs in a check suite
      description: >-
        Lists check runs for a check suite using its `id`.


        **Note:** The endpoints to manage checks only look for pushes in the
        repository where the check suite or check run were created. Pushes to a
        branch in a forked repository are not detected and return an empty
        `pull_requests` array.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint on a private repository.
      tags:
        - - - - checks
      operationId: checks/list-for-suite
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/checks/runs#list-check-runs-in-a-check-suite
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/check-suite-id'
        - $ref: '#/components/parameters/check-name'
        - $ref: '#/components/parameters/status'
        - name: filter
          description: >-
            Filters check runs by their `completed_at` timestamp. `latest`
            returns the most recent check runs.
          in: query
          required: false
          schema:
            type: string
            enum:
              - latest
              - all
            default: latest
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - check_runs
                properties:
                  total_count:
                    type: integer
                  check_runs:
                    type: array
                    items:
                      $ref: '#/components/schemas/check-run'
              examples:
                default:
                  $ref: '#/components/examples/check-run-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: checks
        subcategory: runs
  /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest:
    post:
      summary: Rerequest a check suite
      description: >-
        Triggers GitHub to rerequest an existing check suite, without pushing
        new code to a repository. This endpoint will trigger the [`check_suite`
        webhook](https://docs.github.com/enterprise-server@3.9/webhooks/event-payloads/#check_suite)
        event with the action `rerequested`. When a check suite is
        `rerequested`, its `status` is reset to `queued` and the `conclusion` is
        cleared.


        OAuth apps and personal access tokens (classic) cannot use this
        endpoint.
      tags:
        - - - - checks
      operationId: checks/rerequest-suite
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/checks/suites#rerequest-a-check-suite
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/check-suite-id'
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty-object'
              examples:
                default:
                  value: null
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: checks
        subcategory: suites
  /repos/{owner}/{repo}/code-scanning/alerts:
    get:
      summary: List code scanning alerts for a repository
      description: >-
        Lists code scanning alerts.


        The response includes a `most_recent_instance` object.

        This provides details of the most recent instance of this alert

        for the default branch (or for the specified Git reference if you used
        `ref` in the request).


        OAuth app tokens and personal access tokens (classic) need the
        `security_events` scope to use this endpoint with private or public
        repositories, or the `public_repo` scope to use this endpoint with only
        public repositories.
      tags:
        - - - - code-scanning
      operationId: code-scanning/list-alerts-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/tool-name'
        - $ref: '#/components/parameters/tool-guid'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/git-ref'
        - $ref: '#/components/parameters/direction'
        - name: sort
          description: The property by which to sort the results.
          in: query
          required: false
          schema:
            type: string
            enum:
              - created
              - updated
            default: created
        - name: state
          description: >-
            If specified, only code scanning alerts with this state will be
            returned.
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/code-scanning-alert-state-query'
        - name: severity
          description: >-
            If specified, only code scanning alerts with this severity will be
            returned.
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/code-scanning-alert-severity'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/code-scanning-alert-items'
              examples:
                default:
                  $ref: '#/components/examples/code-scanning-alert-items'
        '304':
          $ref: '#/components/responses/not_modified'
        '403':
          $ref: '#/components/responses/code_scanning_forbidden_read'
        '404':
          $ref: '#/components/responses/not_found'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: code-scanning
        subcategory: code-scanning
  /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}:
    get:
      summary: Get a code scanning alert
      description: >-
        Gets a single code scanning alert.


        OAuth app tokens and personal access tokens (classic) need the
        `security_events` scope to use this endpoint with private or public
        repositories, or the `public_repo` scope to use this endpoint with only
        public repositories.
      tags:
        - - - - code-scanning
      operationId: code-scanning/get-alert
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/code-scanning/code-scanning#get-a-code-scanning-alert
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/alert-number'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-scanning-alert'
              examples:
                default:
                  $ref: '#/components/examples/code-scanning-alert'
        '304':
          $ref: '#/components/responses/not_modified'
        '403':
          $ref: '#/components/responses/code_scanning_forbidden_read'
        '404':
          $ref: '#/components/responses/not_found'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: code-scanning
        subcategory: code-scanning
    patch:
      summary: Update a code scanning alert
      description: >-
        Updates the status of a single code scanning alert.

        OAuth app tokens and personal access tokens (classic) need the
        `security_events` scope to use this endpoint with private or public
        repositories, or the `public_repo` scope to use this endpoint with only
        public repositories.
      operationId: code-scanning/update-alert
      tags:
        - - - - code-scanning
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/code-scanning/code-scanning#update-a-code-scanning-alert
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/alert-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  $ref: '#/components/schemas/code-scanning-alert-set-state'
                dismissed_reason:
                  $ref: '#/components/schemas/code-scanning-alert-dismissed-reason'
                dismissed_comment:
                  $ref: '#/components/schemas/code-scanning-alert-dismissed-comment'
              required:
                - state
            examples:
              default:
                value:
                  state: dismissed
                  dismissed_reason: false positive
                  dismissed_comment: >-
                    This alert is not actually correct, because there's a
                    sanitizer included in the library.
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-scanning-alert'
              examples:
                default:
                  $ref: '#/components/examples/code-scanning-alert-dismissed'
        '403':
          $ref: '#/components/responses/code_scanning_forbidden_write'
        '404':
          $ref: '#/components/responses/not_found'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: false
        category: code-scanning
        subcategory: code-scanning
  /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances:
    get:
      summary: List instances of a code scanning alert
      description: >-
        Lists all instances of the specified code scanning alert.


        OAuth app tokens and personal access tokens (classic) need the
        `security_events` scope to use this endpoint with private or public
        repositories, or the `public_repo` scope to use this endpoint with only
        public repositories.
      tags:
        - - - - code-scanning
      operationId: code-scanning/list-alert-instances
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/code-scanning/code-scanning#list-instances-of-a-code-scanning-alert
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/alert-number'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/git-ref'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/code-scanning-alert-instance'
              examples:
                default:
                  $ref: '#/components/examples/code-scanning-alert-instances'
        '403':
          $ref: '#/components/responses/code_scanning_forbidden_read'
        '404':
          $ref: '#/components/responses/not_found'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: code-scanning
        subcategory: code-scanning
  /repos/{owner}/{repo}/code-scanning/analyses:
    get:
      summary: List code scanning analyses for a repository
      description: >-
        Lists the details of all code scanning analyses for a repository,

        starting with the most recent.

        The response is paginated and you can use the `page` and `per_page`
        parameters

        to list the analyses you're interested in.

        By default 30 analyses are listed per page.


        The `rules_count` field in the response give the number of rules

        that were run in the analysis.

        For very old analyses this data is not available,

        and `0` is returned in this field.


        **Deprecation notice**:

        The `tool_name` field is deprecated and will, in future, not be included
        in the response for this endpoint. The example response reflects this
        change. The tool name can now be found inside the `tool` field.


        OAuth app tokens and personal access tokens (classic) need the
        `security_events` scope to use this endpoint with private or public
        repositories, or the `public_repo` scope to use this endpoint with only
        public repositories.
      operationId: code-scanning/list-recent-analyses
      tags:
        - - - - code-scanning
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/code-scanning/code-scanning#list-code-scanning-analyses-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/tool-name'
        - $ref: '#/components/parameters/tool-guid'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per-page'
        - name: ref
          in: query
          description: >-
            The Git reference for the analyses you want to list. The `ref` for a
            branch can be formatted either as `refs/heads/<branch name>` or
            simply `<branch name>`. To reference a pull request use
            `refs/pull/<number>/merge`.
          required: false
          schema:
            $ref: '#/components/schemas/code-scanning-ref'
        - name: sarif_id
          in: query
          description: Filter analyses belonging to the same SARIF upload.
          required: false
          schema:
            $ref: '#/components/schemas/code-scanning-analysis-sarif-id'
        - $ref: '#/components/parameters/direction'
        - name: sort
          description: The property by which to sort the results.
          in: query
          required: false
          schema:
            type: string
            enum:
              - created
            default: created
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/code-scanning-analysis'
              examples:
                default:
                  $ref: '#/components/examples/code-scanning-analysis-items'
        '403':
          $ref: '#/components/responses/code_scanning_forbidden_read'
        '404':
          $ref: '#/components/responses/not_found'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: false
        category: code-scanning
        subcategory: code-scanning
  /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}:
    get:
      summary: Get a code scanning analysis for a repository
      description: >-
        Gets a specified code scanning analysis for a repository.


        The default JSON response contains fields that describe the analysis.

        This includes the Git reference and commit SHA to which the analysis
        relates,

        the datetime of the analysis, the name of the code scanning tool,

        and the number of alerts.


        The `rules_count` field in the default response give the number of rules

        that were run in the analysis.

        For very old analyses this data is not available,

        and `0` is returned in this field.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/sarif+json`**: Instead of returning a summary of the
        analysis, this endpoint returns a subset of the analysis data that was
        uploaded. The data is formatted as [SARIF version
        2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
        It also returns additional data such as the `github/alertNumber` and
        `github/alertUrl` properties.


        OAuth app tokens and personal access tokens (classic) need the
        `security_events` scope to use this endpoint with private or public
        repositories, or the `public_repo` scope to use this endpoint with only
        public repositories.
      operationId: code-scanning/get-analysis
      tags:
        - - - - code-scanning
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: analysis_id
          in: path
          description: >-
            The ID of the analysis, as returned from the `GET
            /repos/{owner}/{repo}/code-scanning/analyses` operation.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-scanning-analysis'
              examples:
                response:
                  $ref: '#/components/examples/code-scanning-analysis-default'
            application/json+sarif:
              schema:
                type: object
                additionalProperties: true
              examples:
                response:
                  $ref: '#/components/examples/code-scanning-analysis-sarif'
        '403':
          $ref: '#/components/responses/code_scanning_forbidden_read'
        '404':
          $ref: '#/components/responses/not_found'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: false
        category: code-scanning
        subcategory: code-scanning
    delete:
      summary: Delete a code scanning analysis from a repository
      description: >-
        Deletes a specified code scanning analysis from a repository.


        You can delete one analysis at a time.

        To delete a series of analyses, start with the most recent analysis and
        work backwards.

        Conceptually, the process is similar to the undo function in a text
        editor.


        When you list the analyses for a repository,

        one or more will be identified as deletable in the response:


        ```

        "deletable": true

        ```


        An analysis is deletable when it's the most recent in a set of analyses.

        Typically, a repository will have multiple sets of analyses

        for each enabled code scanning tool,

        where a set is determined by a unique combination of analysis values:


        * `ref`

        * `tool`

        * `category`


        If you attempt to delete an analysis that is not the most recent in a
        set,

        you'll get a 400 response with the message:


        ```

        Analysis specified is not deletable.

        ```


        The response from a successful `DELETE` operation provides you with

        two alternative URLs for deleting the next analysis in the set:

        `next_analysis_url` and `confirm_delete_url`.

        Use the `next_analysis_url` URL if you want to avoid accidentally
        deleting the final analysis

        in a set. This is a useful option if you want to preserve at least one
        analysis

        for the specified tool in your repository.

        Use the `confirm_delete_url` URL if you are content to remove all
        analyses for a tool.

        When you delete the last analysis in a set, the value of
        `next_analysis_url` and `confirm_delete_url`

        in the 200 response is `null`.


        As an example of the deletion process,

        let's imagine that you added a workflow that configured a particular
        code scanning tool

        to analyze the code in a repository. This tool has added 15 analyses:

        10 on the default branch, and another 5 on a topic branch.

        You therefore have two separate sets of analyses for this tool.

        You've now decided that you want to remove all of the analyses for the
        tool.

        To do this you must make 15 separate deletion requests.

        To start, you must find an analysis that's identified as deletable.

        Each set of analyses always has one that's identified as deletable.

        Having found the deletable analysis for one of the two sets,

        delete this analysis and then continue deleting the next analysis in the
        set until they're all deleted.

        Then repeat the process for the second set.

        The procedure therefore consists of a nested loop:


        **Outer loop**:

        * List the analyses for the repository, filtered by tool.

        * Parse this list to find a deletable analysis. If found:

          **Inner loop**:
          * Delete the identified analysis.
          * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.

        The above process assumes that you want to remove all trace of the
        tool's analyses from the GitHub user interface, for the specified
        repository, and it therefore uses the `confirm_delete_url` value.
        Alternatively, you could use the `next_analysis_url` value, which would
        leave the last analysis in each set undeleted to avoid removing a tool's
        analysis entirely.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint with private or public repositories, or the
        `public_repo` scope to use this endpoint with only public repositories.
      operationId: code-scanning/delete-analysis
      tags:
        - - - - code-scanning
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/code-scanning/code-scanning#delete-a-code-scanning-analysis-from-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: analysis_id
          in: path
          description: >-
            The ID of the analysis, as returned from the `GET
            /repos/{owner}/{repo}/code-scanning/analyses` operation.
          required: true
          schema:
            type: integer
        - name: confirm_delete
          in: query
          description: >-
            Allow deletion if the specified analysis is the last in a set. If
            you attempt to delete the final analysis in a set without setting
            this parameter to `true`, you'll get a 400 response with the
            message: `Analysis is last of its type and deletion may result in
            the loss of historical alert data. Please specify confirm_delete.`
          required: false
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-scanning-analysis-deletion'
              examples:
                default-response:
                  $ref: '#/components/examples/code-scanning-analysis-deletion'
        '400':
          $ref: '#/components/responses/bad_request'
        '403':
          $ref: '#/components/responses/code_scanning_forbidden_write'
        '404':
          $ref: '#/components/responses/not_found'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: false
        category: code-scanning
        subcategory: code-scanning
  /repos/{owner}/{repo}/code-scanning/default-setup:
    get:
      summary: Get a code scanning default setup configuration
      description: >-
        Gets a code scanning default setup configuration.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint with private or public repositories, or the
        `public_repo` scope to use this endpoint with only public repositories.
      tags:
        - - - - code-scanning
      operationId: code-scanning/get-default-setup
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/code-scanning/code-scanning#get-a-code-scanning-default-setup-configuration
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-scanning-default-setup'
              examples:
                default:
                  $ref: '#/components/examples/code-scanning-default-setup'
        '403':
          $ref: '#/components/responses/code_scanning_forbidden_read'
        '404':
          $ref: '#/components/responses/not_found'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: code-scanning
        subcategory: code-scanning
    patch:
      summary: Update a code scanning default setup configuration
      description: >-
        Updates a code scanning default setup configuration.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint with private or public repositories, or the
        `public_repo` scope to use this endpoint with only public repositories.
      tags:
        - - - - code-scanning
      operationId: code-scanning/update-default-setup
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/code-scanning/code-scanning#update-a-code-scanning-default-setup-configuration
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/code-scanning-default-setup-update'
            examples:
              default:
                $ref: '#/components/examples/code-scanning-default-setup-update'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty-object'
              examples:
                default:
                  value: null
        '202':
          description: Response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/code-scanning-default-setup-update-response
              examples:
                default:
                  $ref: >-
                    #/components/examples/code-scanning-default-setup-update-response
        '403':
          $ref: '#/components/responses/code_scanning_forbidden_write'
        '404':
          $ref: '#/components/responses/not_found'
        '409':
          $ref: '#/components/responses/code_scanning_conflict'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: code-scanning
        subcategory: code-scanning
  /repos/{owner}/{repo}/code-scanning/sarifs:
    post:
      summary: Upload an analysis as SARIF data
      description: "Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. For troubleshooting information, see \"[Troubleshooting SARIF uploads](https://docs.github.com/enterprise-server@3.9/code-security/code-scanning/troubleshooting-sarif).\"\n\nThere are two places where you can upload code scanning results.\n - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see \"[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests).\"\n - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see \"[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository).\"\n\nYou must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:\n\n```\ngzip -c analysis-data.sarif | base64 -w0\n```\n\nSARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.\nTo get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries. For more information, see \"[SARIF results exceed one or more limits](https://docs.github.com/enterprise-server@3.9/code-security/code-scanning/troubleshooting-sarif/results-exceed-limit).\"\n\n\n| **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |\n|-|::|-|\n| Runs per file                    |         20         |                                                                                  |\n| Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |\n| Rules per run                    |       25,000       |                                                                                  |\n| Tool extensions per run          |        100         |                                                                                  |\n| Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |\n| Location per result\t             |       1,000        | Only 100 locations will be included.                                             |\n| Tags per rule\t                   |         20         | Only 10 tags will be included.                                                   |\n\n\nThe `202 Accepted` response includes an `id` value.\nYou can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.\nFor more information, see \"[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload).\"\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories."
      operationId: code-scanning/upload-sarif
      tags:
        - - - - code-scanning
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/code-scanning/code-scanning#upload-an-analysis-as-sarif-data
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commit_sha:
                  $ref: '#/components/schemas/code-scanning-analysis-commit-sha'
                ref:
                  $ref: '#/components/schemas/code-scanning-ref-full'
                sarif:
                  $ref: '#/components/schemas/code-scanning-analysis-sarif-file'
                checkout_uri:
                  description: >-
                    The base directory used in the analysis, as it appears in
                    the SARIF file.

                    This property is used to convert file paths from absolute to
                    relative, so that alerts can be mapped to their correct
                    location in the repository.
                  example: file:///github/workspace/
                  type: string
                  format: uri
                started_at:
                  description: >-
                    The time that the analysis run began. This is a timestamp in
                    [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
                    `YYYY-MM-DDTHH:MM:SSZ`.
                  format: date-time
                  type: string
                tool_name:
                  description: >-
                    The name of the tool used to generate the code scanning
                    analysis. If this parameter is not used, the tool name
                    defaults to "API". If the uploaded SARIF contains a tool
                    GUID, this will be available for filtering using the
                    `tool_guid` parameter of operations such as `GET
                    /repos/{owner}/{repo}/code-scanning/alerts`.
                  type: string
              additionalProperties: false
              required:
                - commit_sha
                - ref
                - sarif
            examples:
              default:
                value:
                  commit_sha: 4b6472266afd7b471e86085a6659e8c7f2b119da
                  ref: refs/heads/master
                  sarif: >-
                    H4sICMLGdF4AA2V4YW1wbGUuc2FyaWYAvVjdbts2FL7PUxDCijaA/CM7iRNfLkPXYgHSNstumlzQ0pHFVCI1korjFgH2ONtr7Ul2KFmy/mOn6QIkjsjDw0/nfN85NL8dEGL9pNwAImqRObECrWM1H40kXQ2XTAfJIlEgXcE1cD10RTQSVDE10K4aKSqZP1AxuKOIKg1ydJU60jSfSh8Hk6EzHA/vlOCWbfa7B6kYPpj90rlsWCZcmbHP5Bs+4oAWIjQD2SMOeJLh2vIQDnIaQerqXHjw8YIgxohybxAyDsS4cAPKsp03K4RcUs6+Up2D+JXpd8mibKIQN9fM/aMCdbyBujGSSQgVxJtx5qX2d2qUcIweQhEuDQf3GBO6CKHkogx/N3MVCKl/AeVKFuf4y5ubsMGDTj1ep+5I7sgmLIpxtU38hLtmMRGSuCFVyip5eKzs5ydh+LztVL6f2m6oih1BkYiuyQIIJWodxVpERPj4sEiWBNNH8EWT0DMG8EAjzKVHXCrB4FkPu/F64NMk1OeC+2yZSNoBOoR7CC0EzYWGbm+xFDFIzbI011+cLjfZtyJkmMZfumAh02uL3NpV2y+MZ6RAjxibyKrNxxJcVjANSb4eBGwZ1M0KsuyR2poLr5rMl8vaDSeVn6eTWEO2j2xIEcmhwlTKNOi4GMOI8gfuZYkvJ7b4v5Tiumyz7RnHeodFzpS8ASIZCH/AYdWi2z3sG8JtFxJ6fF9yR9CdifBr9Pd6d5V2+zbJKjjCFGGmsHuYFy2ytJq9tUxcLSRSQecppOGKrpUxYfxefMEFK+wOGa4hudQByBVT0L+EKtyACxnRsABhEx1QjVDs1KNI9MbpnhqfE45B6FJvu3hRu5VRU9MhZLmK7fqkKyQSTHNoyMqUFMqXCV3CwAeqEwmVokraK8IuBaGvHjQ0gMYrKjnjyw7uk9uD8tgmsBbFMPnU1bV2ZhkJNkuolUiWys3UPWzs5aaIUz9TBe8zMb+6+nT+6fLy91dlE3xzeDDT4zYszb0bW6NjJd0Rvn2EnLvWLFSdKPpBzInzfRgu8ETyMcH8nIfMnJCeC2PyfTA+UKngcnGH7Hw2hGkVQs5YlIRCtdWZYQ4/73es2JlxkfViOEIhoWJq5Oo6UBBfiKIqFBWhiE3jJGbFwVoxBHTRSuIS67sMeplei24X20shLjG+8gqbKC/bESiNMC+wd5q5id0yeS7CJEqXzmrTWNq3k05l84P6f4/bEmXFJjI0fIt1BGQssUnUDkBYeVhE5TqPnMH3jqogDcP0zKcTgLPTMSzOjhbjuVOmW23l1fYNStulfo6sXlFsGLhbDy5RECPRYGCTgOj2bd4nUQEivEd0H7KKYxqnEhFohuur3a3UPskbH/+Yg0+M5P2MHRJu3ziHh3Z2NCrWt3XF1rWTw8Ne/pfbWYXnDSE0SNZQQt1i18q7te2vOhu7ehWuvVyeu0wbLZi24mhoo6aOOTltzG/lgdVvVoXQq5V+pewkFIzL8fjEcadT55jOjpzFzHuOTtDNrMkJPMVQDd7F09RID72O/UPZ0tmctqZ7kWX6EmSZnDpP8GU67SXM8XE3YSrxbKsx6UReZ4y6n/FVZfJjs9Z7stma75W5yQtkzjk5eSJxk1lv4o7+j8TlhaJ2lsKWZO6lruDPBLib3x5ZN/KGWzZ+pn///evv7OOf4iIBv3oY9L/l1wiJ9p0Tc+F1zZnOE9NxXWEus6IQhr5pMfoqxi8WPsuu0azsns4UC6WzNzHIzbeEx4P/AJ3SefgcFAAA
      responses:
        '202':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-scanning-sarifs-receipt'
              examples:
                default:
                  $ref: '#/components/examples/code-scanning-sarif-upload'
        '400':
          description: Bad Request if the sarif field is invalid
        '403':
          $ref: '#/components/responses/code_scanning_forbidden_write'
        '404':
          $ref: '#/components/responses/not_found'
        '413':
          description: Payload Too Large if the sarif field is too large
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: false
        category: code-scanning
        subcategory: code-scanning
  /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}:
    get:
      summary: Get information about a SARIF upload
      description: >-
        Gets information about a SARIF upload, including the status and the URL
        of the analysis that was uploaded so that you can retrieve details of
        the analysis. For more information, see "[Get a code scanning analysis
        for a
        repository](/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository)."

        OAuth app tokens and personal access tokens (classic) need the
        `security_events` scope to use this endpoint with private or public
        repositories, or the `public_repo` scope to use this endpoint with only
        public repositories.
      operationId: code-scanning/get-sarif
      tags:
        - - - - code-scanning
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: sarif_id
          description: The SARIF ID obtained after uploading.
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-scanning-sarifs-status'
              examples:
                default:
                  $ref: '#/components/examples/code-scanning-sarif-upload-status'
        '403':
          $ref: '#/components/responses/code_scanning_forbidden_read'
        '404':
          description: Not Found if the sarif id does not match any upload
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: false
        category: code-scanning
        subcategory: code-scanning
  /repos/{owner}/{repo}/codeowners/errors:
    get:
      summary: List CODEOWNERS errors
      description: >-
        List any syntax errors that are detected in the CODEOWNERS

        file.


        For more information about the correct CODEOWNERS syntax,

        see "[About code
        owners](https://docs.github.com/enterprise-server@3.9/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
      tags:
        - - - - repos
      operationId: repos/codeowners-errors
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#list-codeowners-errors
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: ref
          description: >-
            A branch, tag or commit name used to determine which version of the
            CODEOWNERS file to use. Default: the repository's default branch
            (e.g. `main`)
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/codeowners-errors'
              examples:
                default:
                  $ref: '#/components/examples/codeowners-errors'
        '404':
          description: Resource not found
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        previews: []
        category: repos
        subcategory: repos
  /repos/{owner}/{repo}/collaborators:
    get:
      summary: List repository collaborators
      description: >-
        For organization-owned repositories, the list of collaborators includes
        outside collaborators, organization members that are direct
        collaborators, organization members with access through team
        memberships, organization members with access through default
        organization permissions, and organization owners.

        Organization members with write, maintain, or admin privileges on the
        organization-owned repository can use this endpoint.


        Team members will include the members of child teams.


        The authenticated user must have push access to the repository to use
        this endpoint.


        OAuth app tokens and personal access tokens (classic) need the
        `read:org` and `repo` scopes to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/list-collaborators
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/collaborators/collaborators#list-repository-collaborators
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: affiliation
          description: >-
            Filter collaborators returned by their affiliation. `outside` means
            all outside collaborators of an organization-owned repository.
            `direct` means all collaborators with permissions to an
            organization-owned repository, regardless of organization membership
            status. `all` means all collaborators the authenticated user can
            see.
          in: query
          required: false
          schema:
            type: string
            enum:
              - outside
              - direct
              - all
            default: all
        - name: permission
          description: >-
            Filter collaborators by the permissions they have on the repository.
            If not specified, all collaborators will be returned.
          in: query
          required: false
          schema:
            type: string
            enum:
              - pull
              - triage
              - push
              - maintain
              - admin
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/collaborator'
              examples:
                default:
                  $ref: '#/components/examples/collaborator-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: collaborators
        subcategory: collaborators
  /repos/{owner}/{repo}/collaborators/{username}:
    get:
      summary: Check if a user is a repository collaborator
      description: >-
        For organization-owned repositories, the list of collaborators includes
        outside collaborators, organization members that are direct
        collaborators, organization members with access through team
        memberships, organization members with access through default
        organization permissions, and organization owners.


        Team members will include the members of child teams.


        The authenticated user must have push access to the repository to use
        this endpoint.


        OAuth app tokens and personal access tokens (classic) need the
        `read:org` and `repo` scopes to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/check-collaborator
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/collaborators/collaborators#check-if-a-user-is-a-repository-collaborator
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: Response if user is a collaborator
        '404':
          description: Not Found if user is not a collaborator
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: collaborators
        subcategory: collaborators
    put:
      summary: Add a repository collaborator
      description: >-
        This endpoint triggers
        [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        Creating content too quickly using this endpoint may result in secondary
        rate limiting. For more information, see "[Rate limits for the
        API](https://docs.github.com/enterprise-server@3.9/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
        and "[Best practices for using the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."


        Adding an outside collaborator may be restricted by enterprise
        administrators. For more information, see "[Enforcing repository
        management policies in your
        enterprise](https://docs.github.com/enterprise-server@3.9/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."


        For more information on permission levels, see "[Repository permission
        levels for an
        organization](https://docs.github.com/enterprise-server@3.9/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
        There are restrictions on which permissions can be granted to
        organization members when an organization base role is in place. In this
        case, the permission being given must be equal to or higher than the org
        base permission. Otherwise, the request will fail with:


        ```

        Cannot assign {member} permission of {role name}

        ```


        Note that, if you choose not to pass any parameters, you'll need to set
        `Content-Length` to zero when calling out to this endpoint. For more
        information, see "[HTTP
        method](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#http-method)."


        **Updating an existing collaborator's permission level**


        The endpoint can also be used to change the permissions of an existing
        collaborator without first removing and re-adding the collaborator. To
        change the permissions, use the same endpoint and pass a different
        `permission` parameter. The response will be a `204`, with no other
        indication that the permission level changed.
      tags:
        - - - - repos
      operationId: repos/add-collaborator
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/collaborators/collaborators#add-a-repository-collaborator
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/username'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  type: string
                  description: >-
                    The permission to grant the collaborator. **Only valid on
                    organization-owned repositories.**
                  default: push
            examples:
              new-invitation-is-created:
                summary: Add a collaborator with triage permissions
                value:
                  permission: triage
      responses:
        '204':
          description: >-
            Response when:

            - an existing collaborator is added as a collaborator

            - an organization member is added as an individual collaborator

            - an existing team member (whose team is also a repository
            collaborator) is added as an individual collaborator
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: collaborators
        subcategory: collaborators
    delete:
      summary: Remove a repository collaborator
      description: >-
        Removes a collaborator from a repository.


        To use this endpoint, the authenticated user must either be an
        administrator of the repository or target themselves for removal.


        This endpoint also:

        - Cancels any outstanding invitations

        - Unasigns the user from any issues

        - Removes access to organization projects if the user is not an
        organization member and is not a collaborator on any other organization
        repositories.

        - Unstars the repository

        - Updates access permissions to packages


        Removing a user as a collaborator has the following effects on forks:
         - If the user had access to a fork through their membership to this repository, the user will also be removed from the fork.
         - If the user had their own fork of the repository, the fork will be deleted.
         - If the user still has read access to the repository, open pull requests by this user from a fork will be denied.

        **Note**: A user can still have access to the repository through
        organization permissions like base repository permissions.


        Although the API responds immediately, the additional permission updates
        might take some extra time to complete in the background.


        For more information on fork permissions, see "[About permissions and
        visibility of
        forks](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/working-with-forks/about-permissions-and-visibility-of-forks)".
      tags:
        - - - - repos
      operationId: repos/remove-collaborator
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/collaborators/collaborators#remove-a-repository-collaborator
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/username'
      responses:
        '204':
          description: No Content when collaborator was removed from the repository.
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: collaborators
        subcategory: collaborators
  /repos/{owner}/{repo}/collaborators/{username}/permission:
    get:
      summary: Get repository permissions for a user
      description: >-
        Checks the repository permission of a collaborator. The possible
        repository

        permissions are `admin`, `write`, `read`, and `none`.


        *Note*: The `permission` attribute provides the legacy base roles of
        `admin`, `write`, `read`, and `none`, where the

        `maintain` role is mapped to `write` and the `triage` role is mapped to
        `read`. To determine the role assigned to the

        collaborator, see the `role_name` attribute, which will provide the full
        role name, including custom roles. The

        `permissions` hash can also be used to determine which base level of
        access the collaborator has to the repository.
      tags:
        - - - - repos
      operationId: repos/get-collaborator-permission-level
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/collaborators/collaborators#get-repository-permissions-for-a-user
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: if user has admin permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repository-collaborator-permission'
              examples:
                response-if-user-has-admin-permissions:
                  $ref: >-
                    #/components/examples/repository-collaborator-permission-response-if-user-has-admin-permissions
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: collaborators
        subcategory: collaborators
  /repos/{owner}/{repo}/comments:
    get:
      summary: List commit comments for a repository
      description: >-
        Lists the commit comments for a specified repository. Comments are
        ordered by ascending ID.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - repos
      operationId: repos/list-commit-comments-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/commits/comments#list-commit-comments-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/commit-comment'
              examples:
                default:
                  $ref: '#/components/examples/commit-comment-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: commits
        subcategory: comments
  /repos/{owner}/{repo}/comments/{comment_id}:
    get:
      summary: Get a commit comment
      description: >-
        Gets a specified commit comment.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - repos
      operationId: repos/get-commit-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/commits/comments#get-a-commit-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commit-comment'
              examples:
                default:
                  $ref: '#/components/examples/commit-comment'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: commits
        subcategory: comments
    patch:
      summary: Update a commit comment
      description: >-
        Updates the contents of a specified commit comment.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - repos
      operationId: repos/update-commit-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/commits/comments#update-a-commit-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The contents of the comment
              required:
                - body
            examples:
              default:
                value:
                  body: Nice change
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commit-comment'
              examples:
                default:
                  $ref: '#/components/examples/commit-comment-2'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: commits
        subcategory: comments
    delete:
      summary: Delete a commit comment
      description: ''
      tags:
        - - - - repos
      operationId: repos/delete-commit-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/commits/comments#delete-a-commit-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
      responses:
        '204':
          description: Response
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: commits
        subcategory: comments
  /repos/{owner}/{repo}/comments/{comment_id}/reactions:
    get:
      summary: List reactions for a commit comment
      description: >-
        List the reactions to a [commit
        comment](https://docs.github.com/enterprise-server@3.9/rest/commits/comments#get-a-commit-comment).
      tags:
        - - - - reactions
      operationId: reactions/list-for-commit-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#list-reactions-for-a-commit-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
        - name: content
          description: >-
            Returns a single [reaction
            type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions).
            Omit this parameter to list all reactions to a commit comment.
          in: query
          required: false
          schema:
            type: string
            enum:
              - '+1'
              - '-1'
              - laugh
              - confused
              - heart
              - hooray
              - rocket
              - eyes
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
    post:
      summary: Create reaction for a commit comment
      description: >-
        Create a reaction to a [commit
        comment](https://docs.github.com/enterprise-server@3.9/rest/commits/comments#get-a-commit-comment).
        A response with an HTTP `200` status means that you already added the
        reaction type to this commit comment.
      tags:
        - - - - reactions
      operationId: reactions/create-for-commit-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#create-reaction-for-a-commit-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: >-
                    The [reaction
                    type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions)
                    to add to the commit comment.
                  enum:
                    - '+1'
                    - '-1'
                    - laugh
                    - confused
                    - heart
                    - hooray
                    - rocket
                    - eyes
              required:
                - content
            examples:
              default:
                value:
                  content: heart
      responses:
        '200':
          description: Reaction exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
        '201':
          description: Reaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
  /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}:
    delete:
      summary: Delete a commit comment reaction
      description: >-
        **Note:** You can also specify a repository by `repository_id` using the
        route `DELETE
        /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.


        Delete a reaction to a [commit
        comment](https://docs.github.com/enterprise-server@3.9/rest/commits/comments#get-a-commit-comment).
      tags:
        - - - - reactions
      operationId: reactions/delete-for-commit-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#delete-a-commit-comment-reaction
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
        - $ref: '#/components/parameters/reaction-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
  /repos/{owner}/{repo}/commits:
    get:
      summary: List commits
      description: >-
        **Signature verification object**


        The response will include a `verification` object that describes the
        result of verifying the commit's signature. The following fields are
        included in the `verification` object:


        | Name | Type | Description |

        | - | - | -- |

        | `verified` | `boolean` | Indicates whether GitHub considers the
        signature in this commit to be verified. |

        | `reason` | `string` | The reason for verified value. Possible values
        and their meanings are enumerated in table below. |

        | `signature` | `string` | The signature that was extracted from the
        commit. |

        | `payload` | `string` | The value that was signed. |


        These are the possible values for `reason` in the `verification` object:


        | Value | Description |

        | -- | -- |

        | `expired_key` | The key that made the signature is expired. |

        | `not_signing_key` | The "signing" flag is not among the usage flags in
        the GPG key that made the signature. |

        | `gpgverify_error` | There was an error communicating with the
        signature verification service. |

        | `gpgverify_unavailable` | The signature verification service is
        currently unavailable. |

        | `unsigned` | The object does not include a signature. |

        | `unknown_signature_type` | A non-PGP signature was found in the
        commit. |

        | `no_user` | No user was associated with the `committer` email address
        in the commit. |

        | `unverified_email` | The `committer` email address in the commit was
        associated with a user, but the email address is not verified on their
        account. |

        | `bad_email` | The `committer` email address in the commit is not
        included in the identities of the PGP key that made the signature. |

        | `unknown_key` | The key that made the signature has not been
        registered with any user's account. |

        | `malformed_signature` | There was an error parsing the signature. |

        | `invalid` | The signature could not be cryptographically verified
        using the key whose key-id was found in the signature. |

        | `valid` | None of the above errors applied, so the signature is
        considered to be verified. |
      tags:
        - - - - repos
      operationId: repos/list-commits
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/commits/commits#list-commits
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: sha
          description: >-
            SHA or branch to start listing commits from. Default: the
            repository’s default branch (usually `main`).
          in: query
          required: false
          schema:
            type: string
        - name: path
          description: Only commits containing this file path will be returned.
          in: query
          required: false
          schema:
            type: string
        - name: author
          description: GitHub username or email address to use to filter by commit author.
          in: query
          required: false
          schema:
            type: string
        - name: committer
          description: >-
            GitHub username or email address to use to filter by commit
            committer.
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/since'
        - name: until
          description: >-
            Only commits before this date will be returned. This is a timestamp
            in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
            `YYYY-MM-DDTHH:MM:SSZ`.
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/commit'
              examples:
                default:
                  $ref: '#/components/examples/commit-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '400':
          $ref: '#/components/responses/bad_request'
        '404':
          $ref: '#/components/responses/not_found'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/internal_error'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: commits
        subcategory: commits
  /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head:
    get:
      summary: List branches for HEAD commit
      description: >-
        Protected branches are available in public repositories with GitHub Free
        and GitHub Free for organizations, and in public and private
        repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and
        GitHub Enterprise Server. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Returns all branches where the given commit SHA is the HEAD, or latest
        commit for the branch.
      tags:
        - - - - repos
      operationId: repos/list-branches-for-head-commit
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/commits/commits#list-branches-for-head-commit
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/commit-sha'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/branch-short'
              examples:
                default:
                  $ref: '#/components/examples/branch-short-items'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: commits
        subcategory: commits
  /repos/{owner}/{repo}/commits/{commit_sha}/comments:
    get:
      summary: List commit comments
      description: >-
        Lists the comments for a specified commit.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - repos
      operationId: repos/list-comments-for-commit
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/commits/comments#list-commit-comments
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/commit-sha'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/commit-comment'
              examples:
                default:
                  $ref: '#/components/examples/commit-comment-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: commits
        subcategory: comments
    post:
      summary: Create a commit comment
      description: >-
        Create a comment for a commit using its `:commit_sha`.


        This endpoint triggers
        [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        Creating content too quickly using this endpoint may result in secondary
        rate limiting. For more information, see "[Rate limits for the
        API](https://docs.github.com/enterprise-server@3.9/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
        and "[Best practices for using the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - repos
      operationId: repos/create-commit-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/commits/comments#create-a-commit-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/commit-sha'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The contents of the comment.
                path:
                  type: string
                  description: Relative path of the file to comment on.
                position:
                  type: integer
                  description: Line index in the diff to comment on.
                line:
                  type: integer
                  description: >-
                    **Deprecated**. Use **position** parameter instead. Line
                    number in the file to comment on.
              required:
                - body
            examples:
              default:
                value:
                  body: Great stuff
                  path: file1.txt
                  position: 4
                  line: 1
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commit-comment'
              examples:
                default:
                  $ref: '#/components/examples/commit-comment'
          headers:
            Location:
              example: https://api.github.com/repos/octocat/Hello-World/comments/1
              schema:
                type: string
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: commits
        subcategory: comments
  /repos/{owner}/{repo}/commits/{commit_sha}/pulls:
    get:
      summary: List pull requests associated with a commit
      description: >-
        Lists the merged pull request that introduced the commit to the
        repository. If the commit is not present in the default branch, will
        only return open pull requests associated with the commit.


        To list the open or merged pull requests associated with a branch, you
        can set the `commit_sha` parameter to the branch name.
      tags:
        - - - - repos
      operationId: repos/list-pull-requests-associated-with-commit
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/commits/commits#list-pull-requests-associated-with-a-commit
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/commit-sha'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pull-request-simple'
              examples:
                default:
                  $ref: '#/components/examples/pull-request-simple-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: commits
        subcategory: commits
  /repos/{owner}/{repo}/commits/{ref}:
    get:
      summary: Get a commit
      description: >-
        Returns the contents of a single commit reference. You must have `read`
        access for the repository to use this endpoint.


        **Note:** If there are more than 300 files in the commit diff and the
        default JSON media type is requested, the response will include
        pagination link headers for the remaining files, up to a limit of 3000
        files. Each page contains the static commit information, and the only
        changes are to the file listing.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
        Pagination query parameters are not supported for these media types.


        - **`application/vnd.github.diff`**: Returns the diff of the commit.
        Larger diffs may time out and return a 5xx status code.

        - **`application/vnd.github.patch`**: Returns the patch of the commit.
        Diffs with binary data will have no `patch` property. Larger diffs may
        time out and return a 5xx status code.

        - **`application/vnd.github.sha`**: Returns the commit's SHA-1 hash. You
        can use this endpoint to check if a remote reference's SHA-1 hash is the
        same as your local reference's SHA-1 hash by providing the local SHA-1
        reference as the ETag.


        **Signature verification object**


        The response will include a `verification` object that describes the
        result of verifying the commit's signature. The following fields are
        included in the `verification` object:


        | Name | Type | Description |

        | - | - | -- |

        | `verified` | `boolean` | Indicates whether GitHub considers the
        signature in this commit to be verified. |

        | `reason` | `string` | The reason for verified value. Possible values
        and their meanings are enumerated in table below. |

        | `signature` | `string` | The signature that was extracted from the
        commit. |

        | `payload` | `string` | The value that was signed. |


        These are the possible values for `reason` in the `verification` object:


        | Value | Description |

        | -- | -- |

        | `expired_key` | The key that made the signature is expired. |

        | `not_signing_key` | The "signing" flag is not among the usage flags in
        the GPG key that made the signature. |

        | `gpgverify_error` | There was an error communicating with the
        signature verification service. |

        | `gpgverify_unavailable` | The signature verification service is
        currently unavailable. |

        | `unsigned` | The object does not include a signature. |

        | `unknown_signature_type` | A non-PGP signature was found in the
        commit. |

        | `no_user` | No user was associated with the `committer` email address
        in the commit. |

        | `unverified_email` | The `committer` email address in the commit was
        associated with a user, but the email address is not verified on their
        account. |

        | `bad_email` | The `committer` email address in the commit is not
        included in the identities of the PGP key that made the signature. |

        | `unknown_key` | The key that made the signature has not been
        registered with any user's account. |

        | `malformed_signature` | There was an error parsing the signature. |

        | `invalid` | The signature could not be cryptographically verified
        using the key whose key-id was found in the signature. |

        | `valid` | None of the above errors applied, so the signature is
        considered to be verified. |
      tags:
        - - - - repos
      operationId: repos/get-commit
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/commits/commits#get-a-commit
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/commit-ref'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commit'
              examples:
                default:
                  $ref: '#/components/examples/commit'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
        '500':
          $ref: '#/components/responses/internal_error'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: commits
        subcategory: commits
  /repos/{owner}/{repo}/commits/{ref}/check-runs:
    get:
      summary: List check runs for a Git reference
      description: >-
        Lists check runs for a commit ref. The `ref` can be a SHA, branch name,
        or a tag name.


        **Note:** The endpoints to manage checks only look for pushes in the
        repository where the check suite or check run were created. Pushes to a
        branch in a forked repository are not detected and return an empty
        `pull_requests` array.


        If there are more than 1000 check suites on a single git reference, this
        endpoint will limit check runs to the 1000 most recent check suites. To
        iterate over all possible check runs, use the [List check suites for a
        Git
        reference](https://docs.github.com/enterprise-server@3.9/rest/reference/checks#list-check-suites-for-a-git-reference)
        endpoint and provide the `check_suite_id` parameter to the [List check
        runs in a check
        suite](https://docs.github.com/enterprise-server@3.9/rest/reference/checks#list-check-runs-in-a-check-suite)
        endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint on a private repository.
      tags:
        - - - - checks
      operationId: checks/list-for-ref
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/checks/runs#list-check-runs-for-a-git-reference
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/commit-ref'
        - $ref: '#/components/parameters/check-name'
        - $ref: '#/components/parameters/status'
        - name: filter
          description: >-
            Filters check runs by their `completed_at` timestamp. `latest`
            returns the most recent check runs.
          in: query
          required: false
          schema:
            type: string
            enum:
              - latest
              - all
            default: latest
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
        - name: app_id
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - check_runs
                properties:
                  total_count:
                    type: integer
                  check_runs:
                    type: array
                    items:
                      $ref: '#/components/schemas/check-run'
              examples:
                default:
                  $ref: '#/components/examples/check-run-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: checks
        subcategory: runs
  /repos/{owner}/{repo}/commits/{ref}/check-suites:
    get:
      summary: List check suites for a Git reference
      description: >-
        Lists check suites for a commit `ref`. The `ref` can be a SHA, branch
        name, or a tag name.


        **Note:** The endpoints to manage checks only look for pushes in the
        repository where the check suite or check run were created. Pushes to a
        branch in a forked repository are not detected and return an empty
        `pull_requests` array and a `null` value for `head_branch`.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint on a private repository.
      tags:
        - - - - checks
      operationId: checks/list-suites-for-ref
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/checks/suites#list-check-suites-for-a-git-reference
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/commit-ref'
        - name: app_id
          description: Filters check suites by GitHub App `id`.
          in: query
          required: false
          schema:
            type: integer
          example: 1
        - $ref: '#/components/parameters/check-name'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - check_suites
                properties:
                  total_count:
                    type: integer
                  check_suites:
                    type: array
                    items:
                      $ref: '#/components/schemas/check-suite'
              examples:
                default:
                  $ref: '#/components/examples/check-suite-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: checks
        subcategory: suites
  /repos/{owner}/{repo}/commits/{ref}/status:
    get:
      summary: Get the combined status for a specific reference
      description: >-
        Users with pull access in a repository can access a combined view of
        commit statuses for a given ref. The ref can be a SHA, a branch name, or
        a tag name.



        Additionally, a combined `state` is returned. The `state` is one of:


        *   **failure** if any of the contexts report as `error` or `failure`

        *   **pending** if there are no statuses or a context is `pending`

        *   **success** if the latest status for all contexts is `success`
      tags:
        - - - - repos
      operationId: repos/get-combined-status-for-ref
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/commits/statuses#get-the-combined-status-for-a-specific-reference
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/commit-ref'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/combined-commit-status'
              examples:
                default:
                  $ref: '#/components/examples/combined-commit-status'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: commits
        subcategory: statuses
  /repos/{owner}/{repo}/commits/{ref}/statuses:
    get:
      summary: List commit statuses for a reference
      description: >-
        Users with pull access in a repository can view commit statuses for a
        given ref. The ref can be a SHA, a branch name, or a tag name. Statuses
        are returned in reverse chronological order. The first status in the
        list will be the latest one.


        This resource is also available via a legacy route: `GET
        /repos/:owner/:repo/statuses/:ref`.
      tags:
        - - - - repos
      operationId: repos/list-commit-statuses-for-ref
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/commits/statuses#list-commit-statuses-for-a-reference
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/commit-ref'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/status'
              examples:
                default:
                  $ref: '#/components/examples/status-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '301':
          $ref: '#/components/responses/moved_permanently'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: commits
        subcategory: statuses
  /repos/{owner}/{repo}/compare/{basehead}:
    get:
      summary: Compare two commits
      description: >-
        Compares two commits against one another. You can compare refs (branches
        or tags) and commit SHAs in the same repository, or you can compare refs
        and commit SHAs that exist in different repositories within the same
        repository network, including fork branches. For more information about
        how to view a repository's network, see "[Understanding connections
        between
        repositories](https://docs.github.com/enterprise-server@3.9/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."


        This endpoint is equivalent to running the `git log BASE..HEAD` command,
        but it returns commits in a different order. The `git log BASE..HEAD`
        command returns commits in reverse chronological order, whereas the API
        returns commits in chronological order.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.diff`**: Returns the diff of the commit.

        - **`application/vnd.github.patch`**: Returns the patch of the commit.
        Diffs with binary data will have no `patch` property.


        The API response includes details about the files that were changed
        between the two commits. This includes the status of the change (if a
        file was added, removed, modified, or renamed), and details of the
        change itself. For example, files with a `renamed` status have a
        `previous_filename` field showing the previous filename of the file, and
        files with a `modified` status have a `patch` field showing the changes
        made to the file.


        When calling this endpoint without any paging parameter (`per_page` or
        `page`), the returned list is limited to 250 commits, and the last
        commit in the list is the most recent of the entire comparison.


        **Working with large comparisons**


        To process a response with a large number of commits, use a query
        parameter (`per_page` or `page`) to paginate the results. When using
        pagination:


        - The list of changed files is only shown on the first page of results,
        but it includes all changed files for the entire comparison.

        - The results are returned in chronological order, but the last commit
        in the returned list may not be the most recent one in the entire set if
        there are more pages of results.


        For more information on working with pagination, see "[Using pagination
        in the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/using-pagination-in-the-rest-api)."


        **Signature verification object**


        The response will include a `verification` object that describes the
        result of verifying the commit's signature. The `verification` object
        includes the following fields:


        | Name | Type | Description |

        | - | - | -- |

        | `verified` | `boolean` | Indicates whether GitHub considers the
        signature in this commit to be verified. |

        | `reason` | `string` | The reason for verified value. Possible values
        and their meanings are enumerated in table below. |

        | `signature` | `string` | The signature that was extracted from the
        commit. |

        | `payload` | `string` | The value that was signed. |


        These are the possible values for `reason` in the `verification` object:


        | Value | Description |

        | -- | -- |

        | `expired_key` | The key that made the signature is expired. |

        | `not_signing_key` | The "signing" flag is not among the usage flags in
        the GPG key that made the signature. |

        | `gpgverify_error` | There was an error communicating with the
        signature verification service. |

        | `gpgverify_unavailable` | The signature verification service is
        currently unavailable. |

        | `unsigned` | The object does not include a signature. |

        | `unknown_signature_type` | A non-PGP signature was found in the
        commit. |

        | `no_user` | No user was associated with the `committer` email address
        in the commit. |

        | `unverified_email` | The `committer` email address in the commit was
        associated with a user, but the email address is not verified on their
        account. |

        | `bad_email` | The `committer` email address in the commit is not
        included in the identities of the PGP key that made the signature. |

        | `unknown_key` | The key that made the signature has not been
        registered with any user's account. |

        | `malformed_signature` | There was an error parsing the signature. |

        | `invalid` | The signature could not be cryptographically verified
        using the key whose key-id was found in the signature. |

        | `valid` | None of the above errors applied, so the signature is
        considered to be verified. |
      tags:
        - - - - repos
      operationId: repos/compare-commits
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/commits/commits#compare-two-commits
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per-page'
        - name: basehead
          description: >-
            The base branch and head branch to compare. This parameter expects
            the format `BASE...HEAD`. Both must be branch names in `repo`. To
            compare with a branch that exists in a different repository in the
            same network as `repo`, the `basehead` parameter expects the format
            `USERNAME:BASE...USERNAME:HEAD`.
          in: path
          required: true
          x-multi-segment: true
          schema:
            type: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commit-comparison'
              examples:
                default:
                  $ref: '#/components/examples/commit-comparison'
        '404':
          $ref: '#/components/responses/not_found'
        '500':
          $ref: '#/components/responses/internal_error'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: commits
        subcategory: commits
  /repos/{owner}/{repo}/contents/{path}:
    get:
      summary: Get repository content
      description: >-
        Gets the contents of a file or directory in a repository. Specify the
        file path or directory with the `path` parameter. If you omit the `path`
        parameter, you will receive the contents of the repository's root
        directory.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw file contents
        for files and symlinks.

        - **`application/vnd.github.html+json`**: Returns the file contents in
        HTML. Markup languages are rendered to HTML using GitHub's open-source
        [Markup library](https://github.com/github/markup).

        - **`application/vnd.github.object+json`**: Returns the contents in a
        consistent object format regardless of the content type. For example,
        instead of an array of objects for a directory, the response will be an
        object with an `entries` attribute containing the array of objects.


        If the content is a directory, the response will be an array of objects,
        one object for each item in the directory. When listing the contents of
        a directory, submodules have their "type" specified as "file".
        Logically, the value _should_ be "submodule". This behavior exists [for
        backwards compatibility purposes](https://git.io/v1YCW). In the next
        major version of the API, the type will be returned as "submodule".


        If the content is a symlink and the symlink's target is a normal file in
        the repository, then the API responds with the content of the file.
        Otherwise, the API responds with an object describing the symlink
        itself.


        If the content is a submodule, the `submodule_git_url` field identifies
        the location of the submodule repository, and the `sha` identifies a
        specific commit within the submodule repository. Git uses the given URL
        when cloning the submodule repository, and checks out the submodule at
        that specific commit. If the submodule repository is not hosted on
        github.com, the Git URLs (`git_url` and `_links["git"]`) and the
        github.com URLs (`html_url` and `_links["html"]`) will have null values.


        **Notes**:


        - To get a repository's contents recursively, you can [recursively get
        the
        tree](https://docs.github.com/enterprise-server@3.9/rest/git/trees#get-a-tree).

        - This API has an upper limit of 1,000 files for a directory. If you
        need to retrieve

        more files, use the [Git Trees
        API](https://docs.github.com/enterprise-server@3.9/rest/git/trees#get-a-tree).

        - Download URLs expire and are meant to be used just once. To ensure the
        download URL does not expire, please use the contents API to obtain a
        fresh download URL for each download.

        - If the requested file's size is:
          - 1 MB or smaller: All features of this endpoint are supported.
          - Between 1-100 MB: Only the `raw` or `object` custom media types are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty
        string and the `encoding` field will be `"none"`. To get the contents of
        these larger files, use the `raw` media type.
          - Greater than 100 MB: This endpoint is not supported.
      tags:
        - - - - repos
      operationId: repos/get-content
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/contents#get-repository-content
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: path
          description: path parameter
          in: path
          required: true
          schema:
            type: string
          x-multi-segment: true
        - name: ref
          description: >-
            The name of the commit/branch/tag. Default: the repository’s default
            branch.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Response
          content:
            application/vnd.github.object:
              schema:
                $ref: '#/components/schemas/content-tree'
              examples:
                response-if-content-is-a-file:
                  $ref: >-
                    #/components/examples/content-file-response-if-content-is-a-file
                response-if-content-is-a-directory:
                  $ref: >-
                    #/components/examples/content-file-response-if-content-is-a-directory-object
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/content-directory'
                  - $ref: '#/components/schemas/content-file'
                  - $ref: '#/components/schemas/content-symlink'
                  - $ref: '#/components/schemas/content-submodule'
              examples:
                response-if-content-is-a-file:
                  $ref: >-
                    #/components/examples/content-file-response-if-content-is-a-file
                response-if-content-is-a-directory:
                  $ref: >-
                    #/components/examples/content-file-response-if-content-is-a-directory
                response-if-content-is-a-symlink:
                  $ref: >-
                    #/components/examples/content-file-response-if-content-is-a-symlink
                response-if-content-is-a-submodule:
                  $ref: >-
                    #/components/examples/content-file-response-if-content-is-a-submodule
        '302':
          $ref: '#/components/responses/found'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: contents
    put:
      summary: Create or update file contents
      description: >-
        Creates a new file or replaces an existing file in a repository.


        **Note:** If you use this endpoint and the "[Delete a
        file](https://docs.github.com/enterprise-server@3.9/rest/repos/contents/#delete-a-file)"
        endpoint in parallel, the concurrent requests will conflict and you will
        receive errors. You must use these endpoints serially instead.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint. The `workflow` scope is also required in
        order to modify files in the `.github/workflows` directory.
      tags:
        - - - - repos
      operationId: repos/create-or-update-file-contents
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/contents#create-or-update-file-contents
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: path
          description: path parameter
          in: path
          required: true
          schema:
            type: string
          x-multi-segment: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: The commit message.
                content:
                  type: string
                  description: The new file content, using Base64 encoding.
                sha:
                  type: string
                  description: >-
                    **Required if you are updating a file**. The blob SHA of the
                    file being replaced.
                branch:
                  type: string
                  description: 'The branch name. Default: the repository’s default branch.'
                committer:
                  type: object
                  description: >-
                    The person that committed the file. Default: the
                    authenticated user.
                  properties:
                    name:
                      type: string
                      description: >-
                        The name of the author or committer of the commit.
                        You'll receive a `422` status code if `name` is omitted.
                    email:
                      type: string
                      description: >-
                        The email of the author or committer of the commit.
                        You'll receive a `422` status code if `email` is
                        omitted.
                    date:
                      type: string
                      example: '"2013-01-05T13:13:22+05:00"'
                  required:
                    - name
                    - email
                author:
                  type: object
                  description: >-
                    The author of the file. Default: The `committer` or the
                    authenticated user if you omit `committer`.
                  properties:
                    name:
                      type: string
                      description: >-
                        The name of the author or committer of the commit.
                        You'll receive a `422` status code if `name` is omitted.
                    email:
                      type: string
                      description: >-
                        The email of the author or committer of the commit.
                        You'll receive a `422` status code if `email` is
                        omitted.
                    date:
                      type: string
                      example: '"2013-01-15T17:13:22+05:00"'
                  required:
                    - name
                    - email
              required:
                - message
                - content
            examples:
              example-for-creating-a-file:
                summary: Example for creating a file
                value:
                  message: my commit message
                  committer:
                    name: Monalisa Octocat
                    email: octocat@github.com
                  content: bXkgbmV3IGZpbGUgY29udGVudHM=
              example-for-updating-a-file:
                summary: Example for updating a file
                value:
                  message: a new commit message
                  committer:
                    name: Monalisa Octocat
                    email: octocat@github.com
                  content: bXkgdXBkYXRlZCBmaWxlIGNvbnRlbnRz
                  sha: 95b966ae1c166bd92f8ae7d1c313e738c731dfc3
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file-commit'
              examples:
                example-for-updating-a-file:
                  $ref: >-
                    #/components/examples/file-commit-example-for-updating-a-file
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file-commit'
              examples:
                example-for-creating-a-file:
                  $ref: >-
                    #/components/examples/file-commit-example-for-creating-a-file
        '404':
          $ref: '#/components/responses/not_found'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: contents
    delete:
      summary: Delete a file
      description: >-
        Deletes a file in a repository.


        You can provide an additional `committer` parameter, which is an object
        containing information about the committer. Or, you can provide an
        `author` parameter, which is an object containing information about the
        author.


        The `author` section is optional and is filled in with the `committer`
        information if omitted. If the `committer` information is omitted, the
        authenticated user's information is used.


        You must provide values for both `name` and `email`, whether you choose
        to use `author` or `committer`. Otherwise, you'll receive a `422` status
        code.


        **Note:** If you use this endpoint and the "[Create or update file
        contents](https://docs.github.com/enterprise-server@3.9/rest/repos/contents/#create-or-update-file-contents)"
        endpoint in parallel, the concurrent requests will conflict and you will
        receive errors. You must use these endpoints serially instead.
      tags:
        - - - - repos
      operationId: repos/delete-file
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/contents#delete-a-file
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: path
          description: path parameter
          in: path
          required: true
          schema:
            type: string
          x-multi-segment: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: The commit message.
                sha:
                  type: string
                  description: The blob SHA of the file being deleted.
                branch:
                  type: string
                  description: 'The branch name. Default: the repository’s default branch'
                committer:
                  type: object
                  description: object containing information about the committer.
                  properties:
                    name:
                      type: string
                      description: The name of the author (or committer) of the commit
                    email:
                      type: string
                      description: The email of the author (or committer) of the commit
                author:
                  type: object
                  description: object containing information about the author.
                  properties:
                    name:
                      type: string
                      description: The name of the author (or committer) of the commit
                    email:
                      type: string
                      description: The email of the author (or committer) of the commit
              required:
                - message
                - sha
            examples:
              default:
                value:
                  message: my commit message
                  committer:
                    name: Monalisa Octocat
                    email: octocat@github.com
                  sha: 329688480d39049927147c162b9d2deaf885005f
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file-commit'
              examples:
                default:
                  $ref: '#/components/examples/file-commit'
        '404':
          $ref: '#/components/responses/not_found'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          $ref: '#/components/responses/validation_failed'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: contents
  /repos/{owner}/{repo}/contributors:
    get:
      summary: List repository contributors
      description: >-
        Lists contributors to the specified repository and sorts them by the
        number of commits per contributor in descending order. This endpoint may
        return information that is a few hours old because the GitHub REST API
        caches contributor data to improve performance.


        GitHub identifies contributors by author email address. This endpoint
        groups contribution counts by GitHub user, which includes all associated
        email addresses. To improve performance, only the first 500 author email
        addresses in the repository link to GitHub users. The rest will appear
        as anonymous contributors without associated GitHub user information.
      tags:
        - - - - repos
      operationId: repos/list-contributors
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#list-repository-contributors
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: anon
          description: Set to `1` or `true` to include anonymous contributors in results.
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: If repository contains content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/contributor'
              examples:
                response-if-repository-contains-content:
                  $ref: >-
                    #/components/examples/contributor-items-response-if-repository-contains-content
          headers:
            Link:
              $ref: '#/components/headers/link'
        '204':
          description: Response if repository is empty
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
  /repos/{owner}/{repo}/dependabot/alerts:
    get:
      summary: List Dependabot alerts for a repository
      description: >-
        OAuth app tokens and personal access tokens (classic) need the
        `security_events` scope to use this endpoint. If this endpoint is only
        used with public repositories, the token can use the `public_repo` scope
        instead.
      tags:
        - - - - dependabot
      operationId: dependabot/list-alerts-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/dependabot/alerts#list-dependabot-alerts-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/dependabot-alert-comma-separated-states'
        - $ref: '#/components/parameters/dependabot-alert-comma-separated-severities'
        - $ref: '#/components/parameters/dependabot-alert-comma-separated-ecosystems'
        - $ref: '#/components/parameters/dependabot-alert-comma-separated-packages'
        - $ref: '#/components/parameters/dependabot-alert-comma-separated-manifests'
        - $ref: '#/components/parameters/dependabot-alert-scope'
        - $ref: '#/components/parameters/dependabot-alert-sort'
        - $ref: '#/components/parameters/direction'
        - name: page
          description: >-
            **Deprecated**. Page number of the results to fetch. Use
            cursor-based pagination with `before` or `after` instead.
          deprecated: true
          in: query
          schema:
            type: integer
            default: 1
        - name: per_page
          description: >-
            The number of results per page (max 100). For more information, see
            "[Using pagination in the REST
            API](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
          deprecated: true
          in: query
          schema:
            type: integer
            default: 30
        - $ref: '#/components/parameters/pagination-before'
        - $ref: '#/components/parameters/pagination-after'
        - $ref: '#/components/parameters/pagination-first'
        - $ref: '#/components/parameters/pagination-last'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/dependabot-alert'
              examples:
                default:
                  $ref: '#/components/examples/dependabot-alerts-for-repository'
        '304':
          $ref: '#/components/responses/not_modified'
        '400':
          $ref: '#/components/responses/bad_request'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed_simple'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        previews: []
        category: dependabot
        subcategory: alerts
  /repos/{owner}/{repo}/dependabot/alerts/{alert_number}:
    get:
      summary: Get a Dependabot alert
      description: >-
        OAuth app tokens and personal access tokens (classic) need the
        `security_events` scope to use this endpoint. If this endpoint is only
        used with public repositories, the token can use the `public_repo` scope
        instead.
      tags:
        - - - - dependabot
      operationId: dependabot/get-alert
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/dependabot/alerts#get-a-dependabot-alert
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/dependabot-alert-number'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dependabot-alert'
              examples:
                default:
                  $ref: '#/components/examples/dependabot-alert-open'
        '304':
          $ref: '#/components/responses/not_modified'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        previews: []
        category: dependabot
        subcategory: alerts
    patch:
      summary: Update a Dependabot alert
      description: >-
        The authenticated user must have access to security alerts for the
        repository to use this endpoint. For more information, see "[Granting
        access to security
        alerts](https://docs.github.com/enterprise-server@3.9/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts)."


        OAuth app tokens and personal access tokens (classic) need the
        `security_events` scope to use this endpoint. If this endpoint is only
        used with public repositories, the token can use the `public_repo` scope
        instead.
      tags:
        - - - - dependabot
      operationId: dependabot/update-alert
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/dependabot/alerts#update-a-dependabot-alert
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/dependabot-alert-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                  description: >-
                    The state of the Dependabot alert.

                    A `dismissed_reason` must be provided when setting the state
                    to `dismissed`.
                  enum:
                    - dismissed
                    - open
                dismissed_reason:
                  type: string
                  description: >-
                    **Required when `state` is `dismissed`.** A reason for
                    dismissing the alert.
                  enum:
                    - fix_started
                    - inaccurate
                    - no_bandwidth
                    - not_used
                    - tolerable_risk
                dismissed_comment:
                  type: string
                  description: An optional comment associated with dismissing the alert.
                  maxLength: 280
              required:
                - state
              additionalProperties: false
            examples:
              default:
                value:
                  state: dismissed
                  dismissed_reason: tolerable_risk
                  dismissed_comment: This alert is accurate but we use a sanitizer.
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dependabot-alert'
              examples:
                default:
                  $ref: '#/components/examples/dependabot-alert-dismissed'
        '400':
          $ref: '#/components/responses/bad_request'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          $ref: '#/components/responses/validation_failed_simple'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        previews: []
        category: dependabot
        subcategory: alerts
  /repos/{owner}/{repo}/dependabot/secrets:
    get:
      summary: List repository secrets
      description: >-
        Lists all secrets available in a repository without revealing their
        encrypted

        values.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - dependabot
      operationId: dependabot/list-repo-secrets
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/dependabot/secrets#list-repository-secrets
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - secrets
                properties:
                  total_count:
                    type: integer
                  secrets:
                    type: array
                    items:
                      $ref: '#/components/schemas/dependabot-secret'
              examples:
                default:
                  $ref: '#/components/examples/dependabot-secret-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: dependabot
        subcategory: secrets
  /repos/{owner}/{repo}/dependabot/secrets/public-key:
    get:
      summary: Get a repository public key
      description: >-
        Gets your public key, which you need to encrypt secrets. You need to

        encrypt a secret before you can create or update secrets. Anyone with
        read access

        to the repository can use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint if the repository is private.
      tags:
        - - - - dependabot
      operationId: dependabot/get-repo-public-key
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/dependabot/secrets#get-a-repository-public-key
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dependabot-public-key'
              examples:
                default:
                  $ref: '#/components/examples/dependabot-public-key'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: dependabot
        subcategory: secrets
  /repos/{owner}/{repo}/dependabot/secrets/{secret_name}:
    get:
      summary: Get a repository secret
      description: >-
        Gets a single repository secret without revealing its encrypted value.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - dependabot
      operationId: dependabot/get-repo-secret
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/dependabot/secrets#get-a-repository-secret
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/secret-name'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dependabot-secret'
              examples:
                default:
                  $ref: '#/components/examples/dependabot-secret'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: dependabot
        subcategory: secrets
    put:
      summary: Create or update a repository secret
      description: >-
        Creates or updates a repository secret with an encrypted value. Encrypt
        your secret using

        [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).
        For more information, see "[Encrypting secrets for the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/encrypting-secrets-for-the-rest-api)."


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - dependabot
      operationId: dependabot/create-or-update-repo-secret
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/dependabot/secrets#create-or-update-a-repository-secret
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/secret-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                encrypted_value:
                  type: string
                  description: >-
                    Value for your secret, encrypted with
                    [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages)
                    using the public key retrieved from the [Get a repository
                    public
                    key](https://docs.github.com/enterprise-server@3.9/rest/dependabot/secrets#get-a-repository-public-key)
                    endpoint.
                  pattern: >-
                    ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
                key_id:
                  type: string
                  description: ID of the key you used to encrypt the secret.
            examples:
              default:
                value:
                  encrypted_value: c2VjcmV0
                  key_id: '012345678912345678'
      responses:
        '201':
          description: Response when creating a secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty-object'
              examples:
                default:
                  value: null
        '204':
          description: Response when updating a secret
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: dependabot
        subcategory: secrets
    delete:
      summary: Delete a repository secret
      description: >-
        Deletes a secret in a repository using the secret name.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - dependabot
      operationId: dependabot/delete-repo-secret
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/dependabot/secrets#delete-a-repository-secret
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/secret-name'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: dependabot
        subcategory: secrets
  /repos/{owner}/{repo}/dependency-graph/compare/{basehead}:
    get:
      summary: Get a diff of the dependencies between commits
      description: >-
        Gets the diff of the dependency changes between two commits of a
        repository, based on the changes to the dependency manifests made in
        those commits.
      tags:
        - - - - dependency-graph
      operationId: dependency-graph/diff-range
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/dependency-graph/dependency-review#get-a-diff-of-the-dependencies-between-commits
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: basehead
          description: >-
            The base and head Git revisions to compare. The Git revisions will
            be resolved to commit SHAs. Named revisions will be resolved to
            their corresponding HEAD commits, and an appropriate merge base will
            be determined. This parameter expects the format `{base}...{head}`.
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/manifest-path'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dependency-graph-diff'
              examples:
                default:
                  $ref: '#/components/examples/diff-range-response'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '403':
          $ref: '#/components/responses/dependency_review_forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        category: dependency-graph
        subcategory: dependency-review
  /repos/{owner}/{repo}/dependency-graph/sbom:
    get:
      summary: Export a software bill of materials (SBOM) for a repository.
      description: >-
        Exports the software bill of materials (SBOM) for a repository in SPDX
        JSON format.
      tags:
        - - - - dependency-graph
      operationId: dependency-graph/export-sbom
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/dependency-graph/sboms#export-a-software-bill-of-materials-sbom-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dependency-graph-spdx-sbom'
              examples:
                default:
                  $ref: '#/components/examples/dependency-graph-export-sbom-response'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        category: dependency-graph
        subcategory: sboms
  /repos/{owner}/{repo}/dependency-graph/snapshots:
    post:
      summary: Create a snapshot of dependencies for a repository
      description: >-
        Create a new snapshot of a repository's dependencies.


        The authenticated user must have access to the repository.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - dependency-graph
      operationId: dependency-graph/create-repository-snapshot
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/dependency-graph/dependency-submission#create-a-snapshot-of-dependencies-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snapshot'
            examples:
              example-of-a-dependency-submission:
                $ref: '#/components/examples/dependency-graph-create-snapshot-request'
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - created_at
                  - result
                  - message
                properties:
                  id:
                    type: integer
                    description: ID of the created snapshot.
                  created_at:
                    type: string
                    description: The time at which the snapshot was created.
                  result:
                    type: string
                    description: >-
                      Either "SUCCESS", "ACCEPTED", or "INVALID". "SUCCESS"
                      indicates that the snapshot was successfully created and
                      the repository's dependencies were updated. "ACCEPTED"
                      indicates that the snapshot was successfully created, but
                      the repository's dependencies were not updated. "INVALID"
                      indicates that the snapshot was malformed.
                  message:
                    type: string
                    description: >-
                      A message providing further details about the result, such
                      as why the dependencies were not updated.
              examples:
                example-of-a-dependency-submission:
                  $ref: >-
                    #/components/examples/dependency-graph-create-snapshot-success
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: dependency-graph
        subcategory: dependency-submission
  /repos/{owner}/{repo}/deployments:
    get:
      summary: List deployments
      description: 'Simple filtering of deployments is available via query parameters:'
      tags:
        - - - - repos
      operationId: repos/list-deployments
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deployments/deployments#list-deployments
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: sha
          description: The SHA recorded at creation time.
          in: query
          required: false
          schema:
            type: string
            default: none
        - name: ref
          description: The name of the ref. This can be a branch, tag, or SHA.
          in: query
          required: false
          schema:
            type: string
            default: none
        - name: task
          description: >-
            The name of the task for the deployment (e.g., `deploy` or
            `deploy:migrations`).
          in: query
          required: false
          schema:
            type: string
            default: none
        - name: environment
          description: >-
            The name of the environment that was deployed to (e.g., `staging` or
            `production`).
          in: query
          required: false
          schema:
            type: string
            default: none
            nullable: true
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/deployment'
              examples:
                default:
                  $ref: '#/components/examples/deployment-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deployments
        subcategory: deployments
    post:
      summary: Create a deployment
      description: >-
        Deployments offer a few configurable parameters with certain defaults.


        The `ref` parameter can be any named branch, tag, or SHA. At GitHub
        Enterprise Server we often deploy branches and verify them

        before we merge a pull request.


        The `environment` parameter allows deployments to be issued to different
        runtime environments. Teams often have

        multiple environments for verifying their applications, such as
        `production`, `staging`, and `qa`. This parameter

        makes it easier to track which environments have requested deployments.
        The default environment is `production`.


        The `auto_merge` parameter is used to ensure that the requested ref is
        not behind the repository's default branch. If

        the ref _is_ behind the default branch for the repository, we will
        attempt to merge it for you. If the merge succeeds,

        the API will return a successful merge commit. If merge conflicts
        prevent the merge from succeeding, the API will

        return a failure response.


        By default, [commit
        statuses](https://docs.github.com/enterprise-server@3.9/rest/commits/statuses)
        for every submitted context must be in a `success`

        state. The `required_contexts` parameter allows you to specify a subset
        of contexts that must be `success`, or to

        specify contexts that have not yet been submitted. You are not required
        to use commit statuses to deploy. If you do

        not require any contexts or create any commit statuses, the deployment
        will always succeed.


        The `payload` parameter is available for any extra information that a
        deployment system might need. It is a JSON text

        field that will be passed on when a deployment event is dispatched.


        The `task` parameter is used by the deployment system to allow different
        execution paths. In the web world this might

        be `deploy:migrations` to run schema changes on the system. In the
        compiled world this could be a flag to compile an

        application with debugging enabled.


        Merged branch response:


        You will see this response when GitHub automatically merges the base
        branch into the topic branch instead of creating

        a deployment. This auto-merge happens when:

        *   Auto-merge option is enabled in the repository

        *   Topic branch does not include the latest changes on the base branch,
        which is `master` in the response example

        *   There are no merge conflicts


        If there are no new commits in the base branch, a new request to create
        a deployment should give a successful

        response.


        Merge conflict response:


        This error happens when the `auto_merge` option is enabled and when the
        default branch (in this case `master`), can't

        be merged into the branch that's being deployed (in this case
        `topic-branch`), due to merge conflicts.


        Failed commit status checks:


        This error happens when the `required_contexts` parameter indicates that
        one or more contexts need to have a `success`

        status for the commit to be deployed, but one or more of the required
        contexts do not have a state of `success`.


        OAuth app tokens and personal access tokens (classic) need the `repo` or
        `repo_deployment` scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/create-deployment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deployments/deployments#create-a-deployment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ref:
                  type: string
                  description: The ref to deploy. This can be a branch, tag, or SHA.
                task:
                  type: string
                  description: >-
                    Specifies a task to execute (e.g., `deploy` or
                    `deploy:migrations`).
                  default: deploy
                auto_merge:
                  type: boolean
                  description: >-
                    Attempts to automatically merge the default branch into the
                    requested ref, if it's behind the default branch.
                  default: true
                required_contexts:
                  type: array
                  description: >-
                    The
                    [status](https://docs.github.com/enterprise-server@3.9/rest/commits/statuses)
                    contexts to verify against commit status checks. If you omit
                    this parameter, GitHub verifies all unique contexts before
                    creating a deployment. To bypass checking entirely, pass an
                    empty array. Defaults to all unique contexts.
                  items:
                    type: string
                payload:
                  oneOf:
                    - type: object
                      additionalProperties: true
                    - type: string
                      description: >-
                        JSON payload with extra information about the
                        deployment.
                      default: ''
                environment:
                  type: string
                  description: >-
                    Name for the target deployment environment (e.g.,
                    `production`, `staging`, `qa`).
                  default: production
                description:
                  type: string
                  description: Short description of the deployment.
                  default: ''
                  nullable: true
                transient_environment:
                  type: boolean
                  description: >-
                    Specifies if the given environment is specific to the
                    deployment and will no longer exist at some point in the
                    future. Default: `false`
                  default: false
                production_environment:
                  type: boolean
                  description: >-
                    Specifies if the given environment is one that end-users
                    directly interact with. Default: `true` when `environment`
                    is `production` and `false` otherwise.
              required:
                - ref
            examples:
              simple-example:
                summary: Simple example
                value:
                  ref: topic-branch
                  payload: '{ "deploy": "migrate" }'
                  description: Deploy request from hubot
              advanced-example:
                summary: Advanced example
                value:
                  ref: topic-branch
                  auto_merge: false
                  payload: '{ "deploy": "migrate" }'
                  description: Deploy request from hubot
                  required_contexts:
                    - ci/janky
                    - security/brakeman
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment'
              examples:
                simple-example:
                  $ref: '#/components/examples/deployment-simple-example'
        '202':
          description: Merged branch response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                merged-branch-response:
                  value:
                    message: Auto-merged master into topic-branch on deployment.
        '409':
          description: >-
            Conflict when there is a merge conflict or the commit's status
            checks failed
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deployments
        subcategory: deployments
  /repos/{owner}/{repo}/deployments/{deployment_id}:
    get:
      summary: Get a deployment
      description: ''
      tags:
        - - - - repos
      operationId: repos/get-deployment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deployments/deployments#get-a-deployment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/deployment-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment'
              examples:
                default:
                  $ref: '#/components/examples/deployment'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deployments
        subcategory: deployments
    delete:
      summary: Delete a deployment
      description: >-
        If the repository only has one deployment, you can delete the deployment
        regardless of its status. If the repository has more than one
        deployment, you can only delete inactive deployments. This ensures that
        repositories with multiple deployments will always have an active
        deployment.


        To set a deployment as inactive, you must:


        *   Create a new deployment that is active so that the system has a
        record of the current state, then delete the previously active
        deployment.

        *   Mark the active deployment as inactive by adding any non-successful
        deployment status.


        For more information, see "[Create a
        deployment](https://docs.github.com/enterprise-server@3.9/rest/deployments/deployments/#create-a-deployment)"
        and "[Create a deployment
        status](https://docs.github.com/enterprise-server@3.9/rest/deployments/statuses#create-a-deployment-status)."


        OAuth app tokens and personal access tokens (classic) need the `repo` or
        `repo_deployment` scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/delete-deployment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deployments/deployments#delete-a-deployment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/deployment-id'
      responses:
        '204':
          description: Response
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed_simple'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deployments
        subcategory: deployments
  /repos/{owner}/{repo}/deployments/{deployment_id}/statuses:
    get:
      summary: List deployment statuses
      description: 'Users with pull access can view deployment statuses for a deployment:'
      tags:
        - - - - repos
      operationId: repos/list-deployment-statuses
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deployments/statuses#list-deployment-statuses
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/deployment-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/deployment-status'
              examples:
                default:
                  $ref: '#/components/examples/deployment-status-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deployments
        subcategory: statuses
    post:
      summary: Create a deployment status
      description: >-
        Users with `push` access can create deployment statuses for a given
        deployment.


        OAuth app tokens and personal access tokens (classic) need the
        `repo_deployment` scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/create-deployment-status
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deployments/statuses#create-a-deployment-status
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/deployment-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                  description: >-
                    The state of the status. When you set a transient deployment
                    to `inactive`, the deployment will be shown as `destroyed`
                    in GitHub.
                  enum:
                    - error
                    - failure
                    - inactive
                    - in_progress
                    - queued
                    - pending
                    - success
                target_url:
                  type: string
                  description: >-
                    The target URL to associate with this status. This URL
                    should contain output to keep the user updated while the
                    task is running or serve as historical information for what
                    happened in the deployment. **Note:** It's recommended to
                    use the `log_url` parameter, which replaces `target_url`.
                  default: ''
                log_url:
                  type: string
                  description: >-
                    The full URL of the deployment's output. This parameter
                    replaces `target_url`. We will continue to accept
                    `target_url` to support legacy uses, but we recommend
                    replacing `target_url` with `log_url`. Setting `log_url`
                    will automatically set `target_url` to the same value.
                    Default: `""`
                  default: ''
                description:
                  type: string
                  description: >-
                    A short description of the status. The maximum description
                    length is 140 characters.
                  default: ''
                environment:
                  type: string
                  description: >-
                    Name for the target deployment environment, which can be
                    changed when setting a deploy status. For example,
                    `production`, `staging`, or `qa`. If not defined, the
                    environment of the previous status on the deployment will be
                    used, if it exists. Otherwise, the environment of the
                    deployment will be used.
                environment_url:
                  type: string
                  description: 'Sets the URL for accessing your environment. Default: `""`'
                  default: ''
                auto_inactive:
                  type: boolean
                  description: >-
                    Adds a new `inactive` status to all prior non-transient,
                    non-production environment deployments with the same
                    repository and `environment` name as the created status's
                    deployment. An `inactive` status is only added to
                    deployments that had a `success` state. Default: `true`
              required:
                - state
            examples:
              default:
                value:
                  environment: production
                  state: success
                  log_url: https://example.com/deployment/42/output
                  description: Deployment finished successfully.
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment-status'
              examples:
                default:
                  $ref: '#/components/examples/deployment-status'
          headers:
            Location:
              example: >-
                https://api.github.com/repos/octocat/example/deployments/42/statuses/1
              schema:
                type: string
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deployments
        subcategory: statuses
  /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}:
    get:
      summary: Get a deployment status
      description: 'Users with pull access can view a deployment status for a deployment:'
      tags:
        - - - - repos
      operationId: repos/get-deployment-status
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deployments/statuses#get-a-deployment-status
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/deployment-id'
        - name: status_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment-status'
              examples:
                default:
                  $ref: '#/components/examples/deployment-status'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deployments
        subcategory: statuses
  /repos/{owner}/{repo}/dispatches:
    post:
      summary: Create a repository dispatch event
      description: >-
        You can use this endpoint to trigger a webhook event called
        `repository_dispatch` when you want activity that happens outside of
        GitHub Enterprise Server to trigger a GitHub Actions workflow or GitHub
        App webhook. You must configure your GitHub Actions workflow or GitHub
        App to run when the `repository_dispatch` event occurs. For an example
        `repository_dispatch` webhook payload, see
        "[RepositoryDispatchEvent](https://docs.github.com/enterprise-server@3.9/webhooks/event-payloads/#repository_dispatch)."


        The `client_payload` parameter is available for any extra information
        that your workflow might need. This parameter is a JSON payload that
        will be passed on when the webhook event is dispatched. For example, the
        `client_payload` can include a message that a user would like to send
        using a GitHub Actions workflow. Or the `client_payload` can be used as
        a test to debug your workflow.


        This input example shows how you can use the `client_payload` as a test
        to debug your workflow.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/create-dispatch-event
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#create-a-repository-dispatch-event
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - event_type
              properties:
                event_type:
                  type: string
                  description: >-
                    A custom webhook event name. Must be 100 characters or
                    fewer.
                  minLength: 1
                  maxLength: 100
                client_payload:
                  type: object
                  description: >-
                    JSON payload with extra information about the webhook event
                    that your action or workflow may use. The maximum number of
                    top-level properties is 10.
                  additionalProperties: true
                  maxProperties: 10
            examples:
              default:
                value:
                  event_type: on-demand-test
                  client_payload:
                    unit: false
                    integration: true
      responses:
        '204':
          description: Response
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
  /repos/{owner}/{repo}/environments:
    get:
      summary: List environments
      description: >-
        Lists the environments for a repository.


        Anyone with read access to the repository can use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint with a private repository.
      tags:
        - - - - repos
      operationId: repos/get-all-environments
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deployments/environments#list-environments
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    description: The number of environments in this repository
                    example: 5
                    type: integer
                  environments:
                    type: array
                    items:
                      $ref: '#/components/schemas/environment'
              examples:
                default:
                  $ref: '#/components/examples/environments'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deployments
        subcategory: environments
  /repos/{owner}/{repo}/environments/{environment_name}:
    get:
      summary: Get an environment
      description: >-
        **Note:** To get information about name patterns that branches must
        match in order to deploy to this environment, see "[Get a deployment
        branch
        policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."


        Anyone with read access to the repository can use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint with a private repository.
      tags:
        - - - - repos
      operationId: repos/get-environment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deployments/environments#get-an-environment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/environment-name'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environment'
              examples:
                default:
                  $ref: '#/components/examples/environment'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deployments
        subcategory: environments
    put:
      summary: Create or update an environment
      description: >-
        Create or update an environment with protection rules, such as required
        reviewers. For more information about environment protection rules, see
        "[Environments](/actions/reference/environments#environment-protection-rules)."


        **Note:** To create or update name patterns that branches must match in
        order to deploy to this environment, see "[Deployment branch
        policies](/rest/deployments/branch-policies)."


        **Note:** To create or update secrets for an environment, see "[GitHub
        Actions secrets](/rest/actions/secrets)."


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/create-or-update-environment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deployments/environments#create-or-update-an-environment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/environment-name'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              nullable: true
              properties:
                wait_timer:
                  $ref: '#/components/schemas/wait-timer'
                reviewers:
                  type: array
                  nullable: true
                  description: >-
                    The people or teams that may review jobs that reference the
                    environment. You can list up to six users or teams as
                    reviewers. The reviewers must have at least read access to
                    the repository. Only one of the required reviewers needs to
                    approve the job for it to proceed.
                  items:
                    type: object
                    properties:
                      type:
                        $ref: '#/components/schemas/deployment-reviewer-type'
                      id:
                        type: integer
                        description: >-
                          The id of the user or team who can review the
                          deployment
                        example: 4532992
                deployment_branch_policy:
                  $ref: '#/components/schemas/deployment-branch-policy-settings'
              additionalProperties: false
            examples:
              default:
                value:
                  wait_timer: 30
                  reviewers:
                    - type: User
                      id: 1
                    - type: Team
                      id: 1
                  deployment_branch_policy:
                    protected_branches: false
                    custom_branch_policies: true
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environment'
              examples:
                default:
                  $ref: '#/components/examples/environment'
        '422':
          description: >-
            Validation error when the environment name is invalid or when
            `protected_branches` and `custom_branch_policies` in
            `deployment_branch_policy` are set to the same value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/basic-error'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deployments
        subcategory: environments
    delete:
      summary: Delete an environment
      description: >-
        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/delete-an-environment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deployments/environments#delete-an-environment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/environment-name'
      responses:
        '204':
          description: Default response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deployments
        subcategory: environments
  /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies:
    get:
      summary: List deployment branch policies
      description: >-
        Lists the deployment branch policies for an environment.


        Anyone with read access to the repository can use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint with a private repository.
      tags:
        - - - - repos
      operationId: repos/list-deployment-branch-policies
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deployments/branch-policies#list-deployment-branch-policies
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/environment-name'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    description: >-
                      The number of deployment branch policies for the
                      environment.
                    type: integer
                    example: 2
                  branch_policies:
                    type: array
                    items:
                      $ref: '#/components/schemas/deployment-branch-policy'
                required:
                  - total_count
                  - branch_policies
              examples:
                default:
                  $ref: '#/components/examples/deployment-branch-policies-list'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deployments
        subcategory: branch-policies
    post:
      summary: Create a deployment branch policy
      description: >-
        Creates a deployment branch policy for an environment.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/create-deployment-branch-policy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deployments/branch-policies#create-a-deployment-branch-policy
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/environment-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/deployment-branch-policy-name-pattern-with-type
            examples:
              example-wildcard:
                summary: Example of a wildcard name pattern
                value:
                  name: release/*
              example-single-branch:
                summary: Example of a single branch name pattern
                value:
                  name: main
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment-branch-policy'
              examples:
                example-wildcard:
                  $ref: '#/components/examples/deployment-branch-policy-wildcard'
                example-single-branch:
                  $ref: '#/components/examples/deployment-branch-policy-single-branch'
        '303':
          description: Response if the same branch name pattern already exists
        '404':
          description: >-
            Not Found or `deployment_branch_policy.custom_branch_policies`
            property for the environment is set to false
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deployments
        subcategory: branch-policies
  /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}:
    get:
      summary: Get a deployment branch policy
      description: >-
        Gets a deployment branch policy for an environment.


        Anyone with read access to the repository can use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint with a private repository.
      tags:
        - - - - repos
      operationId: repos/get-deployment-branch-policy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deployments/branch-policies#get-a-deployment-branch-policy
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/environment-name'
        - $ref: '#/components/parameters/branch-policy-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment-branch-policy'
              examples:
                default:
                  $ref: '#/components/examples/deployment-branch-policy-wildcard'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deployments
        subcategory: branch-policies
    put:
      summary: Update a deployment branch policy
      description: >-
        Updates a deployment branch policy for an environment.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/update-deployment-branch-policy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deployments/branch-policies#update-a-deployment-branch-policy
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/environment-name'
        - $ref: '#/components/parameters/branch-policy-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deployment-branch-policy-name-pattern'
            examples:
              default:
                value:
                  name: release/*
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment-branch-policy'
              examples:
                default:
                  $ref: '#/components/examples/deployment-branch-policy-wildcard'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deployments
        subcategory: branch-policies
    delete:
      summary: Delete a deployment branch policy
      description: >-
        Deletes a deployment branch policy for an environment.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/delete-deployment-branch-policy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deployments/branch-policies#delete-a-deployment-branch-policy
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/environment-name'
        - $ref: '#/components/parameters/branch-policy-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deployments
        subcategory: branch-policies
  /repos/{owner}/{repo}/environments/{environment_name}/secrets:
    get:
      summary: List environment secrets
      description: >-
        Lists all secrets available in an environment without revealing their

        encrypted values.


        Authenticated users must have collaborator access to a repository to
        create, update, or read secrets.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/list-environment-secrets
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#list-environment-secrets
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/environment-name'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - secrets
                properties:
                  total_count:
                    type: integer
                  secrets:
                    type: array
                    items:
                      $ref: '#/components/schemas/actions-secret'
              examples:
                default:
                  $ref: '#/components/examples/actions-secret-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: secrets
  /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key:
    get:
      summary: Get an environment public key
      description: >-
        Get the public key for an environment, which you need to encrypt
        environment

        secrets. You need to encrypt a secret before you can create or update
        secrets.


        Anyone with read access to the repository can use this endpoint.


        If the repository is private, OAuth tokens and personal access tokens
        (classic) need the `repo` scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/get-environment-public-key
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#get-an-environment-public-key
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/environment-name'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actions-public-key'
              examples:
                default:
                  $ref: '#/components/examples/actions-public-key'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: secrets
  /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}:
    get:
      summary: Get an environment secret
      description: >-
        Gets a single environment secret without revealing its encrypted value.


        Authenticated users must have collaborator access to a repository to
        create, update, or read secrets.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/get-environment-secret
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#get-an-environment-secret
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/environment-name'
        - $ref: '#/components/parameters/secret-name'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actions-secret'
              examples:
                default:
                  $ref: '#/components/examples/actions-secret'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: secrets
    put:
      summary: Create or update an environment secret
      description: >-
        Creates or updates an environment secret with an encrypted value.
        Encrypt your secret using

        [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).
        For more information, see "[Encrypting secrets for the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/encrypting-secrets-for-the-rest-api)."


        Authenticated users must have collaborator access to a repository to
        create, update, or read secrets.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/create-or-update-environment-secret
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#create-or-update-an-environment-secret
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/environment-name'
        - $ref: '#/components/parameters/secret-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                encrypted_value:
                  type: string
                  description: >-
                    Value for your secret, encrypted with
                    [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages)
                    using the public key retrieved from the [Get an environment
                    public
                    key](https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#get-an-environment-public-key)
                    endpoint.
                  pattern: >-
                    ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
                key_id:
                  type: string
                  description: ID of the key you used to encrypt the secret.
              required:
                - encrypted_value
                - key_id
            examples:
              default:
                value:
                  encrypted_value: c2VjcmV0
                  key_id: '012345678912345678'
      responses:
        '201':
          description: Response when creating a secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty-object'
              examples:
                default:
                  value: null
        '204':
          description: Response when updating a secret
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: secrets
    delete:
      summary: Delete an environment secret
      description: >-
        Deletes a secret in an environment using the secret name.


        Authenticated users must have collaborator access to a repository to
        create, update, or read secrets.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/delete-environment-secret
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/secrets#delete-an-environment-secret
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/environment-name'
        - $ref: '#/components/parameters/secret-name'
      responses:
        '204':
          description: Default response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: secrets
  /repos/{owner}/{repo}/environments/{environment_name}/variables:
    get:
      summary: List environment variables
      description: >-
        Lists all environment variables.


        Authenticated users must have collaborator access to a repository to
        create, update, or read variables.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/list-environment-variables
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/variables#list-environment-variables
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/environment-name'
        - $ref: '#/components/parameters/variables-per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - variables
                properties:
                  total_count:
                    type: integer
                  variables:
                    type: array
                    items:
                      $ref: '#/components/schemas/actions-variable'
              examples:
                default:
                  $ref: '#/components/examples/actions-variables-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: variables
    post:
      summary: Create an environment variable
      description: >-
        Create an environment variable that you can reference in a GitHub
        Actions workflow.


        Authenticated users must have collaborator access to a repository to
        create, update, or read variables.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/create-environment-variable
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/variables#create-an-environment-variable
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/environment-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the variable.
                value:
                  type: string
                  description: The value of the variable.
              required:
                - name
                - value
            examples:
              default:
                value:
                  name: USERNAME
                  value: octocat
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty-object'
              examples:
                default:
                  value: null
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: variables
  /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}:
    get:
      summary: Get an environment variable
      description: >-
        Gets a specific variable in an environment.


        Authenticated users must have collaborator access to a repository to
        create, update, or read variables.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/get-environment-variable
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/variables#get-an-environment-variable
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/environment-name'
        - $ref: '#/components/parameters/variable-name'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actions-variable'
              examples:
                default:
                  $ref: '#/components/examples/actions-variable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: variables
    patch:
      summary: Update an environment variable
      description: >-
        Updates an environment variable that you can reference in a GitHub
        Actions workflow.


        Authenticated users must have collaborator access to a repository to
        create, update, or read variables.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/update-environment-variable
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/variables#update-an-environment-variable
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/variable-name'
        - $ref: '#/components/parameters/environment-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the variable.
                value:
                  type: string
                  description: The value of the variable.
            examples:
              default:
                value:
                  name: USERNAME
                  value: octocat
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: variables
    delete:
      summary: Delete an environment variable
      description: >-
        Deletes an environment variable using the variable name.


        Authenticated users must have collaborator access to a repository to
        create, update, or read variables.


        OAuth tokens and personal access tokens (classic) need the `repo` scope
        to use this endpoint.
      tags:
        - - - - actions
      operationId: actions/delete-environment-variable
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/actions/variables#delete-an-environment-variable
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/variable-name'
        - $ref: '#/components/parameters/environment-name'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: actions
        subcategory: variables
  /repos/{owner}/{repo}/events:
    get:
      summary: List repository events
      description: >
        **Note**: This API is not built to serve real-time use cases. Depending
        on the time of day, event latency can be anywhere from 30s to 6h.
      tags:
        - - - - activity
      operationId: activity/list-repo-events
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/events#list-repository-events
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/event'
              examples:
                200-response:
                  $ref: '#/components/examples/repo-events-items'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: activity
        subcategory: events
  /repos/{owner}/{repo}/forks:
    get:
      summary: List forks
      description: ''
      tags:
        - - - - repos
      operationId: repos/list-forks
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/forks#list-forks
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: sort
          description: The sort order. `stargazers` will sort by star count.
          in: query
          required: false
          schema:
            type: string
            enum:
              - newest
              - oldest
              - stargazers
              - watchers
            default: newest
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-items-2'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '400':
          $ref: '#/components/responses/bad_request'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: forks
    post:
      summary: Create a fork
      description: >-
        Create a fork for the authenticated user.


        **Note**: Forking a Repository happens asynchronously. You may have to
        wait a short period of time before you can access the git objects. If
        this takes longer than 5 minutes, be sure to contact [GitHub Enterprise
        Server
        Support](https://support.github.com/contact?tags=dotcom-rest-api).


        **Note**: Although this endpoint works with GitHub Apps, the GitHub App
        must be installed on the destination account with access to all
        repositories and on the source account with access to the source
        repository.
      tags:
        - - - - repos
      operationId: repos/create-fork
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/forks#create-a-fork
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              nullable: true
              properties:
                organization:
                  type: string
                  description: >-
                    Optional parameter to specify the organization name if
                    forking into an organization.
                name:
                  type: string
                  description: >-
                    When forking from an existing repository, a new name for the
                    fork.
                default_branch_only:
                  type: boolean
                  description: >-
                    When forking from an existing repository, fork with only the
                    default branch.
            examples:
              default:
                value:
                  organization: octocat
                  name: Hello-World
                  default_branch_only: true
      responses:
        '202':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/full-repository'
              examples:
                default:
                  $ref: '#/components/examples/full-repository'
        '400':
          $ref: '#/components/responses/bad_request'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: forks
  /repos/{owner}/{repo}/git/blobs:
    post:
      summary: Create a blob
      description: ''
      tags:
        - - - - git
      operationId: git/create-blob
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/git/blobs#create-a-blob
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: The new blob's content.
                encoding:
                  type: string
                  description: >-
                    The encoding used for `content`. Currently, `"utf-8"` and
                    `"base64"` are supported.
                  default: utf-8
              required:
                - content
            examples:
              default:
                value:
                  content: Content of the blob
                  encoding: utf-8
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/short-blob'
              examples:
                default:
                  $ref: '#/components/examples/short-blob'
          headers:
            Location:
              example: >-
                https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15
              schema:
                type: string
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: git
        subcategory: blobs
  /repos/{owner}/{repo}/git/blobs/{file_sha}:
    get:
      summary: Get a blob
      description: >-
        The `content` in the response will always be Base64 encoded.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw blob data.

        - **`application/vnd.github+json`**: Returns a JSON representation of
        the blob with `content` as a base64 encoded string. This is the default
        if no media type is specified.


        **Note** This endpoint supports blobs up to 100 megabytes in size.
      tags:
        - - - - git
      operationId: git/get-blob
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/git/blobs#get-a-blob
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: file_sha
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/blob'
              examples:
                default:
                  $ref: '#/components/examples/blob'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: git
        subcategory: blobs
  /repos/{owner}/{repo}/git/commits:
    post:
      summary: Create a commit
      description: >-
        Creates a new Git [commit
        object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).


        **Signature verification object**


        The response will include a `verification` object that describes the
        result of verifying the commit's signature. The following fields are
        included in the `verification` object:


        | Name | Type | Description |

        | - | - | -- |

        | `verified` | `boolean` | Indicates whether GitHub considers the
        signature in this commit to be verified. |

        | `reason` | `string` | The reason for verified value. Possible values
        and their meanings are enumerated in the table below. |

        | `signature` | `string` | The signature that was extracted from the
        commit. |

        | `payload` | `string` | The value that was signed. |


        These are the possible values for `reason` in the `verification` object:


        | Value | Description |

        | -- | -- |

        | `expired_key` | The key that made the signature is expired. |

        | `not_signing_key` | The "signing" flag is not among the usage flags in
        the GPG key that made the signature. |

        | `gpgverify_error` | There was an error communicating with the
        signature verification service. |

        | `gpgverify_unavailable` | The signature verification service is
        currently unavailable. |

        | `unsigned` | The object does not include a signature. |

        | `unknown_signature_type` | A non-PGP signature was found in the
        commit. |

        | `no_user` | No user was associated with the `committer` email address
        in the commit. |

        | `unverified_email` | The `committer` email address in the commit was
        associated with a user, but the email address is not verified on their
        account. |

        | `bad_email` | The `committer` email address in the commit is not
        included in the identities of the PGP key that made the signature. |

        | `unknown_key` | The key that made the signature has not been
        registered with any user's account. |

        | `malformed_signature` | There was an error parsing the signature. |

        | `invalid` | The signature could not be cryptographically verified
        using the key whose key-id was found in the signature. |

        | `valid` | None of the above errors applied, so the signature is
        considered to be verified. |
      tags:
        - - - - git
      operationId: git/create-commit
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/git/commits#create-a-commit
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: The commit message
                tree:
                  type: string
                  description: The SHA of the tree object this commit points to
                parents:
                  type: array
                  description: >-
                    The SHAs of the commits that were the parents of this
                    commit. If omitted or empty, the commit will be written as a
                    root commit. For a single parent, an array of one SHA should
                    be provided; for a merge commit, an array of more than one
                    should be provided.
                  items:
                    type: string
                author:
                  type: object
                  description: >-
                    Information about the author of the commit. By default, the
                    `author` will be the authenticated user and the current
                    date. See the `author` and `committer` object below for
                    details.
                  properties:
                    name:
                      type: string
                      description: The name of the author (or committer) of the commit
                    email:
                      type: string
                      description: The email of the author (or committer) of the commit
                    date:
                      type: string
                      format: date-time
                      description: >-
                        Indicates when this commit was authored (or committed).
                        This is a timestamp in [ISO
                        8601](https://en.wikipedia.org/wiki/ISO_8601) format:
                        `YYYY-MM-DDTHH:MM:SSZ`.
                  required:
                    - name
                    - email
                committer:
                  type: object
                  description: >-
                    Information about the person who is making the commit. By
                    default, `committer` will use the information set in
                    `author`. See the `author` and `committer` object below for
                    details.
                  properties:
                    name:
                      type: string
                      description: The name of the author (or committer) of the commit
                    email:
                      type: string
                      description: The email of the author (or committer) of the commit
                    date:
                      type: string
                      format: date-time
                      description: >-
                        Indicates when this commit was authored (or committed).
                        This is a timestamp in [ISO
                        8601](https://en.wikipedia.org/wiki/ISO_8601) format:
                        `YYYY-MM-DDTHH:MM:SSZ`.
                signature:
                  type: string
                  description: >-
                    The [PGP
                    signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy)
                    of the commit. GitHub adds the signature to the `gpgsig`
                    header of the created commit. For a commit signature to be
                    verifiable by Git or GitHub, it must be an ASCII-armored
                    detached PGP signature over the string commit as it would be
                    written to the object database. To pass a `signature`
                    parameter, you need to first manually create a valid PGP
                    signature, which can be complicated. You may find it easier
                    to [use the command
                    line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work)
                    to create signed commits.
              required:
                - message
                - tree
            examples:
              default:
                value:
                  message: my commit message
                  author:
                    name: Mona Octocat
                    email: octocat@github.com
                    date: '2008-07-09T16:13:30+12:00'
                  parents:
                    - 7d1b31e74ee336d15cbd21741bc88a537ed063a0
                  tree: 827efc6d56897b048c772eb4087f854f46256132
                  signature: >
                    --BEGIN PGP SIGNATURE--


                    iQIzBAABAQAdFiEESn/54jMNIrGSE6Tp6cQjvhfv7nAFAlnT71cACgkQ6cQjvhfv

                    7nCWwA//XVqBKWO0zF+bZl6pggvky3Oc2j1pNFuRWZ29LXpNuD5WUGXGG209B0hI

                    DkmcGk19ZKUTnEUJV2Xd0R7AW01S/YSub7OYcgBkI7qUE13FVHN5ln1KvH2all2n

                    2+JCV1HcJLEoTjqIFZSSu/sMdhkLQ9/NsmMAzpf/iIM0nQOyU4YRex9eD1bYj6nA

                    OQPIDdAuaTQj1gFPHYLzM4zJnCqGdRlg0sOM/zC5apBNzIwlgREatOYQSCfCKV7k

                    nrU34X8b9BzQaUx48Qa+Dmfn5KQ8dl27RNeWAqlkuWyv3pUauH9UeYW+KyuJeMkU

                    +NyHgAsWFaCFl23kCHThbLStMZOYEnGagrd0hnm1TPS4GJkV4wfYMwnI4KuSlHKB

                    jHl3Js9vNzEUQipQJbgCgTiWvRJoK3ENwBTMVkKHaqT4x9U4Jk/XZB6Q8MA09ezJ

                    3QgiTjTAGcum9E9QiJqMYdWQPWkaBIRRz5cET6HPB48YNXAAUsfmuYsGrnVLYbG+

                    UpC6I97VybYHTy2O9XSGoaLeMI9CsFn38ycAxxbWagk5mhclNTP5mezIq6wKSwmr

                    X11FW3n1J23fWZn5HJMBsRnUCgzqzX3871IqLYHqRJ/bpZ4h20RhTyPj5c/z7QXp

                    eSakNQMfbbMcljkha+ZMuVQX1K9aRlVqbmv3ZMWh+OijLYVU2bc=

                    =5Io4

                    --END PGP SIGNATURE--
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/git-commit'
              examples:
                default:
                  $ref: '#/components/examples/git-commit'
          headers:
            Location:
              example: >-
                https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd
              schema:
                type: string
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: git
        subcategory: commits
  /repos/{owner}/{repo}/git/commits/{commit_sha}:
    get:
      summary: Get a commit object
      description: >-
        Gets a Git [commit
        object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).


        To get the contents of a commit, see "[Get a
        commit](/rest/commits/commits#get-a-commit)."


        **Signature verification object**


        The response will include a `verification` object that describes the
        result of verifying the commit's signature. The following fields are
        included in the `verification` object:


        | Name | Type | Description |

        | - | - | -- |

        | `verified` | `boolean` | Indicates whether GitHub considers the
        signature in this commit to be verified. |

        | `reason` | `string` | The reason for verified value. Possible values
        and their meanings are enumerated in the table below. |

        | `signature` | `string` | The signature that was extracted from the
        commit. |

        | `payload` | `string` | The value that was signed. |


        These are the possible values for `reason` in the `verification` object:


        | Value | Description |

        | -- | -- |

        | `expired_key` | The key that made the signature is expired. |

        | `not_signing_key` | The "signing" flag is not among the usage flags in
        the GPG key that made the signature. |

        | `gpgverify_error` | There was an error communicating with the
        signature verification service. |

        | `gpgverify_unavailable` | The signature verification service is
        currently unavailable. |

        | `unsigned` | The object does not include a signature. |

        | `unknown_signature_type` | A non-PGP signature was found in the
        commit. |

        | `no_user` | No user was associated with the `committer` email address
        in the commit. |

        | `unverified_email` | The `committer` email address in the commit was
        associated with a user, but the email address is not verified on their
        account. |

        | `bad_email` | The `committer` email address in the commit is not
        included in the identities of the PGP key that made the signature. |

        | `unknown_key` | The key that made the signature has not been
        registered with any user's account. |

        | `malformed_signature` | There was an error parsing the signature. |

        | `invalid` | The signature could not be cryptographically verified
        using the key whose key-id was found in the signature. |

        | `valid` | None of the above errors applied, so the signature is
        considered to be verified. |
      tags:
        - - - - git
      operationId: git/get-commit
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/git/commits#get-a-commit-object
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/commit-sha'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/git-commit'
              examples:
                default:
                  $ref: '#/components/examples/git-commit-2'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: git
        subcategory: commits
  /repos/{owner}/{repo}/git/matching-refs/{ref}:
    get:
      summary: List matching references
      description: >-
        Returns an array of references from your Git database that match the
        supplied name. The `:ref` in the URL must be formatted as `heads/<branch
        name>` for branches and `tags/<tag name>` for tags. If the `:ref`
        doesn't exist in the repository, but existing refs start with `:ref`,
        they will be returned as an array.


        When you use this endpoint without providing a `:ref`, it will return an
        array of all the references from your Git database, including notes and
        stashes if they exist on the server. Anything in the namespace is
        returned, not just `heads` and `tags`.


        **Note:** You need to explicitly [request a pull
        request](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#get-a-pull-request)
        to trigger a test merge commit, which checks the mergeability of pull
        requests. For more information, see "[Checking mergeability of pull
        requests](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".


        If you request matching references for a branch named `feature` but the
        branch `feature` doesn't exist, the response can still include other
        matching head refs that start with the word `feature`, such as
        `featureA` and `featureB`.
      tags:
        - - - - git
      operationId: git/list-matching-refs
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/git/refs#list-matching-references
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/git-ref-only'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/git-ref'
              examples:
                default:
                  $ref: '#/components/examples/git-ref-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: git
        subcategory: refs
  /repos/{owner}/{repo}/git/ref/{ref}:
    get:
      summary: Get a reference
      description: >-
        Returns a single reference from your Git database. The `:ref` in the URL
        must be formatted as `heads/<branch name>` for branches and `tags/<tag
        name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is
        returned.


        **Note:** You need to explicitly [request a pull
        request](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#get-a-pull-request)
        to trigger a test merge commit, which checks the mergeability of pull
        requests. For more information, see "[Checking mergeability of pull
        requests](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
      tags:
        - - - - git
      operationId: git/get-ref
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/git/refs#get-a-reference
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/git-ref-only'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/git-ref'
              examples:
                default:
                  $ref: '#/components/examples/git-ref'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: git
        subcategory: refs
  /repos/{owner}/{repo}/git/refs:
    post:
      summary: Create a reference
      description: >-
        Creates a reference for your repository. You are unable to create new
        references for empty repositories, even if the commit SHA-1 hash used
        exists. Empty repositories are repositories without branches.
      tags:
        - - - - git
      operationId: git/create-ref
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/git/refs#create-a-reference
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ref:
                  type: string
                  description: >-
                    The name of the fully qualified reference (ie:
                    `refs/heads/master`). If it doesn't start with 'refs' and
                    have at least two slashes, it will be rejected.
                sha:
                  type: string
                  description: The SHA1 value for this reference.
              required:
                - ref
                - sha
            examples:
              default:
                value:
                  ref: refs/heads/featureA
                  sha: aa218f56b14c9653891f9e74264a383fa43fefbd
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/git-ref'
              examples:
                default:
                  $ref: '#/components/examples/git-ref'
          headers:
            Location:
              example: >-
                https://api.github.com/repos/octocat/Hello-World/git/refs/heads/featureA
              schema:
                type: string
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: git
        subcategory: refs
  /repos/{owner}/{repo}/git/refs/{ref}:
    patch:
      summary: Update a reference
      description: >-
        Updates the provided reference to point to a new SHA. For more
        information, see "[Git
        References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)"
        in the Git documentation.
      tags:
        - - - - git
      operationId: git/update-ref
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/git/refs#update-a-reference
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/git-ref-only'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sha:
                  type: string
                  description: The SHA1 value to set this reference to
                force:
                  type: boolean
                  description: >-
                    Indicates whether to force the update or to make sure the
                    update is a fast-forward update. Leaving this out or setting
                    it to `false` will make sure you're not overwriting work.
                  default: false
              required:
                - sha
            examples:
              default:
                value:
                  sha: aa218f56b14c9653891f9e74264a383fa43fefbd
                  force: true
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/git-ref'
              examples:
                default:
                  $ref: '#/components/examples/git-ref'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: git
        subcategory: refs
    delete:
      summary: Delete a reference
      description: Deletes the provided reference.
      tags:
        - - - - git
      operationId: git/delete-ref
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/git/refs#delete-a-reference
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/git-ref-only'
      responses:
        '204':
          description: Response
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: git
        subcategory: refs
  /repos/{owner}/{repo}/git/tags:
    post:
      summary: Create a tag object
      description: >-
        Note that creating a tag object does not create the reference that makes
        a tag in Git. If you want to create an annotated tag in Git, you have to
        do this call to create the tag object, and then
        [create](https://docs.github.com/enterprise-server@3.9/rest/git/refs#create-a-reference)
        the `refs/tags/[tag]` reference. If you want to create a lightweight
        tag, you only have to
        [create](https://docs.github.com/enterprise-server@3.9/rest/git/refs#create-a-reference)
        the tag reference - this call would be unnecessary.


        **Signature verification object**


        The response will include a `verification` object that describes the
        result of verifying the commit's signature. The following fields are
        included in the `verification` object:


        | Name | Type | Description |

        | - | - | -- |

        | `verified` | `boolean` | Indicates whether GitHub considers the
        signature in this commit to be verified. |

        | `reason` | `string` | The reason for verified value. Possible values
        and their meanings are enumerated in table below. |

        | `signature` | `string` | The signature that was extracted from the
        commit. |

        | `payload` | `string` | The value that was signed. |


        These are the possible values for `reason` in the `verification` object:


        | Value | Description |

        | -- | -- |

        | `expired_key` | The key that made the signature is expired. |

        | `not_signing_key` | The "signing" flag is not among the usage flags in
        the GPG key that made the signature. |

        | `gpgverify_error` | There was an error communicating with the
        signature verification service. |

        | `gpgverify_unavailable` | The signature verification service is
        currently unavailable. |

        | `unsigned` | The object does not include a signature. |

        | `unknown_signature_type` | A non-PGP signature was found in the
        commit. |

        | `no_user` | No user was associated with the `committer` email address
        in the commit. |

        | `unverified_email` | The `committer` email address in the commit was
        associated with a user, but the email address is not verified on their
        account. |

        | `bad_email` | The `committer` email address in the commit is not
        included in the identities of the PGP key that made the signature. |

        | `unknown_key` | The key that made the signature has not been
        registered with any user's account. |

        | `malformed_signature` | There was an error parsing the signature. |

        | `invalid` | The signature could not be cryptographically verified
        using the key whose key-id was found in the signature. |

        | `valid` | None of the above errors applied, so the signature is
        considered to be verified. |
      tags:
        - - - - git
      operationId: git/create-tag
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/git/tags#create-a-tag-object
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tag:
                  type: string
                  description: >-
                    The tag's name. This is typically a version (e.g.,
                    "v0.0.1").
                message:
                  type: string
                  description: The tag message.
                object:
                  type: string
                  description: The SHA of the git object this is tagging.
                type:
                  type: string
                  description: >-
                    The type of the object we're tagging. Normally this is a
                    `commit` but it can also be a `tree` or a `blob`.
                  enum:
                    - commit
                    - tree
                    - blob
                tagger:
                  type: object
                  description: >-
                    An object with information about the individual creating the
                    tag.
                  properties:
                    name:
                      type: string
                      description: The name of the author of the tag
                    email:
                      type: string
                      description: The email of the author of the tag
                    date:
                      type: string
                      format: date-time
                      description: >-
                        When this object was tagged. This is a timestamp in [ISO
                        8601](https://en.wikipedia.org/wiki/ISO_8601) format:
                        `YYYY-MM-DDTHH:MM:SSZ`.
                  required:
                    - name
                    - email
              required:
                - tag
                - message
                - object
                - type
            examples:
              default:
                value:
                  tag: v0.0.1
                  message: initial version
                  object: c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c
                  type: commit
                  tagger:
                    name: Monalisa Octocat
                    email: octocat@github.com
                    date: '2011-06-17T14:53:35-07:00'
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/git-tag'
              examples:
                default:
                  $ref: '#/components/examples/git-tag'
          headers:
            Location:
              example: >-
                https://api.github.com/repos/octocat/Hello-World/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac
              schema:
                type: string
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: git
        subcategory: tags
  /repos/{owner}/{repo}/git/tags/{tag_sha}:
    get:
      summary: Get a tag
      description: >-
        **Signature verification object**


        The response will include a `verification` object that describes the
        result of verifying the commit's signature. The following fields are
        included in the `verification` object:


        | Name | Type | Description |

        | - | - | -- |

        | `verified` | `boolean` | Indicates whether GitHub considers the
        signature in this commit to be verified. |

        | `reason` | `string` | The reason for verified value. Possible values
        and their meanings are enumerated in table below. |

        | `signature` | `string` | The signature that was extracted from the
        commit. |

        | `payload` | `string` | The value that was signed. |


        These are the possible values for `reason` in the `verification` object:


        | Value | Description |

        | -- | -- |

        | `expired_key` | The key that made the signature is expired. |

        | `not_signing_key` | The "signing" flag is not among the usage flags in
        the GPG key that made the signature. |

        | `gpgverify_error` | There was an error communicating with the
        signature verification service. |

        | `gpgverify_unavailable` | The signature verification service is
        currently unavailable. |

        | `unsigned` | The object does not include a signature. |

        | `unknown_signature_type` | A non-PGP signature was found in the
        commit. |

        | `no_user` | No user was associated with the `committer` email address
        in the commit. |

        | `unverified_email` | The `committer` email address in the commit was
        associated with a user, but the email address is not verified on their
        account. |

        | `bad_email` | The `committer` email address in the commit is not
        included in the identities of the PGP key that made the signature. |

        | `unknown_key` | The key that made the signature has not been
        registered with any user's account. |

        | `malformed_signature` | There was an error parsing the signature. |

        | `invalid` | The signature could not be cryptographically verified
        using the key whose key-id was found in the signature. |

        | `valid` | None of the above errors applied, so the signature is
        considered to be verified. |
      tags:
        - - - - git
      operationId: git/get-tag
      externalDocs:
        description: API method documentation
        url: https://docs.github.com/enterprise-server@3.9/rest/git/tags#get-a-tag
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: tag_sha
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/git-tag'
              examples:
                default:
                  $ref: '#/components/examples/git-tag'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: git
        subcategory: tags
  /repos/{owner}/{repo}/git/trees:
    post:
      summary: Create a tree
      description: >-
        The tree creation API accepts nested entries. If you specify both a tree
        and a nested path modifying that tree, this endpoint will overwrite the
        contents of the tree with the new path contents, and create a new tree
        structure.


        If you use this endpoint to add, delete, or modify the file contents in
        a tree, you will need to commit the tree and then update a branch to
        point to the commit. For more information see "[Create a
        commit](https://docs.github.com/enterprise-server@3.9/rest/git/commits#create-a-commit)"
        and "[Update a
        reference](https://docs.github.com/enterprise-server@3.9/rest/git/refs#update-a-reference)."


        Returns an error if you try to delete a file that does not exist.
      tags:
        - - - - git
      operationId: git/create-tree
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/git/trees#create-a-tree
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tree:
                  type: array
                  description: >-
                    Objects (of `path`, `mode`, `type`, and `sha`) specifying a
                    tree structure.
                  items:
                    type: object
                    properties:
                      path:
                        type: string
                        description: The file referenced in the tree.
                      mode:
                        type: string
                        description: >-
                          The file mode; one of `100644` for file (blob),
                          `100755` for executable (blob), `040000` for
                          subdirectory (tree), `160000` for submodule (commit),
                          or `120000` for a blob that specifies the path of a
                          symlink.
                        enum:
                          - '100644'
                          - '100755'
                          - '040000'
                          - '160000'
                          - '120000'
                      type:
                        type: string
                        description: Either `blob`, `tree`, or `commit`.
                        enum:
                          - blob
                          - tree
                          - commit
                      sha:
                        type: string
                        description: >-
                          The SHA1 checksum ID of the object in the tree. Also
                          called `tree.sha`. If the value is `null` then the
                          file will be deleted.  
                            
                          **Note:** Use either `tree.sha` or `content` to
                          specify the contents of the entry. Using both
                          `tree.sha` and `content` will return an error.
                        nullable: true
                      content:
                        type: string
                        description: >-
                          The content you want this file to have. GitHub will
                          write this blob out and use that SHA for this entry.
                          Use either this, or `tree.sha`.  
                            
                          **Note:** Use either `tree.sha` or `content` to
                          specify the contents of the entry. Using both
                          `tree.sha` and `content` will return an error.
                base_tree:
                  type: string
                  description: >
                    The SHA1 of an existing Git tree object which will be used
                    as the base for the new tree. If provided, a new Git tree
                    object will be created from entries in the Git tree object
                    pointed to by `base_tree` and entries defined in the `tree`
                    parameter. Entries defined in the `tree` parameter will
                    overwrite items from `base_tree` with the same `path`. If
                    you're creating new changes on a branch, then normally you'd
                    set `base_tree` to the SHA1 of the Git tree object of the
                    current latest commit on the branch you're working on.

                    If not provided, GitHub will create a new Git tree object
                    from only the entries defined in the `tree` parameter. If
                    you create a new commit pointing to such a tree, then all
                    files which were a part of the parent commit's tree and were
                    not defined in the `tree` parameter will be listed as
                    deleted by the new commit.
              required:
                - tree
            examples:
              default:
                value:
                  base_tree: 9fb037999f264ba9a7fc6274d15fa3ae2ab98312
                  tree:
                    - path: file.rb
                      mode: '100644'
                      type: blob
                      sha: 44b4fc6d56897b048c772eb4087f854f46256132
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/git-tree'
              examples:
                default:
                  $ref: '#/components/examples/git-tree'
          headers:
            Location:
              example: >-
                https://api.github.com/repos/octocat/Hello-World/trees/cd8274d15fa3ae2ab983129fb037999f264ba9a7
              schema:
                type: string
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: git
        subcategory: trees
  /repos/{owner}/{repo}/git/trees/{tree_sha}:
    get:
      summary: Get a tree
      description: >-
        Returns a single tree using the SHA1 value or ref name for that tree.


        If `truncated` is `true` in the response then the number of items in the
        `tree` array exceeded our maximum limit. If you need to fetch more
        items, use the non-recursive method of fetching trees, and fetch one
        sub-tree at a time.



        **Note**: The limit for the `tree` array is 100,000 entries with a
        maximum size of 7 MB when using the `recursive` parameter.
      tags:
        - - - - git
      operationId: git/get-tree
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/git/trees#get-a-tree
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: tree_sha
          description: The SHA1 value or ref (branch or tag) name of the tree.
          in: path
          required: true
          schema:
            type: string
          x-multi-segment: true
        - name: recursive
          description: >-
            Setting this parameter to any value returns the objects or subtrees
            referenced by the tree specified in `:tree_sha`. For example,
            setting `recursive` to any of the following will enable returning
            objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this
            parameter to prevent recursively returning objects or subtrees.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/git-tree'
              examples:
                default-response:
                  $ref: '#/components/examples/git-tree-default-response'
                response-recursively-retrieving-a-tree:
                  $ref: >-
                    #/components/examples/git-tree-response-recursively-retrieving-a-tree
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: git
        subcategory: trees
  /repos/{owner}/{repo}/hooks:
    get:
      summary: List repository webhooks
      description: >-
        Lists webhooks for a repository. `last response` may return null if
        there have not been any deliveries within 30 days.
      tags:
        - - - - repos
      operationId: repos/list-webhooks
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/webhooks#list-repository-webhooks
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/hook'
              examples:
                default:
                  $ref: '#/components/examples/hook-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: webhooks
    post:
      summary: Create a repository webhook
      description: >-
        Repositories can have multiple webhooks installed. Each webhook should
        have a unique `config`. Multiple webhooks can

        share the same `config` as long as those webhooks do not have any
        `events` that overlap.
      tags:
        - - - - repos
      operationId: repos/create-webhook
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/webhooks#create-a-repository-webhook
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              nullable: true
              properties:
                name:
                  type: string
                  description: >-
                    Use `web` to create a webhook. Default: `web`. This
                    parameter only accepts the value `web`.
                config:
                  type: object
                  description: Key/value pairs to provide settings for this webhook.
                  properties:
                    url:
                      $ref: '#/components/schemas/webhook-config-url'
                    content_type:
                      $ref: '#/components/schemas/webhook-config-content-type'
                    secret:
                      $ref: '#/components/schemas/webhook-config-secret'
                    insecure_ssl:
                      $ref: '#/components/schemas/webhook-config-insecure-ssl'
                events:
                  type: array
                  description: >-
                    Determines what
                    [events](https://docs.github.com/enterprise-server@3.9/webhooks/event-payloads)
                    the hook is triggered for.
                  default:
                    - push
                  items:
                    type: string
                active:
                  type: boolean
                  description: >-
                    Determines if notifications are sent when the webhook is
                    triggered. Set to `true` to send notifications.
                  default: true
              additionalProperties: false
            examples:
              default:
                value:
                  name: web
                  active: true
                  events:
                    - push
                    - pull_request
                  config:
                    url: https://example.com/webhook
                    content_type: json
                    insecure_ssl: '0'
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hook'
              examples:
                default:
                  $ref: '#/components/examples/hook'
          headers:
            Location:
              example: https://api.github.com/repos/octocat/Hello-World/hooks/12345678
              schema:
                type: string
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: webhooks
  /repos/{owner}/{repo}/hooks/{hook_id}:
    get:
      summary: Get a repository webhook
      description: >-
        Returns a webhook configured in a repository. To get only the webhook
        `config` properties, see "[Get a webhook configuration for a
        repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository)."
      tags:
        - - - - repos
      operationId: repos/get-webhook
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/webhooks#get-a-repository-webhook
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/hook-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hook'
              examples:
                default:
                  $ref: '#/components/examples/hook'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: webhooks
    patch:
      summary: Update a repository webhook
      description: >-
        Updates a webhook configured in a repository. If you previously had a
        `secret` set, you must provide the same `secret` or set a new `secret`
        or the secret will be removed. If you are only updating individual
        webhook `config` properties, use "[Update a webhook configuration for a
        repository](/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository)."
      tags:
        - - - - repos
      operationId: repos/update-webhook
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/webhooks#update-a-repository-webhook
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/hook-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                config:
                  $ref: '#/components/schemas/webhook-config'
                events:
                  type: array
                  description: >-
                    Determines what
                    [events](https://docs.github.com/enterprise-server@3.9/webhooks/event-payloads)
                    the hook is triggered for. This replaces the entire array of
                    events.
                  default:
                    - push
                  items:
                    type: string
                add_events:
                  type: array
                  description: >-
                    Determines a list of events to be added to the list of
                    events that the Hook triggers for.
                  items:
                    type: string
                remove_events:
                  type: array
                  description: >-
                    Determines a list of events to be removed from the list of
                    events that the Hook triggers for.
                  items:
                    type: string
                active:
                  type: boolean
                  description: >-
                    Determines if notifications are sent when the webhook is
                    triggered. Set to `true` to send notifications.
                  default: true
            examples:
              default:
                value:
                  active: true
                  add_events:
                    - pull_request
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hook'
              examples:
                default:
                  $ref: '#/components/examples/hook'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: webhooks
    delete:
      summary: Delete a repository webhook
      description: ''
      tags:
        - - - - repos
      operationId: repos/delete-webhook
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/webhooks#delete-a-repository-webhook
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/hook-id'
      responses:
        '204':
          description: Response
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: webhooks
  /repos/{owner}/{repo}/hooks/{hook_id}/config:
    get:
      summary: Get a webhook configuration for a repository
      description: >-
        Returns the webhook configuration for a repository. To get more
        information about the webhook, including the `active` state and
        `events`, use "[Get a repository
        webhook](/rest/webhooks/repos#get-a-repository-webhook)."


        OAuth app tokens and personal access tokens (classic) need the
        `read:repo_hook` or `repo` scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/get-webhook-config-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/webhooks#get-a-webhook-configuration-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/hook-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook-config'
              examples:
                default:
                  $ref: '#/components/examples/webhook-config'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: webhooks
    patch:
      summary: Update a webhook configuration for a repository
      description: >-
        Updates the webhook configuration for a repository. To update more
        information about the webhook, including the `active` state and
        `events`, use "[Update a repository
        webhook](/rest/webhooks/repos#update-a-repository-webhook)."


        OAuth app tokens and personal access tokens (classic) need the
        `write:repo_hook` or `repo` scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/update-webhook-config-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/webhooks#update-a-webhook-configuration-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/hook-id'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                url:
                  $ref: '#/components/schemas/webhook-config-url'
                content_type:
                  $ref: '#/components/schemas/webhook-config-content-type'
                secret:
                  $ref: '#/components/schemas/webhook-config-secret'
                insecure_ssl:
                  $ref: '#/components/schemas/webhook-config-insecure-ssl'
            examples:
              default:
                summary: Example of updating content type and URL
                value:
                  content_type: json
                  url: https://example.com/webhook
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook-config'
              examples:
                default:
                  $ref: '#/components/examples/webhook-config'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: webhooks
  /repos/{owner}/{repo}/hooks/{hook_id}/deliveries:
    get:
      summary: List deliveries for a repository webhook
      description: >-
        Returns a list of webhook deliveries for a webhook configured in a
        repository.
      tags:
        - - - - repos
      operationId: repos/list-webhook-deliveries
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/webhooks#list-deliveries-for-a-repository-webhook
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/hook-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/cursor'
        - name: redelivery
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/hook-delivery-item'
              examples:
                default:
                  $ref: '#/components/examples/hook-delivery-items'
        '400':
          $ref: '#/components/responses/bad_request'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: webhooks
  /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}:
    get:
      summary: Get a delivery for a repository webhook
      description: Returns a delivery for a webhook configured in a repository.
      tags:
        - - - - repos
      operationId: repos/get-webhook-delivery
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/webhooks#get-a-delivery-for-a-repository-webhook
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/hook-id'
        - $ref: '#/components/parameters/delivery-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hook-delivery'
              examples:
                default:
                  $ref: '#/components/examples/hook-delivery'
        '400':
          $ref: '#/components/responses/bad_request'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: webhooks
  /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts:
    post:
      summary: Redeliver a delivery for a repository webhook
      description: Redeliver a webhook delivery for a webhook configured in a repository.
      tags:
        - - - - repos
      operationId: repos/redeliver-webhook-delivery
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/webhooks#redeliver-a-delivery-for-a-repository-webhook
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/hook-id'
        - $ref: '#/components/parameters/delivery-id'
      responses:
        '202':
          $ref: '#/components/responses/accepted'
        '400':
          $ref: '#/components/responses/bad_request'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: webhooks
  /repos/{owner}/{repo}/hooks/{hook_id}/pings:
    post:
      summary: Ping a repository webhook
      description: >-
        This will trigger a [ping
        event](https://docs.github.com/enterprise-server@3.9/webhooks/#ping-event)
        to be sent to the hook.
      tags:
        - - - - repos
      operationId: repos/ping-webhook
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/webhooks#ping-a-repository-webhook
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/hook-id'
      responses:
        '204':
          description: Response
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: webhooks
  /repos/{owner}/{repo}/hooks/{hook_id}/tests:
    post:
      summary: Test the push repository webhook
      description: >-
        This will trigger the hook with the latest push to the current
        repository if the hook is subscribed to `push` events. If the hook is
        not subscribed to `push` events, the server will respond with 204 but no
        test POST will be generated.


        **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
      tags:
        - - - - repos
      operationId: repos/test-push-webhook
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/webhooks#test-the-push-repository-webhook
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/hook-id'
      responses:
        '204':
          description: Response
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: webhooks
  /repos/{owner}/{repo}/installation:
    get:
      summary: Get a repository installation for the authenticated app
      description: >-
        Enables an authenticated GitHub App to find the repository's
        installation information. The installation's account type will be either
        an organization or a user account, depending which account the
        repository belongs to.


        You must use a
        [JWT](https://docs.github.com/enterprise-server@3.9/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
        to access this endpoint.
      tags:
        - - - - apps
      operationId: apps/get-repo-installation
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/apps/apps#get-a-repository-installation-for-the-authenticated-app
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/installation'
              examples:
                default:
                  $ref: '#/components/examples/installation'
        '301':
          $ref: '#/components/responses/moved_permanently'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: apps
        subcategory: apps
  /repos/{owner}/{repo}/invitations:
    get:
      summary: List repository invitations
      description: >-
        When authenticating as a user with admin rights to a repository, this
        endpoint will list all currently open repository invitations.
      tags:
        - - - - repos
      operationId: repos/list-invitations
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/collaborators/invitations#list-repository-invitations
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/repository-invitation'
              examples:
                default:
                  $ref: '#/components/examples/repository-invitation-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: collaborators
        subcategory: invitations
  /repos/{owner}/{repo}/invitations/{invitation_id}:
    patch:
      summary: Update a repository invitation
      description: ''
      tags:
        - - - - repos
      operationId: repos/update-invitation
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/collaborators/invitations#update-a-repository-invitation
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/invitation-id'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                permissions:
                  type: string
                  description: >-
                    The permissions that the associated user will have on the
                    repository. Valid values are `read`, `write`, `maintain`,
                    `triage`, and `admin`.
                  enum:
                    - read
                    - write
                    - maintain
                    - triage
                    - admin
            examples:
              default:
                summary: Example request body
                value:
                  permissions: write
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repository-invitation'
              examples:
                default:
                  $ref: '#/components/examples/repository-invitation'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: collaborators
        subcategory: invitations
    delete:
      summary: Delete a repository invitation
      description: ''
      tags:
        - - - - repos
      operationId: repos/delete-invitation
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/collaborators/invitations#delete-a-repository-invitation
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/invitation-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: collaborators
        subcategory: invitations
  /repos/{owner}/{repo}/issues:
    get:
      summary: List repository issues
      description: >-
        List issues in a repository. Only open issues will be listed.


        **Note**: GitHub's REST API considers every pull request an issue, but
        not every issue is a pull request. For this

        reason, "Issues" endpoints may return both issues and pull requests in
        the response. You can identify pull requests by

        the `pull_request` key. Be aware that the `id` of a pull request
        returned from "Issues" endpoints will be an _issue id_. To find out the
        pull

        request id, use the "[List pull
        requests](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#list-pull-requests)"
        endpoint.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/list-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/issues#list-repository-issues
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: milestone
          description: >-
            If an `integer` is passed, it should refer to a milestone by its
            `number` field. If the string `*` is passed, issues with any
            milestone are accepted. If the string `none` is passed, issues
            without milestones are returned.
          in: query
          required: false
          schema:
            type: string
        - name: state
          description: Indicates the state of the issues to return.
          in: query
          required: false
          schema:
            type: string
            enum:
              - open
              - closed
              - all
            default: open
        - name: assignee
          description: >-
            Can be the name of a user. Pass in `none` for issues with no
            assigned user, and `*` for issues assigned to any user.
          in: query
          required: false
          schema:
            type: string
        - name: creator
          description: The user that created the issue.
          in: query
          required: false
          schema:
            type: string
        - name: mentioned
          description: A user that's mentioned in the issue.
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/labels'
        - name: sort
          description: What to sort results by.
          in: query
          required: false
          schema:
            type: string
            enum:
              - created
              - updated
              - comments
            default: created
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/since'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/issue'
              examples:
                default:
                  $ref: '#/components/examples/issue-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '301':
          $ref: '#/components/responses/moved_permanently'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: issues
    post:
      summary: Create an issue
      description: >-
        Any user with pull access to a repository can create an issue. If
        [issues are disabled in the
        repository](https://docs.github.com/enterprise-server@3.9/articles/disabling-issues/),
        the API returns a `410 Gone` status.


        This endpoint triggers
        [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        Creating content too quickly using this endpoint may result in secondary
        rate limiting. For more information, see "[Rate limits for the
        API](https://docs.github.com/enterprise-server@3.9/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"

        and "[Best practices for using the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/create
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/issues#create-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  oneOf:
                    - type: string
                    - type: integer
                  description: The title of the issue.
                body:
                  type: string
                  description: The contents of the issue.
                assignee:
                  type: string
                  description: >-
                    Login for the user that this issue should be assigned to.
                    _NOTE: Only users with push access can set the assignee for
                    new issues. The assignee is silently dropped otherwise.
                    **This field is deprecated.**_
                  nullable: true
                milestone:
                  oneOf:
                    - type: string
                    - type: integer
                      description: >-
                        The `number` of the milestone to associate this issue
                        with. _NOTE: Only users with push access can set the
                        milestone for new issues. The milestone is silently
                        dropped otherwise._
                  nullable: true
                labels:
                  type: array
                  description: >-
                    Labels to associate with this issue. _NOTE: Only users with
                    push access can set labels for new issues. Labels are
                    silently dropped otherwise._
                  items:
                    oneOf:
                      - type: string
                      - type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                          description:
                            type: string
                            nullable: true
                          color:
                            type: string
                            nullable: true
                assignees:
                  type: array
                  description: >-
                    Logins for Users to assign to this issue. _NOTE: Only users
                    with push access can set assignees for new issues. Assignees
                    are silently dropped otherwise._
                  items:
                    type: string
              required:
                - title
            examples:
              default:
                value:
                  title: Found a bug
                  body: I'm having a problem with this.
                  assignees:
                    - octocat
                  milestone: 1
                  labels:
                    - bug
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue'
              examples:
                default:
                  $ref: '#/components/examples/issue'
          headers:
            Location:
              example: https://api.github.com/repos/octocat/Hello-World/issues/1347
              schema:
                type: string
        '400':
          $ref: '#/components/responses/bad_request'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
        '422':
          $ref: '#/components/responses/validation_failed'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: issues
  /repos/{owner}/{repo}/issues/comments:
    get:
      summary: List issue comments for a repository
      description: >-
        You can use the REST API to list comments on issues and pull requests
        for a repository. Every pull request is an issue, but not every issue is
        a pull request.


        By default, issue comments are ordered by ascending ID.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/list-comments-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/comments#list-issue-comments-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/sort'
        - name: direction
          description: Either `asc` or `desc`. Ignored without the `sort` parameter.
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - $ref: '#/components/parameters/since'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/issue-comment'
              examples:
                default:
                  $ref: '#/components/examples/issue-comment-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: comments
  /repos/{owner}/{repo}/issues/comments/{comment_id}:
    get:
      summary: Get an issue comment
      description: >-
        You can use the REST API to get comments on issues and pull requests.
        Every pull request is an issue, but not every issue is a pull request.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/get-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/comments#get-an-issue-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue-comment'
              examples:
                default:
                  $ref: '#/components/examples/issue-comment'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: comments
    patch:
      summary: Update an issue comment
      description: >-
        You can use the REST API to update comments on issues and pull requests.
        Every pull request is an issue, but not every issue is a pull request.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/update-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/comments#update-an-issue-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The contents of the comment.
              required:
                - body
            examples:
              default:
                value:
                  body: Me too
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue-comment'
              examples:
                default:
                  $ref: '#/components/examples/issue-comment'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: comments
    delete:
      summary: Delete an issue comment
      description: >-
        You can use the REST API to delete comments on issues and pull requests.
        Every pull request is an issue, but not every issue is a pull request.
      tags:
        - - - - issues
      operationId: issues/delete-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/comments#delete-an-issue-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: comments
  /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions:
    get:
      summary: List reactions for an issue comment
      description: >-
        List the reactions to an [issue
        comment](https://docs.github.com/enterprise-server@3.9/rest/issues/comments#get-an-issue-comment).
      tags:
        - - - - reactions
      operationId: reactions/list-for-issue-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#list-reactions-for-an-issue-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
        - name: content
          description: >-
            Returns a single [reaction
            type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions).
            Omit this parameter to list all reactions to an issue comment.
          in: query
          required: false
          schema:
            type: string
            enum:
              - '+1'
              - '-1'
              - laugh
              - confused
              - heart
              - hooray
              - rocket
              - eyes
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
    post:
      summary: Create reaction for an issue comment
      description: >-
        Create a reaction to an [issue
        comment](https://docs.github.com/enterprise-server@3.9/rest/issues/comments#get-an-issue-comment).
        A response with an HTTP `200` status means that you already added the
        reaction type to this issue comment.
      tags:
        - - - - reactions
      operationId: reactions/create-for-issue-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#create-reaction-for-an-issue-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: >-
                    The [reaction
                    type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions)
                    to add to the issue comment.
                  enum:
                    - '+1'
                    - '-1'
                    - laugh
                    - confused
                    - heart
                    - hooray
                    - rocket
                    - eyes
              required:
                - content
            examples:
              default:
                value:
                  content: heart
      responses:
        '200':
          description: Reaction exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
        '201':
          description: Reaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
  /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}:
    delete:
      summary: Delete an issue comment reaction
      description: >-
        **Note:** You can also specify a repository by `repository_id` using the
        route `DELETE delete
        /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.


        Delete a reaction to an [issue
        comment](https://docs.github.com/enterprise-server@3.9/rest/issues/comments#get-an-issue-comment).
      tags:
        - - - - reactions
      operationId: reactions/delete-for-issue-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#delete-an-issue-comment-reaction
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
        - $ref: '#/components/parameters/reaction-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
  /repos/{owner}/{repo}/issues/events:
    get:
      summary: List issue events for a repository
      description: Lists events for a repository.
      tags:
        - - - - issues
      operationId: issues/list-events-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/events#list-issue-events-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/issue-event'
              examples:
                default:
                  $ref: '#/components/examples/issue-event-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: events
  /repos/{owner}/{repo}/issues/events/{event_id}:
    get:
      summary: Get an issue event
      description: Gets a single event by the event id.
      tags:
        - - - - issues
      operationId: issues/get-event
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/events#get-an-issue-event
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: event_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue-event'
              examples:
                default:
                  $ref: '#/components/examples/issue-event'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: events
  /repos/{owner}/{repo}/issues/{issue_number}:
    get:
      summary: Get an issue
      description: >-
        The API returns a [`301 Moved Permanently`
        status](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api#follow-redirects)
        if the issue was

        [transferred](https://docs.github.com/enterprise-server@3.9/articles/transferring-an-issue-to-another-repository/)
        to another repository. If

        the issue was transferred to or deleted from a repository where the
        authenticated user lacks read access, the API

        returns a `404 Not Found` status. If the issue was deleted from a
        repository where the authenticated user has read

        access, the API returns a `410 Gone` status. To receive webhook events
        for transferred and deleted issues, subscribe

        to the
        [`issues`](https://docs.github.com/enterprise-server@3.9/webhooks/event-payloads/#issues)
        webhook.


        **Note**: GitHub's REST API considers every pull request an issue, but
        not every issue is a pull request. For this

        reason, "Issues" endpoints may return both issues and pull requests in
        the response. You can identify pull requests by

        the `pull_request` key. Be aware that the `id` of a pull request
        returned from "Issues" endpoints will be an _issue id_. To find out the
        pull

        request id, use the "[List pull
        requests](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#list-pull-requests)"
        endpoint.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/get
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/issues#get-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue'
              examples:
                default:
                  $ref: '#/components/examples/issue'
        '301':
          $ref: '#/components/responses/moved_permanently'
        '304':
          $ref: '#/components/responses/not_modified'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: issues
    patch:
      summary: Update an issue
      description: >-
        Issue owners and users with push access can edit an issue.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/update
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/issues#update-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  oneOf:
                    - type: string
                    - type: integer
                  description: The title of the issue.
                  nullable: true
                body:
                  type: string
                  description: The contents of the issue.
                  nullable: true
                assignee:
                  type: string
                  nullable: true
                  description: >-
                    Username to assign to this issue. **This field is
                    deprecated.**
                state:
                  type: string
                  description: The open or closed state of the issue.
                  enum:
                    - open
                    - closed
                state_reason:
                  type: string
                  enum:
                    - completed
                    - not_planned
                    - reopened
                  nullable: true
                  description: >-
                    The reason for the state change. Ignored unless `state` is
                    changed.
                  example: not_planned
                milestone:
                  oneOf:
                    - type: string
                    - type: integer
                      description: >-
                        The `number` of the milestone to associate this issue
                        with or use `null` to remove the current milestone. Only
                        users with push access can set the milestone for issues.
                        Without push access to the repository, milestone changes
                        are silently dropped.
                  nullable: true
                labels:
                  type: array
                  description: >-
                    Labels to associate with this issue. Pass one or more labels
                    to _replace_ the set of labels on this issue. Send an empty
                    array (`[]`) to clear all labels from the issue. Only users
                    with push access can set labels for issues. Without push
                    access to the repository, label changes are silently
                    dropped.
                  items:
                    oneOf:
                      - type: string
                      - type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                          description:
                            type: string
                            nullable: true
                          color:
                            type: string
                            nullable: true
                assignees:
                  type: array
                  description: >-
                    Usernames to assign to this issue. Pass one or more user
                    logins to _replace_ the set of assignees on this issue. Send
                    an empty array (`[]`) to clear all assignees from the issue.
                    Only users with push access can set assignees for new
                    issues. Without push access to the repository, assignee
                    changes are silently dropped.
                  items:
                    type: string
            examples:
              default:
                value:
                  title: Found a bug
                  body: I'm having a problem with this.
                  assignees:
                    - octocat
                  milestone: 1
                  state: open
                  labels:
                    - bug
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue'
              examples:
                default:
                  $ref: '#/components/examples/issue'
        '301':
          $ref: '#/components/responses/moved_permanently'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
        '422':
          $ref: '#/components/responses/validation_failed'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: issues
  /repos/{owner}/{repo}/issues/{issue_number}/assignees:
    post:
      summary: Add assignees to an issue
      description: >-
        Adds up to 10 assignees to an issue. Users already assigned to an issue
        are not replaced.
      tags:
        - - - - issues
      operationId: issues/add-assignees
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/assignees#add-assignees-to-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                assignees:
                  type: array
                  description: >-
                    Usernames of people to assign this issue to. _NOTE: Only
                    users with push access can add assignees to an issue.
                    Assignees are silently ignored otherwise._
                  items:
                    type: string
            examples:
              default:
                value:
                  assignees:
                    - hubot
                    - other_user
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue'
              examples:
                default:
                  $ref: '#/components/examples/issue'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: assignees
    delete:
      summary: Remove assignees from an issue
      description: Removes one or more assignees from an issue.
      tags:
        - - - - issues
      operationId: issues/remove-assignees
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/assignees#remove-assignees-from-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                assignees:
                  type: array
                  description: >-
                    Usernames of assignees to remove from an issue. _NOTE: Only
                    users with push access can remove assignees from an issue.
                    Assignees are silently ignored otherwise._
                  items:
                    type: string
            examples:
              default:
                value:
                  assignees:
                    - hubot
                    - other_user
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue'
              examples:
                default:
                  $ref: '#/components/examples/issue'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: assignees
  /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}:
    get:
      summary: Check if a user can be assigned to a issue
      description: >-
        Checks if a user has permission to be assigned to a specific issue.


        If the `assignee` can be assigned to this issue, a `204` status code
        with no content is returned.


        Otherwise a `404` status code is returned.
      tags:
        - - - - issues
      operationId: issues/check-user-can-be-assigned-to-issue
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/assignees#check-if-a-user-can-be-assigned-to-a-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
        - name: assignee
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Response if `assignee` can be assigned to `issue_number`
        '404':
          description: Response if `assignee` can not be assigned to `issue_number`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/basic-error'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: assignees
  /repos/{owner}/{repo}/issues/{issue_number}/comments:
    get:
      summary: List issue comments
      description: >-
        You can use the REST API to list comments on issues and pull requests.
        Every pull request is an issue, but not every issue is a pull request.


        Issue comments are ordered by ascending ID.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/list-comments
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/comments#list-issue-comments
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
        - $ref: '#/components/parameters/since'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/issue-comment'
              examples:
                default:
                  $ref: '#/components/examples/issue-comment-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: comments
    post:
      summary: Create an issue comment
      description: >-
        You can use the REST API to create comments on issues and pull requests.
        Every pull request is an issue, but not every issue is a pull request.


        This endpoint triggers
        [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications).

        Creating content too quickly using this endpoint may result in secondary
        rate limiting.

        For more information, see "[Rate limits for the
        API](https://docs.github.com/enterprise-server@3.9/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"

        and "[Best practices for using the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.
      tags:
        - - - - issues
      operationId: issues/create-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/comments#create-an-issue-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The contents of the comment.
              required:
                - body
            examples:
              default:
                value:
                  body: Me too
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue-comment'
              examples:
                default:
                  $ref: '#/components/examples/issue-comment'
          headers:
            Location:
              example: >-
                https://api.github.com/repos/octocat/Hello-World/issues/comments/1
              schema:
                type: string
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: comments
  /repos/{owner}/{repo}/issues/{issue_number}/events:
    get:
      summary: List issue events
      description: Lists all events for an issue.
      tags:
        - - - - issues
      operationId: issues/list-events
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/events#list-issue-events
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/issue-event-for-issue'
              examples:
                default:
                  $ref: '#/components/examples/issue-event-for-issue-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: events
  /repos/{owner}/{repo}/issues/{issue_number}/labels:
    get:
      summary: List labels for an issue
      description: Lists all labels for an issue.
      tags:
        - - - - issues
      operationId: issues/list-labels-on-issue
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/labels#list-labels-for-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/label'
              examples:
                default:
                  $ref: '#/components/examples/label-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '301':
          $ref: '#/components/responses/moved_permanently'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: labels
    post:
      summary: Add labels to an issue
      description: >-
        Adds labels to an issue. If you provide an empty array of labels, all
        labels are removed from the issue. 
      tags:
        - - - - issues
      operationId: issues/add-labels
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/labels#add-labels-to-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    labels:
                      type: array
                      minItems: 1
                      description: >-
                        The names of the labels to add to the issue's existing
                        labels. You can pass an empty array to remove all
                        labels. Alternatively, you can pass a single label as a
                        `string` or an `array` of labels directly, but GitHub
                        recommends passing an object with the `labels` key. You
                        can also replace all of the labels for an issue. For
                        more information, see "[Set labels for an
                        issue](https://docs.github.com/enterprise-server@3.9/rest/issues/labels#set-labels-for-an-issue)."
                      items:
                        type: string
                - type: array
                  minItems: 1
                  items:
                    type: string
                - type: object
                  properties:
                    labels:
                      type: array
                      minItems: 1
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                        required:
                          - name
                - type: array
                  minItems: 1
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                    required:
                      - name
                - type: string
            examples:
              default:
                value:
                  labels:
                    - bug
                    - enhancement
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/label'
              examples:
                default:
                  $ref: '#/components/examples/label-items'
        '301':
          $ref: '#/components/responses/moved_permanently'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: labels
    put:
      summary: Set labels for an issue
      description: Removes any previous labels and sets the new labels for an issue.
      tags:
        - - - - issues
      operationId: issues/set-labels
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/labels#set-labels-for-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    labels:
                      type: array
                      minItems: 1
                      description: >-
                        The names of the labels to set for the issue. The labels
                        you set replace any existing labels. You can pass an
                        empty array to remove all labels. Alternatively, you can
                        pass a single label as a `string` or an `array` of
                        labels directly, but GitHub recommends passing an object
                        with the `labels` key. You can also add labels to the
                        existing labels for an issue. For more information, see
                        "[Add labels to an
                        issue](https://docs.github.com/enterprise-server@3.9/rest/issues/labels#add-labels-to-an-issue)."
                      items:
                        type: string
                - type: array
                  minItems: 1
                  items:
                    type: string
                - type: object
                  properties:
                    labels:
                      type: array
                      minItems: 1
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                        required:
                          - name
                - type: array
                  minItems: 1
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                    required:
                      - name
                - type: string
            examples:
              default:
                value:
                  labels:
                    - bug
                    - enhancement
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/label'
              examples:
                default:
                  $ref: '#/components/examples/label-items'
        '301':
          $ref: '#/components/responses/moved_permanently'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: labels
    delete:
      summary: Remove all labels from an issue
      description: Removes all labels from an issue.
      tags:
        - - - - issues
      operationId: issues/remove-all-labels
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/labels#remove-all-labels-from-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      responses:
        '204':
          description: Response
        '301':
          $ref: '#/components/responses/moved_permanently'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: labels
  /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}:
    delete:
      summary: Remove a label from an issue
      description: >-
        Removes the specified label from the issue, and returns the remaining
        labels on the issue. This endpoint returns a `404 Not Found` status if
        the label does not exist.
      tags:
        - - - - issues
      operationId: issues/remove-label
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/labels#remove-a-label-from-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/label'
              examples:
                default:
                  $ref: '#/components/examples/label-items-2'
        '301':
          $ref: '#/components/responses/moved_permanently'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: labels
  /repos/{owner}/{repo}/issues/{issue_number}/lock:
    put:
      summary: Lock an issue
      description: >-
        Users with push access can lock an issue or pull request's conversation.


        Note that, if you choose not to pass any parameters, you'll need to set
        `Content-Length` to zero when calling out to this endpoint. For more
        information, see "[HTTP
        method](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#http-method)."
      tags:
        - - - - issues
      operationId: issues/lock
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/issues#lock-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              nullable: true
              properties:
                lock_reason:
                  type: string
                  description: >-
                    The reason for locking the issue or pull request
                    conversation. Lock will fail if you don't use one of these
                    reasons:  
                     * `off-topic`  
                     * `too heated`  
                     * `resolved`  
                     * `spam`
                  enum:
                    - off-topic
                    - too heated
                    - resolved
                    - spam
            examples:
              default:
                summary: Example of locking an issue as off-topic
                value:
                  lock_reason: off-topic
      responses:
        '204':
          description: Response
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: issues
    delete:
      summary: Unlock an issue
      description: Users with push access can unlock an issue's conversation.
      tags:
        - - - - issues
      operationId: issues/unlock
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/issues#unlock-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      responses:
        '204':
          description: Response
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: issues
  /repos/{owner}/{repo}/issues/{issue_number}/reactions:
    get:
      summary: List reactions for an issue
      description: >-
        List the reactions to an
        [issue](https://docs.github.com/enterprise-server@3.9/rest/issues/issues#get-an-issue).
      tags:
        - - - - reactions
      operationId: reactions/list-for-issue
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#list-reactions-for-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
        - name: content
          description: >-
            Returns a single [reaction
            type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions).
            Omit this parameter to list all reactions to an issue.
          in: query
          required: false
          schema:
            type: string
            enum:
              - '+1'
              - '-1'
              - laugh
              - confused
              - heart
              - hooray
              - rocket
              - eyes
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
    post:
      summary: Create reaction for an issue
      description: >-
        Create a reaction to an
        [issue](https://docs.github.com/enterprise-server@3.9/rest/issues/issues#get-an-issue).
        A response with an HTTP `200` status means that you already added the
        reaction type to this issue.
      tags:
        - - - - reactions
      operationId: reactions/create-for-issue
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#create-reaction-for-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: >-
                    The [reaction
                    type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions)
                    to add to the issue.
                  enum:
                    - '+1'
                    - '-1'
                    - laugh
                    - confused
                    - heart
                    - hooray
                    - rocket
                    - eyes
              required:
                - content
            examples:
              default:
                value:
                  content: heart
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: reactions
        subcategory: reactions
  /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}:
    delete:
      summary: Delete an issue reaction
      description: >-
        **Note:** You can also specify a repository by `repository_id` using the
        route `DELETE
        /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.


        Delete a reaction to an
        [issue](https://docs.github.com/enterprise-server@3.9/rest/issues/issues#get-an-issue).
      tags:
        - - - - reactions
      operationId: reactions/delete-for-issue
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#delete-an-issue-reaction
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
        - $ref: '#/components/parameters/reaction-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
  /repos/{owner}/{repo}/issues/{issue_number}/timeline:
    get:
      summary: List timeline events for an issue
      description: List all timeline events for an issue.
      tags:
        - - - - issues
      operationId: issues/list-events-for-timeline
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/timeline#list-timeline-events-for-an-issue
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/issue-number'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/timeline-issue-events'
              examples:
                default:
                  $ref: '#/components/examples/timeline-issue-events'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: timeline
  /repos/{owner}/{repo}/keys:
    get:
      summary: List deploy keys
      description: ''
      tags:
        - - - - repos
      operationId: repos/list-deploy-keys
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deploy-keys/deploy-keys#list-deploy-keys
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/deploy-key'
              examples:
                default:
                  $ref: '#/components/examples/deploy-key-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deploy-keys
        subcategory: deploy-keys
    post:
      summary: Create a deploy key
      description: You can create a read-only deploy key.
      tags:
        - - - - repos
      operationId: repos/create-deploy-key
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deploy-keys/deploy-keys#create-a-deploy-key
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: A name for the key.
                key:
                  type: string
                  description: The contents of the key.
                read_only:
                  type: boolean
                  description: >-
                    If `true`, the key will only be able to read repository
                    contents. Otherwise, the key will be able to read and
                    write.  
                      
                    Deploy keys with write access can perform the same actions
                    as an organization member with admin access, or a
                    collaborator on a personal repository. For more information,
                    see "[Repository permission levels for an
                    organization](https://docs.github.com/enterprise-server@3.9/articles/repository-permission-levels-for-an-organization/)"
                    and "[Permission levels for a user account
                    repository](https://docs.github.com/enterprise-server@3.9/articles/permission-levels-for-a-user-account-repository/)."
              required:
                - key
            examples:
              default:
                value:
                  title: octocat@octomac
                  key: ssh-rsa AAA...
                  read_only: true
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deploy-key'
              examples:
                default:
                  $ref: '#/components/examples/deploy-key'
          headers:
            Location:
              example: https://api.github.com/repos/octocat/Hello-World/keys/1
              schema:
                type: string
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deploy-keys
        subcategory: deploy-keys
  /repos/{owner}/{repo}/keys/{key_id}:
    get:
      summary: Get a deploy key
      description: ''
      tags:
        - - - - repos
      operationId: repos/get-deploy-key
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deploy-keys/deploy-keys#get-a-deploy-key
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/key-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deploy-key'
              examples:
                default:
                  $ref: '#/components/examples/deploy-key'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deploy-keys
        subcategory: deploy-keys
    delete:
      summary: Delete a deploy key
      description: >-
        Deploy keys are immutable. If you need to update a key, remove the key
        and create a new one instead.
      tags:
        - - - - repos
      operationId: repos/delete-deploy-key
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/deploy-keys/deploy-keys#delete-a-deploy-key
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/key-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: deploy-keys
        subcategory: deploy-keys
  /repos/{owner}/{repo}/labels:
    get:
      summary: List labels for a repository
      description: Lists all labels for a repository.
      tags:
        - - - - issues
      operationId: issues/list-labels-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/labels#list-labels-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/label'
              examples:
                default:
                  $ref: '#/components/examples/label-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: labels
    post:
      summary: Create a label
      description: >-
        Creates a label for the specified repository with the given name and
        color. The name and color parameters are required. The color must be a
        valid [hexadecimal color code](http://www.color-hex.com/).
      tags:
        - - - - issues
      operationId: issues/create-label
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/labels#create-a-label
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: >-
                    The name of the label. Emoji can be added to label names,
                    using either native emoji or colon-style markup. For
                    example, typing `:strawberry:` will render the emoji
                    ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png
                    ":strawberry:"). For a full list of available emoji and
                    codes, see "[Emoji cheat
                    sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
                color:
                  type: string
                  description: >-
                    The [hexadecimal color code](http://www.color-hex.com/) for
                    the label, without the leading `#`.
                description:
                  type: string
                  description: >-
                    A short description of the label. Must be 100 characters or
                    fewer.
              required:
                - name
            examples:
              default:
                value:
                  name: bug
                  description: Something isn't working
                  color: f29513
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/label'
              examples:
                default:
                  $ref: '#/components/examples/label'
          headers:
            Location:
              example: https://api.github.com/repos/octocat/Hello-World/labels/bug
              schema:
                type: string
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: labels
  /repos/{owner}/{repo}/labels/{name}:
    get:
      summary: Get a label
      description: Gets a label using the given name.
      tags:
        - - - - issues
      operationId: issues/get-label
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/labels#get-a-label
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/label'
              examples:
                default:
                  $ref: '#/components/examples/label'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: labels
    patch:
      summary: Update a label
      description: Updates a label using the given label name.
      tags:
        - - - - issues
      operationId: issues/update-label
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/labels#update-a-label
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                new_name:
                  type: string
                  description: >-
                    The new name of the label. Emoji can be added to label
                    names, using either native emoji or colon-style markup. For
                    example, typing `:strawberry:` will render the emoji
                    ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png
                    ":strawberry:"). For a full list of available emoji and
                    codes, see "[Emoji cheat
                    sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
                color:
                  type: string
                  description: >-
                    The [hexadecimal color code](http://www.color-hex.com/) for
                    the label, without the leading `#`.
                description:
                  type: string
                  description: >-
                    A short description of the label. Must be 100 characters or
                    fewer.
            examples:
              default:
                value:
                  new_name: 'bug :bug:'
                  description: Small bug fix required
                  color: b01f26
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/label'
              examples:
                default:
                  $ref: '#/components/examples/label-2'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: labels
    delete:
      summary: Delete a label
      description: Deletes a label using the given label name.
      tags:
        - - - - issues
      operationId: issues/delete-label
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/labels#delete-a-label
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: labels
  /repos/{owner}/{repo}/languages:
    get:
      summary: List repository languages
      description: >-
        Lists languages for the specified repository. The value shown for each
        language is the number of bytes of code written in that language.
      tags:
        - - - - repos
      operationId: repos/list-languages
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#list-repository-languages
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/language'
              examples:
                default:
                  $ref: '#/components/examples/language'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
  /repos/{owner}/{repo}/lfs:
    put:
      summary: Enable Git LFS for a repository
      description: >-
        Enables Git LFS for a repository.


        OAuth app tokens and personal access tokens (classic) need the
        `admin:enterprise` scope to use this endpoint.
      operationId: repos/enable-lfs-for-repo
      tags:
        - - - - repos
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/lfs#enable-git-lfs-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '202':
          $ref: '#/components/responses/accepted'
        '403':
          description: >-
            We will return a 403 with one of the following messages:


            - Git LFS support not enabled because Git LFS is globally disabled.

            - Git LFS support not enabled because Git LFS is disabled for the
            root repository in the network.

            - Git LFS support not enabled because Git LFS is disabled for
            <owner>.
      x-github:
        githubCloudOnly: true
        enabledForGitHubApps: false
        category: repos
        subcategory: lfs
    delete:
      summary: Disable Git LFS for a repository
      description: >-
        Disables Git LFS for a repository.


        OAuth app tokens and personal access tokens (classic) need the
        `admin:enterprise` scope to use this endpoint.
      operationId: repos/disable-lfs-for-repo
      tags:
        - - - - repos
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/lfs#disable-git-lfs-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: true
        enabledForGitHubApps: false
        category: repos
        subcategory: lfs
  /repos/{owner}/{repo}/license:
    get:
      summary: Get the license for a repository
      description: >-
        This method returns the contents of the repository's license file, if
        one is detected.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw contents of the
        license.

        - **`application/vnd.github.html+json`**: Returns the license contents
        in HTML. Markup languages are rendered to HTML using GitHub's
        open-source [Markup library](https://github.com/github/markup).
      tags:
        - - - - licenses
      operationId: licenses/get-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/licenses/licenses#get-the-license-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/license-content'
              examples:
                default:
                  $ref: '#/components/examples/license-content'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: licenses
        subcategory: licenses
  /repos/{owner}/{repo}/merge-upstream:
    post:
      summary: Sync a fork branch with the upstream repository
      description: >-
        Sync a branch of a forked repository to keep it up-to-date with the
        upstream repository.
      tags:
        - - - - repos
      operationId: repos/merge-upstream
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branches#sync-a-fork-branch-with-the-upstream-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch:
                  type: string
                  description: >-
                    The name of the branch which should be updated to match
                    upstream.
              required:
                - branch
            examples:
              default:
                value:
                  branch: main
      responses:
        '200':
          description: The branch has been successfully synced with the upstream repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merged-upstream'
              examples:
                default:
                  $ref: '#/components/examples/merged-upstream'
        '409':
          description: The branch could not be synced because of a merge conflict
        '422':
          description: The branch could not be synced for some other reason
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branches
  /repos/{owner}/{repo}/merges:
    post:
      summary: Merge a branch
      description: ''
      tags:
        - - - - repos
      operationId: repos/merge
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/branches/branches#merge-a-branch
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                base:
                  type: string
                  description: >-
                    The name of the base branch that the head will be merged
                    into.
                head:
                  type: string
                  description: >-
                    The head to merge. This can be a branch name or a commit
                    SHA1.
                commit_message:
                  type: string
                  description: >-
                    Commit message to use for the merge commit. If omitted, a
                    default message will be used.
              required:
                - base
                - head
            examples:
              default:
                value:
                  base: master
                  head: cool_feature
                  commit_message: Shipped cool_feature!
      responses:
        '201':
          description: Successful Response (The resulting merge commit)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commit'
              examples:
                default:
                  $ref: '#/components/examples/commit'
        '204':
          description: Response when already merged
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Not Found when the base or head does not exist
        '409':
          description: Conflict when there is a merge conflict
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: branches
        subcategory: branches
  /repos/{owner}/{repo}/milestones:
    get:
      summary: List milestones
      description: Lists milestones for a repository.
      tags:
        - - - - issues
      operationId: issues/list-milestones
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/milestones#list-milestones
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: state
          description: The state of the milestone. Either `open`, `closed`, or `all`.
          in: query
          required: false
          schema:
            type: string
            enum:
              - open
              - closed
              - all
            default: open
        - name: sort
          description: What to sort results by. Either `due_on` or `completeness`.
          in: query
          required: false
          schema:
            type: string
            enum:
              - due_on
              - completeness
            default: due_on
        - name: direction
          description: The direction of the sort. Either `asc` or `desc`.
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/milestone'
              examples:
                default:
                  $ref: '#/components/examples/milestone-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: milestones
    post:
      summary: Create a milestone
      description: Creates a milestone.
      tags:
        - - - - issues
      operationId: issues/create-milestone
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/milestones#create-a-milestone
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the milestone.
                state:
                  type: string
                  description: The state of the milestone. Either `open` or `closed`.
                  enum:
                    - open
                    - closed
                  default: open
                description:
                  type: string
                  description: A description of the milestone.
                due_on:
                  type: string
                  format: date-time
                  description: >-
                    The milestone due date. This is a timestamp in [ISO
                    8601](https://en.wikipedia.org/wiki/ISO_8601) format:
                    `YYYY-MM-DDTHH:MM:SSZ`.
              required:
                - title
            examples:
              default:
                value:
                  title: v1.0
                  state: open
                  description: Tracking milestone for version 1.0
                  due_on: '2012-10-09T23:39:01Z'
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/milestone'
              examples:
                default:
                  $ref: '#/components/examples/milestone'
          headers:
            Location:
              example: https://api.github.com/repos/octocat/Hello-World/milestones/1
              schema:
                type: string
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: milestones
  /repos/{owner}/{repo}/milestones/{milestone_number}:
    get:
      summary: Get a milestone
      description: Gets a milestone using the given milestone number.
      tags:
        - - - - issues
      operationId: issues/get-milestone
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/milestones#get-a-milestone
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/milestone-number'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/milestone'
              examples:
                default:
                  $ref: '#/components/examples/milestone'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: milestones
    patch:
      summary: Update a milestone
      description: ''
      tags:
        - - - - issues
      operationId: issues/update-milestone
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/milestones#update-a-milestone
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/milestone-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the milestone.
                state:
                  type: string
                  description: The state of the milestone. Either `open` or `closed`.
                  enum:
                    - open
                    - closed
                  default: open
                description:
                  type: string
                  description: A description of the milestone.
                due_on:
                  type: string
                  format: date-time
                  description: >-
                    The milestone due date. This is a timestamp in [ISO
                    8601](https://en.wikipedia.org/wiki/ISO_8601) format:
                    `YYYY-MM-DDTHH:MM:SSZ`.
            examples:
              default:
                value:
                  title: v1.0
                  state: open
                  description: Tracking milestone for version 1.0
                  due_on: '2012-10-09T23:39:01Z'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/milestone'
              examples:
                default:
                  $ref: '#/components/examples/milestone'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: milestones
    delete:
      summary: Delete a milestone
      description: Deletes a milestone using the given milestone number.
      tags:
        - - - - issues
      operationId: issues/delete-milestone
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/milestones#delete-a-milestone
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/milestone-number'
      responses:
        '204':
          description: Response
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: milestones
  /repos/{owner}/{repo}/milestones/{milestone_number}/labels:
    get:
      summary: List labels for issues in a milestone
      description: Lists labels for issues in a milestone.
      tags:
        - - - - issues
      operationId: issues/list-labels-for-milestone
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/issues/labels#list-labels-for-issues-in-a-milestone
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/milestone-number'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/label'
              examples:
                default:
                  $ref: '#/components/examples/label-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: issues
        subcategory: labels
  /repos/{owner}/{repo}/notifications:
    get:
      summary: List repository notifications for the authenticated user
      description: >-
        Lists all notifications for the current user in the specified
        repository.
      tags:
        - - - - activity
      operationId: activity/list-repo-notifications-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/all'
        - $ref: '#/components/parameters/participating'
        - $ref: '#/components/parameters/since'
        - $ref: '#/components/parameters/before'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/thread'
              examples:
                default:
                  $ref: '#/components/examples/thread-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: activity
        subcategory: notifications
    put:
      summary: Mark repository notifications as read
      description: >-
        Marks all notifications in a repository as "read" for the current user.
        If the number of notifications is too large to complete in one request,
        you will receive a `202 Accepted` status and GitHub Enterprise Server
        will run an asynchronous process to mark notifications as "read." To
        check whether any "unread" notifications remain, you can use the [List
        repository notifications for the authenticated
        user](https://docs.github.com/enterprise-server@3.9/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user)
        endpoint and pass the query parameter `all=false`.
      tags:
        - - - - activity
      operationId: activity/mark-repo-notifications-as-read
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/notifications#mark-repository-notifications-as-read
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                last_read_at:
                  type: string
                  format: date-time
                  description: >-
                    Describes the last point that notifications were checked.
                    Anything updated since this time will not be marked as read.
                    If you omit this parameter, all notifications are marked as
                    read. This is a timestamp in [ISO
                    8601](https://en.wikipedia.org/wiki/ISO_8601) format:
                    `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
            examples:
              default:
                value:
                  last_read_at: '2019-01-01T00:00:00Z'
      responses:
        '202':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  url:
                    type: string
              examples:
                default:
                  value:
                    message: >-
                      Unread notifications couldn't be marked in a single
                      request. Notifications are being marked as read in the
                      background.
        '205':
          description: Reset Content
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: activity
        subcategory: notifications
  /repos/{owner}/{repo}/pages:
    get:
      summary: Get a GitHub Enterprise Server Pages site
      description: >-
        Gets information about a GitHub Enterprise Server Pages site.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/get-pages
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pages/pages#get-a-apiname-pages-site
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/page'
              examples:
                default:
                  $ref: '#/components/examples/page'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pages
        subcategory: pages
    post:
      summary: Create a GitHub Enterprise Server Pages site
      description: >-
        Configures a GitHub Enterprise Server Pages site. For more information,
        see "[About GitHub
        Pages](/github/working-with-github-pages/about-github-pages)."


        The authenticated user must be a repository administrator, maintainer,
        or have the 'manage GitHub Pages settings' permission.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/create-pages-site
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pages/pages#create-a-apiname-pages-site
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: The source branch and directory used to publish your Pages site.
              nullable: true
              properties:
                build_type:
                  type: string
                  description: >-
                    The process in which the Page will be built. Possible values
                    are `"legacy"` and `"workflow"`.
                  enum:
                    - legacy
                    - workflow
                source:
                  type: object
                  description: >-
                    The source branch and directory used to publish your Pages
                    site.
                  properties:
                    branch:
                      type: string
                      description: >-
                        The repository branch used to publish your site's source
                        files.
                    path:
                      type: string
                      description: >-
                        The repository directory that includes the source files
                        for the Pages site. Allowed paths are `/` or `/docs`.
                        Default: `/`
                      enum:
                        - /
                        - /docs
                      default: /
                  required:
                    - branch
              anyOf:
                - required:
                    - source
                - required:
                    - build_type
            examples:
              default:
                value:
                  source:
                    branch: main
                    path: /docs
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/page'
              examples:
                default:
                  $ref: '#/components/examples/page'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pages
        subcategory: pages
    put:
      summary: Update information about a GitHub Enterprise Server Pages site
      description: >-
        Updates information for a GitHub Enterprise Server Pages site. For more
        information, see "[About GitHub
        Pages](/github/working-with-github-pages/about-github-pages).


        The authenticated user must be a repository administrator, maintainer,
        or have the 'manage GitHub Pages settings' permission.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/update-information-about-pages-site
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pages/pages#update-information-about-a-apiname-pages-site
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cname:
                  type: string
                  description: >-
                    Specify a custom domain for the repository. Sending a `null`
                    value will remove the custom domain. For more about custom
                    domains, see "[Using a custom domain with GitHub
                    Pages](https://docs.github.com/enterprise-server@3.9/articles/using-a-custom-domain-with-github-pages/)."
                  nullable: true
                https_enforced:
                  type: boolean
                  description: Specify whether HTTPS should be enforced for the repository.
                build_type:
                  type: string
                  description: >-
                    The process by which the GitHub Pages site will be built.
                    `workflow` means that the site is built by a custom GitHub
                    Actions workflow. `legacy` means that the site is built by
                    GitHub when changes are pushed to a specific branch.
                  enum:
                    - legacy
                    - workflow
                source:
                  anyOf:
                    - type: string
                      description: >-
                        Update the source for the repository. Must include the
                        branch name, and may optionally specify the subdirectory
                        `/docs`. Possible values are `"gh-pages"`, `"master"`,
                        and `"master /docs"`.
                      enum:
                        - gh-pages
                        - master
                        - master /docs
                    - type: object
                      description: >-
                        Update the source for the repository. Must include the
                        branch name and path.
                      properties:
                        branch:
                          type: string
                          description: >-
                            The repository branch used to publish your site's
                            source files.
                        path:
                          type: string
                          description: >-
                            The repository directory that includes the source
                            files for the Pages site. Allowed paths are `/` or
                            `/docs`.
                          enum:
                            - /
                            - /docs
                      required:
                        - branch
                        - path
              anyOf:
                - required:
                    - build_type
                - required:
                    - source
                - required:
                    - cname
                - required:
                    - public
                - required:
                    - https_enforced
            examples:
              default:
                value:
                  cname: octocatblog.com
                  source:
                    branch: main
                    path: /
      responses:
        '204':
          description: Response
        '400':
          $ref: '#/components/responses/bad_request'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pages
        subcategory: pages
    delete:
      summary: Delete a GitHub Enterprise Server Pages site
      description: >-
        Deletes a GitHub Enterprise Server Pages site. For more information, see
        "[About GitHub
        Pages](/github/working-with-github-pages/about-github-pages).


        The authenticated user must be a repository administrator, maintainer,
        or have the 'manage GitHub Pages settings' permission.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/delete-pages-site
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pages/pages#delete-a-apiname-pages-site
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response
        '404':
          $ref: '#/components/responses/not_found'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pages
        subcategory: pages
  /repos/{owner}/{repo}/pages/builds:
    get:
      summary: List GitHub Enterprise Server Pages builds
      description: >-
        Lists builts of a GitHub Enterprise Server Pages site.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/list-pages-builds
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pages/pages#list-apiname-pages-builds
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/page-build'
              examples:
                default:
                  $ref: '#/components/examples/page-build-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pages
        subcategory: pages
    post:
      summary: Request a GitHub Enterprise Server Pages build
      description: >-
        You can request that your site be built from the latest revision on the
        default branch. This has the same effect as pushing a commit to your
        default branch, but does not require an additional commit. Manually
        triggering page builds can be helpful when diagnosing build warnings and
        failures.


        Build requests are limited to one concurrent build per repository and
        one concurrent build per requester. If you request a build while another
        is still in progress, the second request will be queued until the first
        completes.
      tags:
        - - - - repos
      operationId: repos/request-pages-build
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pages/pages#request-a-apiname-pages-build
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/page-build-status'
              examples:
                default:
                  $ref: '#/components/examples/page-build-status'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pages
        subcategory: pages
  /repos/{owner}/{repo}/pages/builds/latest:
    get:
      summary: Get latest Pages build
      description: >-
        Gets information about the single most recent build of a GitHub
        Enterprise Server Pages site.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/get-latest-pages-build
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pages/pages#get-latest-pages-build
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/page-build'
              examples:
                default:
                  $ref: '#/components/examples/page-build'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pages
        subcategory: pages
  /repos/{owner}/{repo}/pages/builds/{build_id}:
    get:
      summary: Get GitHub Enterprise Server Pages build
      description: >-
        Gets information about a GitHub Enterprise Server Pages build.


        OAuth app tokens and personal access tokens (classic) need the `repo`
        scope to use this endpoint.
      tags:
        - - - - repos
      operationId: repos/get-pages-build
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pages/pages#get-apiname-pages-build
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: build_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/page-build'
              examples:
                default:
                  $ref: '#/components/examples/page-build'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pages
        subcategory: pages
  /repos/{owner}/{repo}/pages/deployments:
    post:
      summary: Create a GitHub Pages deployment
      description: |-
        Create a GitHub Pages deployment for a repository.

        The authenticated user must have write permission to the repository.
      tags:
        - - - - repos
      operationId: repos/create-pages-deployment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pages/pages#create-a-github-pages-deployment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: The object used to create GitHub Pages deployment
              properties:
                artifact_url:
                  type: string
                  description: >-
                    The URL of an artifact that contains the .zip or .tar of
                    static assets to deploy. The artifact belongs to the
                    repository.
                environment:
                  type: string
                  description: The target environment for this GitHub Pages deployment.
                  default: github-pages
                pages_build_version:
                  type: string
                  description: >-
                    A unique string that represents the version of the build for
                    this deployment.
                  default: GITHUB_SHA
                oidc_token:
                  type: string
                  description: >-
                    The OIDC token issued by GitHub Actions certifying the
                    origin of the deployment.
              required:
                - artifact_url
                - pages_build_version
                - oidc_token
            examples:
              default:
                value:
                  artifact_url: https://downloadcontent/
                  environment: github-pages
                  pages_build_version: 4fd754f7e594640989b406850d0bc8f06a121251
                  oidc_token: >-
                    eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IlV2R1h4SUhlY0JFc1JCdEttemUxUEhfUERiVSIsImtpZCI6IjUyRjE5N0M0ODFERTcwMTEyQzQ0MUI0QTlCMzdCNTNDN0ZDRjBEQjUifQ.eyJqdGkiOiJhMWIwNGNjNy0zNzZiLTQ1N2QtOTMzNS05NTY5YmVjZDExYTIiLCJzdWIiOiJyZXBvOnBhcGVyLXNwYS9taW55aTplbnZpcm9ubWVudDpQcm9kdWN0aW9uIiwiYXVkIjoiaHR0cHM6Ly9naXRodWIuY29tL3BhcGVyLXNwYSIsInJlZiI6InJlZnMvaGVhZHMvbWFpbiIsInNoYSI6ImEyODU1MWJmODdiZDk3NTFiMzdiMmM0YjM3M2MxZjU3NjFmYWM2MjYiLCJyZXBvc2l0b3J5IjoicGFwZXItc3BhL21pbnlpIiwicmVwb3NpdG9yeV9vd25lciI6InBhcGVyLXNwYSIsInJ1bl9pZCI6IjE1NDY0NTkzNjQiLCJydW5fbnVtYmVyIjoiMzQiLCJydW5fYXR0ZW1wdCI6IjYiLCJhY3RvciI6IllpTXlzdHkiLCJ3b3JrZmxvdyI6IkNJIiwiaGVhZF9yZWYiOiIiLCJiYXNlX3JlZiI6IiIsImV2ZW50X25hbWUiOiJwdXNoIiwicmVmX3R5cGUiOiJicmFuY2giLCJlbnZpcm9ubWVudCI6IlByb2R1Y3Rpb24iLCJqb2Jfd29ya2Zsb3dfcmVmIjoicGFwZXItc3BhL21pbnlpLy5naXRodWIvd29ya2Zsb3dzL2JsYW5rLnltbEByZWZzL2hlYWRzL21haW4iLCJpc3MiOiJodHRwczovL3Rva2VuLmFjdGlvbnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tIiwibmJmIjoxNjM5MDAwODU2LCJleHAiOjE2MzkwMDE3NTYsImlhdCI6MTYzOTAwMTQ1Nn0.VP8WictbQECKozE2SgvKb2FqJ9hisWsoMkYRTqfBrQfZTCXi5IcFEdgDMB2X7a99C2DeUuTvHh9RMKXLL2a0zg3-Sd7YrO7a2ll2kNlnvyIypcN6AeIc7BxHsTTnZN9Ud_xmEsTrSRGOEKmzCFkULQ6N4zlVD0sidypmXlMemmWEcv_ZHqhioEI_VMp5vwXQurketWH7qX4oDgG4okyYtPrv5RQHbfQcVo9izaPJ_jnsDd0CBA0QOx9InjPidtIkMYQLyUgJy33HLJy86EFNUnAf8UhBQuQi5mAsEpEzBBuKpG3PDiPtYCHOk64JZkZGd5mR888a5sbHRiaF8hm8YA
                  preview: false
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/page-deployment'
              examples:
                default:
                  $ref: '#/components/examples/page-deployment'
        '400':
          $ref: '#/components/responses/bad_request'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pages
        subcategory: pages
  /repos/{owner}/{repo}/pre-receive-hooks:
    get:
      summary: List pre-receive hooks for a repository
      description: >-
        List all pre-receive hooks that are enabled or testing for this
        repository as well as any disabled hooks that are allowed to be enabled
        at the repository level. Pre-receive hooks that are disabled at a higher
        level and are not configurable will not be listed.
      operationId: enterprise-admin/list-pre-receive-hooks-for-repo
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/repo-pre-receive-hooks#list-pre-receive-hooks-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/direction'
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum:
              - created
              - updated
              - name
            default: created
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/repository-pre-receive-hook'
              examples:
                default:
                  $ref: '#/components/examples/repository-pre-receive-hook-items'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: enterprise-admin
        subcategory: repo-pre-receive-hooks
  /repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}:
    get:
      summary: Get a pre-receive hook for a repository
      description: ''
      operationId: enterprise-admin/get-pre-receive-hook-for-repo
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/repo-pre-receive-hooks#get-a-pre-receive-hook-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pre-receive-hook-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repository-pre-receive-hook'
              examples:
                default:
                  $ref: '#/components/examples/repository-pre-receive-hook'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: enterprise-admin
        subcategory: repo-pre-receive-hooks
    patch:
      summary: Update pre-receive hook enforcement for a repository
      description: >-
        For pre-receive hooks which are allowed to be configured at the repo
        level, you can set `enforcement`
      operationId: enterprise-admin/update-pre-receive-hook-enforcement-for-repo
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/repo-pre-receive-hooks#update-pre-receive-hook-enforcement-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pre-receive-hook-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repository-pre-receive-hook'
              examples:
                default:
                  $ref: '#/components/examples/repository-pre-receive-hook-2'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                enforcement:
                  description: The state of enforcement for the hook on this repository.
                  type: string
                  enum:
                    - enabled
                    - disabled
                    - testing
            examples:
              default:
                value:
                  enforcement: enabled
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: enterprise-admin
        subcategory: repo-pre-receive-hooks
    delete:
      summary: Remove pre-receive hook enforcement for a repository
      description: >-
        Deletes any overridden enforcement on this repository for the specified
        hook.


        Responds with effective values inherited from owner and/or global level.
      operationId: enterprise-admin/remove-pre-receive-hook-enforcement-for-repo
      tags:
        - - - - enterprise-admin
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/enterprise-admin/repo-pre-receive-hooks#remove-pre-receive-hook-enforcement-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pre-receive-hook-id'
      responses:
        '200':
          description: >-
            Responds with effective values inherited from owner and/or global
            level.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repository-pre-receive-hook'
              examples:
                default:
                  $ref: '#/components/examples/repository-pre-receive-hook'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: enterprise-admin
        subcategory: repo-pre-receive-hooks
  /repos/{owner}/{repo}/projects:
    get:
      summary: List repository projects
      description: >-
        Lists the projects in a repository. Returns a `404 Not Found` status if
        projects are disabled in the repository. If you do not have sufficient
        privileges to perform this action, a `401 Unauthorized` or `410 Gone`
        status is returned.
      tags:
        - - - - projects
      operationId: projects/list-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/projects/projects#list-repository-projects
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: state
          description: Indicates the state of the projects to return.
          in: query
          required: false
          schema:
            type: string
            enum:
              - open
              - closed
              - all
            default: open
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/project'
              examples:
                default:
                  $ref: '#/components/examples/project-items-2'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
        '422':
          $ref: '#/components/responses/validation_failed_simple'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: projects
        subcategory: projects
    post:
      summary: Create a repository project
      description: >-
        Creates a repository project board. Returns a `410 Gone` status if
        projects are disabled in the repository or if the repository does not
        have existing classic projects. If you do not have sufficient privileges
        to perform this action, a `401 Unauthorized` or `410 Gone` status is
        returned.
      tags:
        - - - - projects
      operationId: projects/create-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/projects/projects#create-a-repository-project
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the project.
                body:
                  type: string
                  description: The description of the project.
              required:
                - name
            examples:
              default:
                value:
                  name: Projects Documentation
                  body: Developer documentation project for the developer site.
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
              examples:
                default:
                  $ref: '#/components/examples/project-3'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '410':
          $ref: '#/components/responses/gone'
        '422':
          $ref: '#/components/responses/validation_failed_simple'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: projects
        subcategory: projects
  /repos/{owner}/{repo}/pulls:
    get:
      summary: List pull requests
      description: >-
        Lists pull requests in a specified repository.


        Draft pull requests are available in public repositories with GitHub

        Free and GitHub Free for organizations, GitHub Pro, and legacy
        per-repository billing

        plans, and in public and private repositories with GitHub Team and
        GitHub Enterprise

        Cloud. For more information, see [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)

        in the GitHub Help documentation.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.

        - **`application/vnd.github.diff`**: For more information, see
        "[git-diff](https://git-scm.com/docs/git-diff)" in the Git
        documentation. If a diff is corrupt, contact us through the [GitHub
        Support portal](https://support.github.com/). Include the repository
        name and pull request ID in your message.

        - **`application/vnd.github.patch`**: For more information, see
        "[git-format-patch](https://git-scm.com/docs/git-format-patch)" in the
        Git documentation.
      tags:
        - - - - pulls
      operationId: pulls/list
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#list-pull-requests
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: state
          description: Either `open`, `closed`, or `all` to filter by state.
          in: query
          required: false
          schema:
            type: string
            enum:
              - open
              - closed
              - all
            default: open
        - name: head
          description: >-
            Filter pulls by head user or head organization and branch name in
            the format of `user:ref-name` or `organization:ref-name`. For
            example: `github:new-script-format` or `octocat:test-branch`.
          in: query
          required: false
          schema:
            type: string
        - name: base
          description: 'Filter pulls by base branch name. Example: `gh-pages`.'
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: >-
            What to sort results by. `popularity` will sort by the number of
            comments. `long-running` will sort by date created and will limit
            the results to pull requests that have been open for more than a
            month and have had activity within the past month.
          in: query
          required: false
          schema:
            type: string
            enum:
              - created
              - updated
              - popularity
              - long-running
            default: created
        - name: direction
          description: >-
            The direction of the sort. Default: `desc` when sort is `created` or
            sort is not specified, otherwise `asc`.
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pull-request-simple'
              examples:
                default:
                  $ref: '#/components/examples/pull-request-simple-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: pulls
    post:
      summary: Create a pull request
      description: >-
        Draft pull requests are available in public repositories with GitHub
        Free and GitHub Free for organizations, GitHub Pro, and legacy
        per-repository billing plans, and in public and private repositories
        with GitHub Team and GitHub Enterprise Cloud. For more information, see
        [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        To open or update a pull request in a public repository, you must have
        write access to the head or the source branch. For organization-owned
        repositories, you must be a member of the organization that owns the
        repository to open or update a pull request.


        This endpoint triggers
        [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        Creating content too quickly using this endpoint may result in secondary
        rate limiting. For more information, see "[Rate limits for the
        API](https://docs.github.com/enterprise-server@3.9/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
        and "[Best practices for using the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.

        - **`application/vnd.github.diff`**: For more information, see
        "[git-diff](https://git-scm.com/docs/git-diff)" in the Git
        documentation. If a diff is corrupt, contact us through the [GitHub
        Support portal](https://support.github.com/). Include the repository
        name and pull request ID in your message.
      tags:
        - - - - pulls
      operationId: pulls/create
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#create-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: >-
                    The title of the new pull request. Required unless `issue`
                    is specified.
                head:
                  type: string
                  description: >-
                    The name of the branch where your changes are implemented.
                    For cross-repository pull requests in the same network,
                    namespace `head` with a user like this: `username:branch`.
                head_repo:
                  type: string
                  description: >-
                    The name of the repository where the changes in the pull
                    request were made. This field is required for
                    cross-repository pull requests if both repositories are
                    owned by the same organization.
                  format: repo.nwo
                  example: octo-org/octo-repo
                base:
                  type: string
                  description: >-
                    The name of the branch you want the changes pulled into.
                    This should be an existing branch on the current repository.
                    You cannot submit a pull request to one repository that
                    requests a merge to a base of another repository.
                body:
                  type: string
                  description: The contents of the pull request.
                maintainer_can_modify:
                  type: boolean
                  description: >-
                    Indicates whether [maintainers can
                    modify](https://docs.github.com/enterprise-server@3.9/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/)
                    the pull request.
                draft:
                  type: boolean
                  description: >-
                    Indicates whether the pull request is a draft. See "[Draft
                    Pull
                    Requests](https://docs.github.com/enterprise-server@3.9/articles/about-pull-requests#draft-pull-requests)"
                    in the GitHub Help documentation to learn more.
                issue:
                  type: integer
                  format: int64
                  example: 1
                  description: >-
                    An issue in the repository to convert to a pull request. The
                    issue title, body, and comments will become the title, body,
                    and comments on the new pull request. Required unless
                    `title` is specified.
              required:
                - head
                - base
            examples:
              default:
                value:
                  title: Amazing new feature
                  body: Please pull these awesome changes in!
                  head: octocat:new-feature
                  base: master
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pull-request'
              examples:
                default:
                  $ref: '#/components/examples/pull-request'
          headers:
            Location:
              example: https://api.github.com/repos/octocat/Hello-World/pulls/1347
              schema:
                type: string
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: pulls
  /repos/{owner}/{repo}/pulls/comments:
    get:
      summary: List review comments in a repository
      description: >-
        Lists review comments for all pull requests in a repository. By default,

        review comments are in ascending order by ID.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - pulls
      operationId: pulls/list-review-comments-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/comments#list-review-comments-in-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum:
              - created
              - updated
              - created_at
        - name: direction
          description: The direction to sort results. Ignored without `sort` parameter.
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - $ref: '#/components/parameters/since'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pull-request-review-comment'
              examples:
                default:
                  $ref: '#/components/examples/pull-request-review-comment-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: comments
  /repos/{owner}/{repo}/pulls/comments/{comment_id}:
    get:
      summary: Get a review comment for a pull request
      description: >-
        Provides details for a specified review comment.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - pulls
      operationId: pulls/get-review-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/comments#get-a-review-comment-for-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pull-request-review-comment'
              examples:
                default:
                  $ref: '#/components/examples/pull-request-review-comment-2'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: comments
    patch:
      summary: Update a review comment for a pull request
      description: >-
        Edits the content of a specified review comment.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - pulls
      operationId: pulls/update-review-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/comments#update-a-review-comment-for-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The text of the reply to the review comment.
              required:
                - body
            examples:
              default:
                value:
                  body: I like this too!
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pull-request-review-comment'
              examples:
                default:
                  $ref: '#/components/examples/pull-request-review-comment-2'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: comments
    delete:
      summary: Delete a review comment for a pull request
      description: Deletes a review comment.
      tags:
        - - - - pulls
      operationId: pulls/delete-review-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/comments#delete-a-review-comment-for-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
      responses:
        '204':
          description: Response
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: comments
  /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions:
    get:
      summary: List reactions for a pull request review comment
      description: >-
        List the reactions to a [pull request review
        comment](https://docs.github.com/enterprise-server@3.9/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
      tags:
        - - - - reactions
      operationId: reactions/list-for-pull-request-review-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#list-reactions-for-a-pull-request-review-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
        - name: content
          description: >-
            Returns a single [reaction
            type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions).
            Omit this parameter to list all reactions to a pull request review
            comment.
          in: query
          required: false
          schema:
            type: string
            enum:
              - '+1'
              - '-1'
              - laugh
              - confused
              - heart
              - hooray
              - rocket
              - eyes
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
    post:
      summary: Create reaction for a pull request review comment
      description: >-
        Create a reaction to a [pull request review
        comment](https://docs.github.com/enterprise-server@3.9/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
        A response with an HTTP `200` status means that you already added the
        reaction type to this pull request review comment.
      tags:
        - - - - reactions
      operationId: reactions/create-for-pull-request-review-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#create-reaction-for-a-pull-request-review-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: >-
                    The [reaction
                    type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions)
                    to add to the pull request review comment.
                  enum:
                    - '+1'
                    - '-1'
                    - laugh
                    - confused
                    - heart
                    - hooray
                    - rocket
                    - eyes
              required:
                - content
            examples:
              default:
                value:
                  content: heart
      responses:
        '200':
          description: Reaction exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
        '201':
          description: Reaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
  /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}:
    delete:
      summary: Delete a pull request comment reaction
      description: >-
        **Note:** You can also specify a repository by `repository_id` using the
        route `DELETE
        /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`


        Delete a reaction to a [pull request review
        comment](https://docs.github.com/enterprise-server@3.9/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
      tags:
        - - - - reactions
      operationId: reactions/delete-for-pull-request-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#delete-a-pull-request-comment-reaction
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/comment-id'
        - $ref: '#/components/parameters/reaction-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
  /repos/{owner}/{repo}/pulls/{pull_number}:
    get:
      summary: Get a pull request
      description: >-
        Draft pull requests are available in public repositories with GitHub
        Free and GitHub Free for organizations, GitHub Pro, and legacy
        per-repository billing plans, and in public and private repositories
        with GitHub Team and GitHub Enterprise Cloud. For more information, see
        [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        Lists details of a pull request by providing its number.


        When you get,
        [create](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls/#create-a-pull-request),
        or
        [edit](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#update-a-pull-request)
        a pull request, GitHub Enterprise Server creates a merge commit to test
        whether the pull request can be automatically merged into the base
        branch. This test commit is not added to the base branch or the head
        branch. You can review the status of the test commit using the
        `mergeable` key. For more information, see "[Checking mergeability of
        pull
        requests](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".


        The value of the `mergeable` attribute can be `true`, `false`, or
        `null`. If the value is `null`, then GitHub Enterprise Server has
        started a background job to compute the mergeability. After giving the
        job time to complete, resubmit the request. When the job finishes, you
        will see a non-`null` value for the `mergeable` attribute in the
        response. If `mergeable` is `true`, then `merge_commit_sha` will be the
        SHA of the _test_ merge commit.


        The value of the `merge_commit_sha` attribute changes depending on the
        state of the pull request. Before merging a pull request, the
        `merge_commit_sha` attribute holds the SHA of the _test_ merge commit.
        After merging a pull request, the `merge_commit_sha` attribute changes
        depending on how you merged the pull request:


        *   If merged as a [merge
        commit](https://docs.github.com/enterprise-server@3.9/articles/about-merge-methods-on-github/),
        `merge_commit_sha` represents the SHA of the merge commit.

        *   If merged via a
        [squash](https://docs.github.com/enterprise-server@3.9/articles/about-merge-methods-on-github/#squashing-your-merge-commits),
        `merge_commit_sha` represents the SHA of the squashed commit on the base
        branch.

        *   If
        [rebased](https://docs.github.com/enterprise-server@3.9/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits),
        `merge_commit_sha` represents the commit that the base branch was
        updated to.


        Pass the appropriate [media
        type](https://docs.github.com/enterprise-server@3.9/rest/overview/media-types/#commits-commit-comparison-and-pull-requests)
        to fetch diff and patch formats.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.

        - **`application/vnd.github.diff`**: For more information, see
        "[git-diff](https://git-scm.com/docs/git-diff)" in the Git
        documentation. If a diff is corrupt, contact us through the [GitHub
        Support portal](https://support.github.com/). Include the repository
        name and pull request ID in your message.
      tags:
        - - - - pulls
      operationId: pulls/get
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#get-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
      responses:
        '200':
          description: >-
            Pass the appropriate [media
            type](https://docs.github.com/enterprise-server@3.9/rest/overview/media-types/#commits-commit-comparison-and-pull-requests)
            to fetch diff and patch formats.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pull-request'
              examples:
                default:
                  $ref: '#/components/examples/pull-request'
        '304':
          $ref: '#/components/responses/not_modified'
        '404':
          $ref: '#/components/responses/not_found'
        '500':
          $ref: '#/components/responses/internal_error'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: pulls
    patch:
      summary: Update a pull request
      description: >-
        Draft pull requests are available in public repositories with GitHub
        Free and GitHub Free for organizations, GitHub Pro, and legacy
        per-repository billing plans, and in public and private repositories
        with GitHub Team and GitHub Enterprise Cloud. For more information, see
        [GitHub's
        products](https://docs.github.com/enterprise-server@3.9/github/getting-started-with-github/githubs-products)
        in the GitHub Help documentation.


        To open or update a pull request in a public repository, you must have
        write access to the head or the source branch. For organization-owned
        repositories, you must be a member of the organization that owns the
        repository to open or update a pull request.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.

        - **`application/vnd.github.diff`**: For more information, see
        "[git-diff](https://git-scm.com/docs/git-diff)" in the Git
        documentation. If a diff is corrupt, contact us through the [GitHub
        Support portal](https://support.github.com/). Include the repository
        name and pull request ID in your message.
      tags:
        - - - - pulls
      operationId: pulls/update
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#update-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the pull request.
                body:
                  type: string
                  description: The contents of the pull request.
                state:
                  type: string
                  description: State of this Pull Request. Either `open` or `closed`.
                  enum:
                    - open
                    - closed
                base:
                  type: string
                  description: >-
                    The name of the branch you want your changes pulled into.
                    This should be an existing branch on the current repository.
                    You cannot update the base branch on a pull request to point
                    to another repository.
                maintainer_can_modify:
                  type: boolean
                  description: >-
                    Indicates whether [maintainers can
                    modify](https://docs.github.com/enterprise-server@3.9/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/)
                    the pull request.
            examples:
              default:
                value:
                  title: new title
                  body: updated body
                  state: open
                  base: master
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pull-request'
              examples:
                default:
                  $ref: '#/components/examples/pull-request'
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: pulls
  /repos/{owner}/{repo}/pulls/{pull_number}/comments:
    get:
      summary: List review comments on a pull request
      description: >-
        Lists all review comments for a specified pull request. By default,
        review comments

        are in ascending order by ID.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - pulls
      operationId: pulls/list-review-comments
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/comments#list-review-comments-on-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
        - $ref: '#/components/parameters/sort'
        - name: direction
          description: The direction to sort results. Ignored without `sort` parameter.
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - $ref: '#/components/parameters/since'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pull-request-review-comment'
              examples:
                default:
                  $ref: '#/components/examples/pull-request-review-comment-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: comments
    post:
      summary: Create a review comment for a pull request
      description: >-
        Creates a review comment on the diff of a specified pull request. To add
        a regular comment to a pull request timeline, see "[Create an issue
        comment](https://docs.github.com/enterprise-server@3.9/rest/issues/comments#create-an-issue-comment)."


        If your comment applies to more than one line in the pull request diff,
        you should use the parameters `line`, `side`, and optionally
        `start_line` and `start_side` in your request.


        The `position` parameter is deprecated. If you use `position`, the
        `line`, `side`, `start_line`, and `start_side` parameters are not
        required.


        This endpoint triggers
        [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        Creating content too quickly using this endpoint may result in secondary
        rate limiting. For more information, see "[Rate limits for the
        API](https://docs.github.com/enterprise-server@3.9/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"

        and "[Best practices for using the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - pulls
      operationId: pulls/create-review-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/comments#create-a-review-comment-for-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The text of the review comment.
                commit_id:
                  type: string
                  description: >-
                    The SHA of the commit needing a comment. Not using the
                    latest commit SHA may render your comment outdated if a
                    subsequent commit modifies the line you specify as the
                    `position`.
                path:
                  type: string
                  description: The relative path to the file that necessitates a comment.
                position:
                  type: integer
                  description: >-
                    **This parameter is deprecated. Use `line` instead**. The
                    position in the diff where you want to add a review comment.
                    Note this value is not the same as the line number in the
                    file. The position value equals the number of lines down
                    from the first "@@" hunk header in the file you want to add
                    a comment. The line just below the "@@" line is position 1,
                    the next line is position 2, and so on. The position in the
                    diff continues to increase through lines of whitespace and
                    additional hunks until the beginning of a new file.
                  deprecated: true
                  x-github:
                    deprecationDate: '2022-11-01'
                side:
                  type: string
                  description: >-
                    In a split diff view, the side of the diff that the pull
                    request's changes appear on. Can be `LEFT` or `RIGHT`. Use
                    `LEFT` for deletions that appear in red. Use `RIGHT` for
                    additions that appear in green or unchanged lines that
                    appear in white and are shown for context. For a multi-line
                    comment, side represents whether the last line of the
                    comment range is a deletion or addition. For more
                    information, see "[Diff view
                    options](https://docs.github.com/enterprise-server@3.9/articles/about-comparing-branches-in-pull-requests#diff-view-options)"
                    in the GitHub Help documentation.
                  enum:
                    - LEFT
                    - RIGHT
                line:
                  type: integer
                  description: >-
                    **Required unless using `subject_type:file`**. The line of
                    the blob in the pull request diff that the comment applies
                    to. For a multi-line comment, the last line of the range
                    that your comment applies to.
                start_line:
                  type: integer
                  description: >-
                    **Required when using multi-line comments unless using
                    `in_reply_to`**. The `start_line` is the first line in the
                    pull request diff that your multi-line comment applies to.
                    To learn more about multi-line comments, see "[Commenting on
                    a pull
                    request](https://docs.github.com/enterprise-server@3.9/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)"
                    in the GitHub Help documentation.
                start_side:
                  type: string
                  description: >-
                    **Required when using multi-line comments unless using
                    `in_reply_to`**. The `start_side` is the starting side of
                    the diff that the comment applies to. Can be `LEFT` or
                    `RIGHT`. To learn more about multi-line comments, see
                    "[Commenting on a pull
                    request](https://docs.github.com/enterprise-server@3.9/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)"
                    in the GitHub Help documentation. See `side` in this table
                    for additional context.
                  enum:
                    - LEFT
                    - RIGHT
                    - side
                in_reply_to:
                  type: integer
                  example: 2
                  description: >-
                    The ID of the review comment to reply to. To find the ID of
                    a review comment with ["List review comments on a pull
                    request"](#list-review-comments-on-a-pull-request). When
                    specified, all parameters other than `body` in the request
                    body are ignored.
                subject_type:
                  type: string
                  description: The level at which the comment is targeted.
                  enum:
                    - line
                    - file
              required:
                - body
                - commit_id
                - path
            examples:
              example-for-a-multi-line-comment:
                summary: Example for a multi-line comment
                value:
                  body: Great stuff!
                  commit_id: 6dcb09b5b57875f334f61aebed695e2e4193db5e
                  path: file1.txt
                  start_line: 1
                  start_side: RIGHT
                  line: 2
                  side: RIGHT
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pull-request-review-comment'
              examples:
                example-for-a-multi-line-comment:
                  $ref: >-
                    #/components/examples/pull-request-review-comment-example-for-a-multi-line-comment
          headers:
            Location:
              example: >-
                https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
              schema:
                type: string
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: comments
  /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies:
    post:
      summary: Create a reply for a review comment
      description: >-
        Creates a reply to a review comment for a pull request. For the
        `comment_id`, provide the ID of the review comment you are replying to.
        This must be the ID of a _top-level review comment_, not a reply to that
        comment. Replies to replies are not supported.


        This endpoint triggers
        [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        Creating content too quickly using this endpoint may result in secondary
        rate limiting. For more information, see "[Rate limits for the
        API](https://docs.github.com/enterprise-server@3.9/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"

        and "[Best practices for using the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - pulls
      operationId: pulls/create-reply-for-review-comment
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/comments#create-a-reply-for-a-review-comment
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
        - $ref: '#/components/parameters/comment-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The text of the review comment.
              required:
                - body
            examples:
              default:
                value:
                  body: Great stuff!
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pull-request-review-comment'
              examples:
                default:
                  $ref: '#/components/examples/pull-request-review-comment'
          headers:
            Location:
              example: >-
                https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
              schema:
                type: string
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: pulls
        subcategory: comments
  /repos/{owner}/{repo}/pulls/{pull_number}/commits:
    get:
      summary: List commits on a pull request
      description: >-
        Lists a maximum of 250 commits for a pull request. To receive a complete

        commit list for pull requests with more than 250 commits, use the [List
        commits](https://docs.github.com/enterprise-server@3.9/rest/commits/commits#list-commits)

        endpoint.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.

        - **`application/vnd.github.diff`**: For more information, see
        "[git-diff](https://git-scm.com/docs/git-diff)" in the Git
        documentation. If a diff is corrupt, contact us through the [GitHub
        Support portal](https://support.github.com/). Include the repository
        name and pull request ID in your message.
      tags:
        - - - - pulls
      operationId: pulls/list-commits
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#list-commits-on-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/commit'
              examples:
                default:
                  $ref: '#/components/examples/commit-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: pulls
  /repos/{owner}/{repo}/pulls/{pull_number}/files:
    get:
      summary: List pull requests files
      description: >-
        Lists the files in a specified pull request.


        **Note:** Responses include a maximum of 3000 files. The paginated
        response

        returns 30 files per page by default.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw markdown body.
        Response will include `body`. This is the default if you do not pass any
        specific media type.

        - **`application/vnd.github.text+json`**: Returns a text only
        representation of the markdown body. Response will include `body_text`.

        - **`application/vnd.github.html+json`**: Returns HTML rendered from the
        body's markdown. Response will include `body_html`.

        - **`application/vnd.github.full+json`**: Returns raw, text, and HTML
        representations. Response will include `body`, `body_text`, and
        `body_html`.

        - **`application/vnd.github.diff`**: For more information, see
        "[git-diff](https://git-scm.com/docs/git-diff)" in the Git
        documentation. If a diff is corrupt, contact us through the [GitHub
        Support portal](https://support.github.com/). Include the repository
        name and pull request ID in your message.
      tags:
        - - - - pulls
      operationId: pulls/list-files
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#list-pull-requests-files
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/diff-entry'
              examples:
                default:
                  $ref: '#/components/examples/diff-entry-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '422':
          $ref: '#/components/responses/validation_failed'
        '500':
          $ref: '#/components/responses/internal_error'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: pulls
  /repos/{owner}/{repo}/pulls/{pull_number}/merge:
    get:
      summary: Check if a pull request has been merged
      description: >-
        Checks if a pull request has been merged into the base branch. The HTTP
        status of the response indicates whether or not the pull request has
        been merged; the response body is empty.
      tags:
        - - - - pulls
      operationId: pulls/check-if-merged
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#check-if-a-pull-request-has-been-merged
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
      responses:
        '204':
          description: Response if pull request has been merged
        '404':
          description: Not Found if pull request has not been merged
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: pulls
    put:
      summary: Merge a pull request
      description: >-
        Merges a pull request into the base branch.

        This endpoint triggers
        [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        Creating content too quickly using this endpoint may result in secondary
        rate limiting. For more information, see "[Rate limits for the
        API](https://docs.github.com/enterprise-server@3.9/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
        and "[Best practices for using the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."
      tags:
        - - - - pulls
      operationId: pulls/merge
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#merge-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              nullable: true
              properties:
                commit_title:
                  type: string
                  description: Title for the automatic commit message.
                commit_message:
                  type: string
                  description: Extra detail to append to automatic commit message.
                sha:
                  type: string
                  description: SHA that pull request head must match to allow merge.
                merge_method:
                  type: string
                  description: The merge method to use.
                  enum:
                    - merge
                    - squash
                    - rebase
            examples:
              response-if-merge-was-successful:
                value:
                  commit_title: Expand enum
                  commit_message: Add a new value to the merge_method enum
      responses:
        '200':
          description: if merge was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pull-request-merge-result'
              examples:
                response-if-merge-was-successful:
                  $ref: >-
                    #/components/examples/pull-request-merge-result-response-if-merge-was-successful
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '405':
          description: Method Not Allowed if merge cannot be performed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  documentation_url:
                    type: string
              examples:
                response-if-merge-cannot-be-performed:
                  value:
                    message: Pull Request is not mergeable
        '409':
          description: Conflict if sha was provided and pull request head did not match
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  documentation_url:
                    type: string
              examples:
                response-if-sha-was-provided-and-pull-request-head-did-not-match:
                  value:
                    message: Head branch was modified. Review and try the merge again.
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: pulls
  /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers:
    get:
      summary: Get all requested reviewers for a pull request
      description: >-
        Gets the users or teams whose review is requested for a pull request.
        Once a requested reviewer submits a review, they are no longer
        considered a requested reviewer. Their review will instead be returned
        by the [List reviews for a pull
        request](https://docs.github.com/enterprise-server@3.9/rest/pulls/reviews#list-reviews-for-a-pull-request)
        operation.
      tags:
        - - - - pulls
      operationId: pulls/list-requested-reviewers
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/review-requests#get-all-requested-reviewers-for-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pull-request-review-request'
              examples:
                default:
                  $ref: '#/components/examples/simple-pull-request-review-request'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: review-requests
    post:
      summary: Request reviewers for a pull request
      description: >-
        Requests reviews for a pull request from a given set of users and/or
        teams.

        This endpoint triggers
        [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        Creating content too quickly using this endpoint may result in secondary
        rate limiting. For more information, see "[Rate limits for the
        API](https://docs.github.com/enterprise-server@3.9/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
        and "[Best practices for using the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."
      tags:
        - - - - pulls
      operationId: pulls/request-reviewers
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/review-requests#request-reviewers-for-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reviewers:
                  type: array
                  description: An array of user `login`s that will be requested.
                  items:
                    type: string
                team_reviewers:
                  type: array
                  description: An array of team `slug`s that will be requested.
                  items:
                    type: string
              anyOf:
                - required:
                    - reviewers
                - required:
                    - team_reviewers
            examples:
              default:
                value:
                  reviewers:
                    - octocat
                    - hubot
                    - other_user
                  team_reviewers:
                    - justice-league
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pull-request-simple'
              examples:
                default:
                  $ref: '#/components/examples/pull-request-review-request'
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          description: Unprocessable Entity if user is not a collaborator
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: review-requests
    delete:
      summary: Remove requested reviewers from a pull request
      description: >-
        Removes review requests from a pull request for a given set of users
        and/or teams.
      tags:
        - - - - pulls
      operationId: pulls/remove-requested-reviewers
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/review-requests#remove-requested-reviewers-from-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reviewers:
                  type: array
                  description: An array of user `login`s that will be removed.
                  items:
                    type: string
                team_reviewers:
                  type: array
                  description: An array of team `slug`s that will be removed.
                  items:
                    type: string
              required:
                - reviewers
            examples:
              default:
                value:
                  reviewers:
                    - octocat
                    - hubot
                    - other_user
                  team_reviewers:
                    - justice-league
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pull-request-simple'
              examples:
                default:
                  $ref: '#/components/examples/pull-request-simple'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: review-requests
  /repos/{owner}/{repo}/pulls/{pull_number}/reviews:
    get:
      summary: List reviews for a pull request
      description: >-
        Lists all reviews for a specified pull request. The list of reviews
        returns in chronological order.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - pulls
      operationId: pulls/list-reviews
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/reviews#list-reviews-for-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: The list of reviews returns in chronological order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pull-request-review'
              examples:
                default:
                  $ref: '#/components/examples/pull-request-review-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: reviews
    post:
      summary: Create a review for a pull request
      description: >-
        Creates a review on a specified pull request.


        This endpoint triggers
        [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        Creating content too quickly using this endpoint may result in secondary
        rate limiting. For more information, see "[Rate limits for the
        API](https://docs.github.com/enterprise-server@3.9/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
        and "[Best practices for using the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."


        Pull request reviews created in the `PENDING` state are not submitted
        and therefore do not include the `submitted_at` property in the
        response. To create a pending review for a pull request, leave the
        `event` parameter blank. For more information about submitting a
        `PENDING` review, see "[Submit a review for a pull
        request](https://docs.github.com/enterprise-server@3.9/rest/pulls/reviews#submit-a-review-for-a-pull-request)."


        **Note:** To comment on a specific line in a file, you need to first
        determine the position of that line in the diff. To see a pull request
        diff, add the `application/vnd.github.v3.diff` media type to the
        `Accept` header of a call to the [Get a pull
        request](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#get-a-pull-request)
        endpoint.


        The `position` value equals the number of lines down from the first "@@"
        hunk header in the file you want to add a comment. The line just below
        the "@@" line is position 1, the next line is position 2, and so on. The
        position in the diff continues to increase through lines of whitespace
        and additional hunks until the beginning of a new file.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - pulls
      operationId: pulls/create-review
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/reviews#create-a-review-for-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                commit_id:
                  type: string
                  description: >-
                    The SHA of the commit that needs a review. Not using the
                    latest commit SHA may render your review comment outdated if
                    a subsequent commit modifies the line you specify as the
                    `position`. Defaults to the most recent commit in the pull
                    request when you do not specify a value.
                body:
                  type: string
                  description: >-
                    **Required** when using `REQUEST_CHANGES` or `COMMENT` for
                    the `event` parameter. The body text of the pull request
                    review.
                event:
                  type: string
                  description: >-
                    The review action you want to perform. The review actions
                    include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By
                    leaving this blank, you set the review action state to
                    `PENDING`, which means you will need to [submit the pull
                    request
                    review](https://docs.github.com/enterprise-server@3.9/rest/pulls/reviews#submit-a-review-for-a-pull-request)
                    when you are ready.
                  enum:
                    - APPROVE
                    - REQUEST_CHANGES
                    - COMMENT
                comments:
                  type: array
                  description: >-
                    Use the following table to specify the location,
                    destination, and contents of the draft review comment.
                  items:
                    type: object
                    properties:
                      path:
                        type: string
                        description: >-
                          The relative path to the file that necessitates a
                          review comment.
                      position:
                        type: integer
                        description: >-
                          The position in the diff where you want to add a
                          review comment. Note this value is not the same as the
                          line number in the file. The `position` value equals
                          the number of lines down from the first "@@" hunk
                          header in the file you want to add a comment. The line
                          just below the "@@" line is position 1, the next line
                          is position 2, and so on. The position in the diff
                          continues to increase through lines of whitespace and
                          additional hunks until the beginning of a new file.
                      body:
                        type: string
                        description: Text of the review comment.
                      line:
                        type: integer
                        example: 28
                      side:
                        type: string
                        example: RIGHT
                      start_line:
                        type: integer
                        example: 26
                      start_side:
                        type: string
                        example: LEFT
                    required:
                      - path
                      - body
            examples:
              default:
                value:
                  commit_id: ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091
                  body: >-
                    This is close to perfect! Please address the suggested
                    inline change.
                  event: REQUEST_CHANGES
                  comments:
                    - path: file.md
                      position: 6
                      body: Please add more information here, and fix this typo.
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pull-request-review'
              examples:
                default:
                  $ref: '#/components/examples/pull-request-review'
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed_simple'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: reviews
  /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}:
    get:
      summary: Get a review for a pull request
      description: >-
        Retrieves a pull request review by its ID.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - pulls
      operationId: pulls/get-review
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/reviews#get-a-review-for-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
        - $ref: '#/components/parameters/review-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pull-request-review'
              examples:
                default:
                  $ref: '#/components/examples/pull-request-review-4'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: reviews
    put:
      summary: Update a review for a pull request
      description: >-
        Updates the contents of a specified review summary comment.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - pulls
      operationId: pulls/update-review
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/reviews#update-a-review-for-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
        - $ref: '#/components/parameters/review-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The body text of the pull request review.
              required:
                - body
            examples:
              default:
                value:
                  body: >-
                    This is close to perfect! Please address the suggested
                    inline change. And add more about this.
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pull-request-review'
              examples:
                default:
                  $ref: '#/components/examples/pull-request-review-5'
        '422':
          $ref: '#/components/responses/validation_failed_simple'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: reviews
    delete:
      summary: Delete a pending review for a pull request
      description: >-
        Deletes a pull request review that has not been submitted. Submitted
        reviews cannot be deleted.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - pulls
      operationId: pulls/delete-pending-review
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/reviews#delete-a-pending-review-for-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
        - $ref: '#/components/parameters/review-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pull-request-review'
              examples:
                default:
                  $ref: '#/components/examples/pull-request-review'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed_simple'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: reviews
  /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments:
    get:
      summary: List comments for a pull request review
      description: >-
        Lists comments for a specific pull request review.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - pulls
      operationId: pulls/list-comments-for-review
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/reviews#list-comments-for-a-pull-request-review
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
        - $ref: '#/components/parameters/review-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/review-comment'
              examples:
                default:
                  $ref: '#/components/examples/review-comment-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: reviews
  /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals:
    put:
      summary: Dismiss a review for a pull request
      description: >-
        Dismisses a specified review on a pull request.


        **Note:** To dismiss a pull request review on a [protected
        branch](https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection),

        you must be a repository administrator or be included in the list of
        people or teams

        who can dismiss pull request reviews.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - pulls
      operationId: pulls/dismiss-review
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/reviews#dismiss-a-review-for-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
        - $ref: '#/components/parameters/review-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: The message for the pull request review dismissal
                event:
                  type: string
                  example: '"DISMISS"'
                  enum:
                    - DISMISS
              required:
                - message
            examples:
              default:
                value:
                  message: You are dismissed
                  event: DISMISS
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pull-request-review'
              examples:
                default:
                  $ref: '#/components/examples/pull-request-review-3'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed_simple'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: reviews
  /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events:
    post:
      summary: Submit a review for a pull request
      description: >-
        Submits a pending review for a pull request. For more information about
        creating a pending review for a pull request, see "[Create a review for
        a pull
        request](https://docs.github.com/enterprise-server@3.9/rest/pulls/reviews#create-a-review-for-a-pull-request)."


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw
        markdown body. Response will include `body`. This is the default if you
        do not pass any specific media type.

        - **`application/vnd.github-commitcomment.text+json`**: Returns a text
        only representation of the markdown body. Response will include
        `body_text`.

        - **`application/vnd.github-commitcomment.html+json`**: Returns HTML
        rendered from the body's markdown. Response will include `body_html`.

        - **`application/vnd.github-commitcomment.full+json`**: Returns raw,
        text, and HTML representations. Response will include `body`,
        `body_text`, and `body_html`.
      tags:
        - - - - pulls
      operationId: pulls/submit-review
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/reviews#submit-a-review-for-a-pull-request
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
        - $ref: '#/components/parameters/review-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The body text of the pull request review
                event:
                  type: string
                  description: >-
                    The review action you want to perform. The review actions
                    include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When
                    you leave this blank, the API returns _HTTP 422
                    (Unrecognizable entity)_ and sets the review action state to
                    `PENDING`, which means you will need to re-submit the pull
                    request review using a review action.
                  enum:
                    - APPROVE
                    - REQUEST_CHANGES
                    - COMMENT
              required:
                - event
            examples:
              default:
                value:
                  body: Here is the body for the review.
                  event: REQUEST_CHANGES
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pull-request-review'
              examples:
                default:
                  $ref: '#/components/examples/pull-request-review-4'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed_simple'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: pulls
        subcategory: reviews
  /repos/{owner}/{repo}/pulls/{pull_number}/update-branch:
    put:
      summary: Update a pull request branch
      description: >-
        Updates the pull request branch with the latest upstream changes by
        merging HEAD from the base branch into the pull request branch.
      tags:
        - - - - pulls
      operationId: pulls/update-branch
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls#update-a-pull-request-branch
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/pull-number'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              nullable: true
              properties:
                expected_head_sha:
                  type: string
                  description: >-
                    The expected SHA of the pull request's HEAD ref. This is the
                    most recent commit on the pull request's branch. If the
                    expected SHA does not match the pull request's HEAD, you
                    will receive a `422 Unprocessable Entity` status. You can
                    use the "[List
                    commits](https://docs.github.com/enterprise-server@3.9/rest/commits/commits#list-commits)"
                    endpoint to find the most recent commit SHA. Default: SHA of
                    the pull request's current HEAD ref.
            examples:
              default:
                value:
                  expected_head_sha: 6dcb09b5b57875f334f61aebed695e2e4193db5e
      responses:
        '202':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  url:
                    type: string
              examples:
                default:
                  value:
                    message: Updating pull request branch.
                    url: https://github.com/repos/octocat/Hello-World/pulls/53
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: pulls
        subcategory: pulls
  /repos/{owner}/{repo}/readme:
    get:
      summary: Get a repository README
      description: >-
        Gets the preferred README for a repository.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw file contents.
        This is the default if you do not specify a media type.

        - **`application/vnd.github.html+json`**: Returns the README in HTML.
        Markup languages are rendered to HTML using GitHub's open-source [Markup
        library](https://github.com/github/markup).
      tags:
        - - - - repos
      operationId: repos/get-readme
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/contents#get-a-repository-readme
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: ref
          description: >-
            The name of the commit/branch/tag. Default: the repository’s default
            branch.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/content-file'
              examples:
                default:
                  $ref: '#/components/examples/content-file'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: contents
  /repos/{owner}/{repo}/readme/{dir}:
    get:
      summary: Get a repository README for a directory
      description: >-
        Gets the README from a repository directory.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.raw+json`**: Returns the raw file contents.
        This is the default if you do not specify a media type.

        - **`application/vnd.github.html+json`**: Returns the README in HTML.
        Markup languages are rendered to HTML using GitHub's open-source [Markup
        library](https://github.com/github/markup).
      tags:
        - - - - repos
      operationId: repos/get-readme-in-directory
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/contents#get-a-repository-readme-for-a-directory
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: dir
          description: The alternate path to look for a README file
          in: path
          required: true
          schema:
            type: string
          x-multi-segment: true
        - name: ref
          description: >-
            The name of the commit/branch/tag. Default: the repository’s default
            branch.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/content-file'
              examples:
                default:
                  $ref: '#/components/examples/content-file'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: contents
  /repos/{owner}/{repo}/releases:
    get:
      summary: List releases
      description: >-
        This returns a list of releases, which does not include regular Git tags
        that have not been associated with a release. To get a list of Git tags,
        use the [Repository Tags
        API](https://docs.github.com/enterprise-server@3.9/rest/repos/repos#list-repository-tags).


        Information about published releases are available to everyone. Only
        users with push access will receive listings for draft releases.
      tags:
        - - - - repos
      operationId: repos/list-releases
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/releases/releases#list-releases
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/release'
              examples:
                default:
                  $ref: '#/components/examples/release-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: releases
        subcategory: releases
    post:
      summary: Create a release
      description: >-
        Users with push access to the repository can create a release.


        This endpoint triggers
        [notifications](https://docs.github.com/enterprise-server@3.9/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        Creating content too quickly using this endpoint may result in secondary
        rate limiting. For more information, see "[Rate limits for the
        API](https://docs.github.com/enterprise-server@3.9/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
        and "[Best practices for using the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/best-practices-for-using-the-rest-api)."
      tags:
        - - - - repos
      operationId: repos/create-release
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/releases/releases#create-a-release
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tag_name:
                  type: string
                  description: The name of the tag.
                target_commitish:
                  type: string
                  description: >-
                    Specifies the commitish value that determines where the Git
                    tag is created from. Can be any branch or commit SHA. Unused
                    if the Git tag already exists. Default: the repository's
                    default branch.
                name:
                  type: string
                  description: The name of the release.
                body:
                  type: string
                  description: Text describing the contents of the tag.
                draft:
                  type: boolean
                  description: >-
                    `true` to create a draft (unpublished) release, `false` to
                    create a published one.
                  default: false
                prerelease:
                  type: boolean
                  description: >-
                    `true` to identify the release as a prerelease. `false` to
                    identify the release as a full release.
                  default: false
                generate_release_notes:
                  type: boolean
                  description: >-
                    Whether to automatically generate the name and body for this
                    release. If `name` is specified, the specified name will be
                    used; otherwise, a name will be automatically generated. If
                    `body` is specified, the body will be pre-pended to the
                    automatically generated notes.
                  default: false
                make_latest:
                  type: string
                  description: >-
                    Specifies whether this release should be set as the latest
                    release for the repository. Drafts and prereleases cannot be
                    set as latest. Defaults to `true` for newly published
                    releases. `legacy` specifies that the latest release should
                    be determined based on the release creation date and higher
                    semantic version.
                  enum:
                    - 'true'
                    - 'false'
                    - legacy
                  default: true
              required:
                - tag_name
            examples:
              default:
                value:
                  tag_name: v1.0.0
                  target_commitish: master
                  name: v1.0.0
                  body: Description of the release
                  draft: false
                  prerelease: false
                  generate_release_notes: false
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/release'
              examples:
                default:
                  $ref: '#/components/examples/release'
          headers:
            Location:
              example: https://api.github.com/repos/octocat/Hello-World/releases/1
              schema:
                type: string
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        triggersNotification: true
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: releases
        subcategory: releases
  /repos/{owner}/{repo}/releases/assets/{asset_id}:
    get:
      summary: Get a release asset
      description: >-
        To download the asset's binary content, set the `Accept` header of the
        request to
        [`application/octet-stream`](https://docs.github.com/enterprise-server@3.9/rest/overview/media-types).
        The API will either redirect the client to the location, or stream it
        directly if possible. API clients should handle both a `200` or `302`
        response.
      tags:
        - - - - repos
      operationId: repos/get-release-asset
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/releases/assets#get-a-release-asset
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/asset-id'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/release-asset'
              examples:
                default:
                  $ref: '#/components/examples/release-asset'
        '302':
          $ref: '#/components/responses/found'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: releases
        subcategory: assets
    patch:
      summary: Update a release asset
      description: Users with push access to the repository can edit a release asset.
      tags:
        - - - - repos
      operationId: repos/update-release-asset
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/releases/assets#update-a-release-asset
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/asset-id'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The file name of the asset.
                label:
                  type: string
                  description: >-
                    An alternate short description of the asset. Used in place
                    of the filename.
                state:
                  type: string
                  example: '"uploaded"'
            examples:
              default:
                value:
                  name: foo-1.0.0-osx.zip
                  label: Mac binary
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/release-asset'
              examples:
                default:
                  $ref: '#/components/examples/release-asset'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: releases
        subcategory: assets
    delete:
      summary: Delete a release asset
      description: ''
      tags:
        - - - - repos
      operationId: repos/delete-release-asset
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/releases/assets#delete-a-release-asset
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/asset-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: releases
        subcategory: assets
  /repos/{owner}/{repo}/releases/generate-notes:
    post:
      summary: Generate release notes content for a release
      description: >-
        Generate a name and body describing a
        [release](https://docs.github.com/enterprise-server@3.9/rest/releases/releases#get-a-release).
        The body content will be markdown formatted and contain information like
        the changes since last release and users who contributed. The generated
        release notes are not saved anywhere. They are intended to be generated
        and used when creating a new release.
      tags:
        - - - - repos
      operationId: repos/generate-release-notes
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/releases/releases#generate-release-notes-content-for-a-release
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tag_name:
                  type: string
                  description: >-
                    The tag name for the release. This can be an existing tag or
                    a new one.
                target_commitish:
                  type: string
                  description: >-
                    Specifies the commitish value that will be the target for
                    the release's tag. Required if the supplied tag_name does
                    not reference an existing tag. Ignored if the tag_name
                    already exists.
                previous_tag_name:
                  type: string
                  description: >-
                    The name of the previous tag to use as the starting point
                    for the release notes. Use to manually specify the range for
                    the set of changes considered as part this release.
                configuration_file_path:
                  type: string
                  description: >-
                    Specifies a path to a file in the repository containing
                    configuration settings used for generating the release
                    notes. If unspecified, the configuration file located in the
                    repository at '.github/release.yml' or
                    '.github/release.yaml' will be used. If that is not present,
                    the default configuration will be used.
              required:
                - tag_name
            examples:
              default:
                value:
                  tag_name: v1.0.0
                  target_commitish: main
                  previous_tag_name: v0.9.2
                  configuration_file_path: .github/custom_release_config.yml
      responses:
        '200':
          description: Name and body of generated release notes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/release-notes-content'
              examples:
                default:
                  $ref: '#/components/examples/release-notes-content'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: releases
        subcategory: releases
  /repos/{owner}/{repo}/releases/latest:
    get:
      summary: Get the latest release
      description: >-
        View the latest published full release for the repository.


        The latest release is the most recent non-prerelease, non-draft release,
        sorted by the `created_at` attribute. The `created_at` attribute is the
        date of the commit used for the release, and not the date when the
        release was drafted or published.
      tags:
        - - - - repos
      operationId: repos/get-latest-release
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/releases/releases#get-the-latest-release
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/release'
              examples:
                default:
                  $ref: '#/components/examples/release'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: releases
        subcategory: releases
  /repos/{owner}/{repo}/releases/tags/{tag}:
    get:
      summary: Get a release by tag name
      description: Get a published release with the specified tag.
      tags:
        - - - - repos
      operationId: repos/get-release-by-tag
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/releases/releases#get-a-release-by-tag-name
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: tag
          description: tag parameter
          in: path
          required: true
          schema:
            type: string
          x-multi-segment: true
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/release'
              examples:
                default:
                  $ref: '#/components/examples/release'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: releases
        subcategory: releases
  /repos/{owner}/{repo}/releases/{release_id}:
    get:
      summary: Get a release
      description: >-
        Gets a public release with the specified release ID.


        **Note:** This returns an `upload_url` key corresponding to the endpoint

        for uploading release assets. This key is a hypermedia resource. For
        more information, see

        "[Getting started with the REST
        API](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
      tags:
        - - - - repos
      operationId: repos/get-release
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/releases/releases#get-a-release
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/release-id'
      responses:
        '200':
          description: >-
            **Note:** This returns an `upload_url` key corresponding to the
            endpoint for uploading release assets. This key is a hypermedia
            resource. For more information, see "[Getting started with the REST
            API](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/release'
              examples:
                default:
                  $ref: '#/components/examples/release'
        '401':
          description: Unauthorized
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: releases
        subcategory: releases
    patch:
      summary: Update a release
      description: Users with push access to the repository can edit a release.
      tags:
        - - - - repos
      operationId: repos/update-release
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/releases/releases#update-a-release
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/release-id'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                tag_name:
                  type: string
                  description: The name of the tag.
                target_commitish:
                  type: string
                  description: >-
                    Specifies the commitish value that determines where the Git
                    tag is created from. Can be any branch or commit SHA. Unused
                    if the Git tag already exists. Default: the repository's
                    default branch.
                name:
                  type: string
                  description: The name of the release.
                body:
                  type: string
                  description: Text describing the contents of the tag.
                draft:
                  type: boolean
                  description: >-
                    `true` makes the release a draft, and `false` publishes the
                    release.
                prerelease:
                  type: boolean
                  description: >-
                    `true` to identify the release as a prerelease, `false` to
                    identify the release as a full release.
                make_latest:
                  type: string
                  description: >-
                    Specifies whether this release should be set as the latest
                    release for the repository. Drafts and prereleases cannot be
                    set as latest. Defaults to `true` for newly published
                    releases. `legacy` specifies that the latest release should
                    be determined based on the release creation date and higher
                    semantic version.
                  enum:
                    - 'true'
                    - 'false'
                    - legacy
                  default: true
            examples:
              default:
                value:
                  tag_name: v1.0.0
                  target_commitish: master
                  name: v1.0.0
                  body: Description of the release
                  draft: false
                  prerelease: false
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/release'
              examples:
                default:
                  $ref: '#/components/examples/release'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: releases
        subcategory: releases
    delete:
      summary: Delete a release
      description: Users with push access to the repository can delete a release.
      tags:
        - - - - repos
      operationId: repos/delete-release
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/releases/releases#delete-a-release
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/release-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: releases
        subcategory: releases
  /repos/{owner}/{repo}/releases/{release_id}/assets:
    get:
      summary: List release assets
      description: ''
      tags:
        - - - - repos
      operationId: repos/list-release-assets
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/releases/assets#list-release-assets
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/release-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/release-asset'
              examples:
                default:
                  $ref: '#/components/examples/release-asset-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: releases
        subcategory: assets
    post:
      summary: Upload a release asset
      description: >-
        This endpoint makes use of a [Hypermedia
        relation](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)
        to determine which URL to access. The endpoint you call to upload
        release assets is specific to your release. Use the `upload_url`
        returned in

        the response of the [Create a release
        endpoint](https://docs.github.com/enterprise-server@3.9/rest/releases/releases#create-a-release)
        to upload a release asset.


        You need to use an HTTP client which supports
        [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls
        to this endpoint.


        Most libraries will set the required `Content-Length` header
        automatically. Use the required `Content-Type` header to provide the
        media type of the asset. For a list of media types, see [Media
        Types](https://www.iana.org/assignments/media-types/media-types.xhtml).
        For example: 


        `application/zip`


        GitHub Enterprise Server expects the asset data in its raw binary form,
        rather than JSON. You will send the raw binary content of the asset as
        the request body. Everything else about the endpoint is the same as the
        rest of the API. For example,

        you'll still need to pass your authentication to be able to upload an
        asset.


        When an upstream failure occurs, you will receive a `502 Bad Gateway`
        status. This may leave an empty asset with a state of `starter`. It can
        be safely deleted.


        **Notes:**

        *   GitHub Enterprise Server renames asset filenames that have special
        characters, non-alphanumeric characters, and leading or trailing
        periods. The "[List release
        assets](https://docs.github.com/enterprise-server@3.9/rest/releases/assets#list-release-assets)"

        endpoint lists the renamed filenames. For more information and help,
        contact [GitHub Enterprise Server
        Support](https://support.github.com/contact?tags=dotcom-rest-api).

        *   To find the `release_id` query the [`GET
        /repos/{owner}/{repo}/releases/latest`
        endpoint](https://docs.github.com/enterprise-server@3.9/rest/releases/releases#get-the-latest-release). 

        *   If you upload an asset with the same filename as another uploaded
        asset, you'll receive an error and must delete the old file before you
        can re-upload the new asset.
      tags:
        - - - - repos
      operationId: repos/upload-release-asset
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/releases/assets#upload-a-release-asset
      servers:
        - url: https://uploads.github.com
          description: >-
            The URL origin (protocol + host name + port) is included in
            `upload_url` returned in the response of the "Create a release"
            endpoint
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/release-id'
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: label
          in: query
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
              description: The raw file data
            examples:
              default:
                value: '@example.zip'
      responses:
        '201':
          description: Response for successful upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/release-asset'
              examples:
                response-for-successful-upload:
                  $ref: >-
                    #/components/examples/release-asset-response-for-successful-upload
        '422':
          description: >-
            Response if you upload an asset with the same filename as another
            uploaded asset
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: releases
        subcategory: assets
  /repos/{owner}/{repo}/releases/{release_id}/reactions:
    get:
      summary: List reactions for a release
      description: >-
        List the reactions to a
        [release](https://docs.github.com/enterprise-server@3.9/rest/releases/releases#get-a-release).
      tags:
        - - - - reactions
      operationId: reactions/list-for-release
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#list-reactions-for-a-release
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/release-id'
        - name: content
          description: >-
            Returns a single [reaction
            type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions).
            Omit this parameter to list all reactions to a release.
          in: query
          required: false
          schema:
            type: string
            enum:
              - '+1'
              - laugh
              - heart
              - hooray
              - rocket
              - eyes
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
    post:
      summary: Create reaction for a release
      description: >-
        Create a reaction to a
        [release](https://docs.github.com/enterprise-server@3.9/rest/releases/releases#get-a-release).
        A response with a `Status: 200 OK` means that you already added the
        reaction type to this release.
      tags:
        - - - - reactions
      operationId: reactions/create-for-release
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#create-reaction-for-a-release
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/release-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: >-
                    The [reaction
                    type](https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#about-reactions)
                    to add to the release.
                  enum:
                    - '+1'
                    - laugh
                    - heart
                    - hooray
                    - rocket
                    - eyes
              required:
                - content
            examples:
              default:
                value:
                  content: heart
      responses:
        '200':
          description: Reaction exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
        '201':
          description: Reaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reaction'
              examples:
                default:
                  $ref: '#/components/examples/reaction'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
  /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}:
    delete:
      summary: Delete a release reaction
      description: >-
        **Note:** You can also specify a repository by `repository_id` using the
        route `DELETE delete
        /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.


        Delete a reaction to a
        [release](https://docs.github.com/enterprise-server@3.9/rest/releases/releases#get-a-release).
      tags:
        - - - - reactions
      operationId: reactions/delete-for-release
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/reactions/reactions#delete-a-release-reaction
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/release-id'
        - $ref: '#/components/parameters/reaction-id'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: reactions
        subcategory: reactions
  /repos/{owner}/{repo}/replicas/caches:
    get:
      summary: List repository cache replication status
      description: Lists the status of each repository cache replica.
      tags:
        - - - - repos
      operationId: repos/list-cache-info
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#list-repository-cache-replication-status
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Status information for cache replicas
          content:
            application/json:
              schema:
                type: array
                items:
                  description: Status for a cache replica
                  type: object
                  properties:
                    host:
                      type: string
                    location:
                      type: string
                    git:
                      type: object
                      properties:
                        sync_status:
                          type: string
                          enum:
                            - offline
                            - inactive
                            - in_sync
                            - not_in_sync
                        last_sync:
                          type: string
                          format: date-time
                      required:
                        - sync_status
                        - last_sync
                  required:
                    - host
                    - location
                    - git
              examples:
                default:
                  value:
                    - host: host-1
                      location: berlin
                      git:
                        - sync_status: in_sync
                        - last_sync: '2022-01-10T19:33:52Z'
                    - host: host-2
                      location: chicago
                      git:
                        - sync_status: offline
                        - last_sync: '2022-01-10T19:34:12Z'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
  /repos/{owner}/{repo}/secret-scanning/alerts:
    get:
      summary: List secret scanning alerts for a repository
      description: >-
        Lists secret scanning alerts for an eligible repository, from newest to
        oldest.


        The authenticated user must be an administrator for the repository or
        for the organization that owns the repository to use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo` or
        `security_events` scope to use this endpoint. If this endpoint is only
        used with public repositories, the token can use the `public_repo` scope
        instead.
      tags:
        - - - - secret-scanning
      operationId: secret-scanning/list-alerts-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/secret-scanning/secret-scanning#list-secret-scanning-alerts-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/secret-scanning-alert-state'
        - $ref: '#/components/parameters/secret-scanning-alert-secret-type'
        - $ref: '#/components/parameters/secret-scanning-alert-resolution'
        - $ref: '#/components/parameters/secret-scanning-alert-sort'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/secret-scanning-pagination-before-org-repo'
        - $ref: '#/components/parameters/secret-scanning-pagination-after-org-repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/secret-scanning-alert'
              examples:
                default:
                  $ref: '#/components/examples/secret-scanning-alert-list'
        '404':
          description: >-
            Repository is public or secret scanning is disabled for the
            repository
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: secret-scanning
        subcategory: secret-scanning
  /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}:
    get:
      summary: Get a secret scanning alert
      description: >-
        Gets a single secret scanning alert detected in an eligible repository.


        The authenticated user must be an administrator for the repository or
        for the organization that owns the repository to use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo` or
        `security_events` scope to use this endpoint. If this endpoint is only
        used with public repositories, the token can use the `public_repo` scope
        instead.
      tags:
        - - - - secret-scanning
      operationId: secret-scanning/get-alert
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/secret-scanning/secret-scanning#get-a-secret-scanning-alert
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/alert-number'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/secret-scanning-alert'
              examples:
                default:
                  $ref: '#/components/examples/secret-scanning-alert-open'
        '304':
          $ref: '#/components/responses/not_modified'
        '404':
          description: >-
            Repository is public, or secret scanning is disabled for the
            repository, or the resource is not found
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: secret-scanning
        subcategory: secret-scanning
    patch:
      summary: Update a secret scanning alert
      description: >-
        Updates the status of a secret scanning alert in an eligible repository.


        The authenticated user must be an administrator for the repository or
        for the organization that owns the repository to use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo` or
        `security_events` scope to use this endpoint. If this endpoint is only
        used with public repositories, the token can use the `public_repo` scope
        instead.
      operationId: secret-scanning/update-alert
      tags:
        - - - - secret-scanning
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/secret-scanning/secret-scanning#update-a-secret-scanning-alert
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/alert-number'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  $ref: '#/components/schemas/secret-scanning-alert-state'
                resolution:
                  $ref: '#/components/schemas/secret-scanning-alert-resolution'
                resolution_comment:
                  $ref: >-
                    #/components/schemas/secret-scanning-alert-resolution-comment
              required:
                - state
            examples:
              default:
                value:
                  state: resolved
                  resolution: false_positive
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/secret-scanning-alert'
              examples:
                default:
                  $ref: '#/components/examples/secret-scanning-alert-resolved'
        '400':
          description: >-
            Bad request, resolution comment is invalid or the resolution was not
            changed.
        '404':
          description: >-
            Repository is public, or secret scanning is disabled for the
            repository, or the resource is not found
        '422':
          description: State does not match the resolution or resolution comment
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        enabledForGitHubApps: true
        githubCloudOnly: false
        category: secret-scanning
        subcategory: secret-scanning
  /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations:
    get:
      summary: List locations for a secret scanning alert
      description: >-
        Lists all locations for a given secret scanning alert for an eligible
        repository.


        The authenticated user must be an administrator for the repository or
        for the organization that owns the repository to use this endpoint.


        OAuth app tokens and personal access tokens (classic) need the `repo` or
        `security_events` scope to use this endpoint. If this endpoint is only
        used with public repositories, the token can use the `public_repo` scope
        instead.
      tags:
        - - - - secret-scanning
      operationId: secret-scanning/list-locations-for-alert
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/secret-scanning/secret-scanning#list-locations-for-a-secret-scanning-alert
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/alert-number'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per-page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                description: List of locations where the secret was detected
                items:
                  $ref: '#/components/schemas/secret-scanning-location'
              examples:
                default:
                  $ref: '#/components/examples/secret-scanning-location-list'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          description: >-
            Repository is public, or secret scanning is disabled for the
            repository, or the resource is not found
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: secret-scanning
        subcategory: secret-scanning
  /repos/{owner}/{repo}/stargazers:
    get:
      summary: List stargazers
      description: >-
        Lists the people that have starred the repository.


        This endpoint supports the following custom media types. For more
        information, see "[Media
        types](https://docs.github.com/enterprise-server@3.9/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."


        - **`application/vnd.github.star+json`**: Includes a timestamp of when
        the star was created.
      tags:
        - - - - activity
      operationId: activity/list-stargazers-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/starring#list-stargazers
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                anyOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/simple-user'
                  - type: array
                    items:
                      $ref: '#/components/schemas/stargazer'
              examples:
                default-response:
                  $ref: '#/components/examples/simple-user-items-default-response'
                alternative-response-with-star-creation-timestamps:
                  $ref: >-
                    #/components/examples/stargazer-items-alternative-response-with-star-creation-timestamps
          headers:
            Link:
              $ref: '#/components/headers/link'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: activity
        subcategory: starring
  /repos/{owner}/{repo}/stats/code_frequency:
    get:
      summary: Get the weekly commit activity
      description: >-
        Returns a weekly aggregate of the number of additions and deletions
        pushed to a repository.
      tags:
        - - - - repos
      operationId: repos/get-code-frequency-stats
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/metrics/statistics#get-the-weekly-commit-activity
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: >-
            Returns a weekly aggregate of the number of additions and deletions
            pushed to a repository.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/code-frequency-stat'
              examples:
                default:
                  $ref: '#/components/examples/code-frequency-stat-items'
        '202':
          $ref: '#/components/responses/accepted'
        '204':
          $ref: '#/components/responses/no_content'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: metrics
        subcategory: statistics
  /repos/{owner}/{repo}/stats/commit_activity:
    get:
      summary: Get the last year of commit activity
      description: >-
        Returns the last year of commit activity grouped by week. The `days`
        array is a group of commits per day, starting on `Sunday`.
      tags:
        - - - - repos
      operationId: repos/get-commit-activity-stats
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/metrics/statistics#get-the-last-year-of-commit-activity
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/commit-activity'
              examples:
                default:
                  $ref: '#/components/examples/commit-activity-items'
        '202':
          $ref: '#/components/responses/accepted'
        '204':
          $ref: '#/components/responses/no_content'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: metrics
        subcategory: statistics
  /repos/{owner}/{repo}/stats/contributors:
    get:
      summary: Get all contributor commit activity
      description: >-

        Returns the `total` number of commits authored by the contributor. In
        addition, the response includes a Weekly Hash (`weeks` array) with the
        following information:


        *   `w` - Start of the week, given as a [Unix
        timestamp](https://en.wikipedia.org/wiki/Unix_time).

        *   `a` - Number of additions

        *   `d` - Number of deletions

        *   `c` - Number of commits
      tags:
        - - - - repos
      operationId: repos/get-contributors-stats
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/metrics/statistics#get-all-contributor-commit-activity
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/contributor-activity'
              examples:
                default:
                  $ref: '#/components/examples/contributor-activity-items'
        '202':
          $ref: '#/components/responses/accepted'
        '204':
          $ref: '#/components/responses/no_content'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: metrics
        subcategory: statistics
  /repos/{owner}/{repo}/stats/participation:
    get:
      summary: Get the weekly commit count
      description: >-
        Returns the total commit counts for the `owner` and total commit counts
        in `all`. `all` is everyone combined, including the `owner` in the last
        52 weeks. If you'd like to get the commit counts for non-owners, you can
        subtract `owner` from `all`.


        The array order is oldest week (index 0) to most recent week.


        The most recent week is seven days ago at UTC midnight to today at UTC
        midnight.
      tags:
        - - - - repos
      operationId: repos/get-participation-stats
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/metrics/statistics#get-the-weekly-commit-count
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: The array order is oldest week (index 0) to most recent week.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/participation-stats'
              examples:
                default:
                  $ref: '#/components/examples/participation-stats'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: metrics
        subcategory: statistics
  /repos/{owner}/{repo}/stats/punch_card:
    get:
      summary: Get the hourly commit count for each day
      description: >-
        Each array contains the day number, hour number, and number of commits:


        *   `0-6`: Sunday - Saturday

        *   `0-23`: Hour of day

        *   Number of commits


        For example, `[2, 14, 25]` indicates that there were 25 total commits,
        during the 2:00pm hour on Tuesdays. All times are based on the time zone
        of individual commits.
      tags:
        - - - - repos
      operationId: repos/get-punch-card-stats
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/metrics/statistics#get-the-hourly-commit-count-for-each-day
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: >-
            For example, `[2, 14, 25]` indicates that there were 25 total
            commits, during the 2:00pm hour on Tuesdays. All times are based on
            the time zone of individual commits.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/code-frequency-stat'
              examples:
                default:
                  $ref: '#/components/examples/code-frequency-stat-items-2'
        '204':
          $ref: '#/components/responses/no_content'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: metrics
        subcategory: statistics
  /repos/{owner}/{repo}/statuses/{sha}:
    post:
      summary: Create a commit status
      description: >-
        Users with push access in a repository can create commit statuses for a
        given SHA.


        Note: there is a limit of 1000 statuses per `sha` and `context` within a
        repository. Attempts to create more than 1000 statuses will result in a
        validation error.
      tags:
        - - - - repos
      operationId: repos/create-commit-status
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/commits/statuses#create-a-commit-status
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: sha
          in: path
          required: true
          schema:
            type: string
          x-multi-segment: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                  description: The state of the status.
                  enum:
                    - error
                    - failure
                    - pending
                    - success
                target_url:
                  type: string
                  nullable: true
                  description: >-
                    The target URL to associate with this status. This URL will
                    be linked from the GitHub UI to allow users to easily see
                    the source of the status.  

                    For example, if your continuous integration system is
                    posting build status, you would want to provide the deep
                    link for the build output for this specific SHA:  

                    `http://ci.example.com/user/repo/build/sha`
                description:
                  type: string
                  nullable: true
                  description: A short description of the status.
                context:
                  type: string
                  description: >-
                    A string label to differentiate this status from the status
                    of other systems. This field is case-insensitive.
                  default: default
              required:
                - state
            examples:
              default:
                value:
                  state: success
                  target_url: https://example.com/build/status
                  description: The build succeeded!
                  context: continuous-integration/jenkins
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status'
              examples:
                default:
                  $ref: '#/components/examples/status'
          headers:
            Location:
              example: >-
                https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e
              schema:
                type: string
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: commits
        subcategory: statuses
  /repos/{owner}/{repo}/subscribers:
    get:
      summary: List watchers
      description: Lists the people watching the specified repository.
      tags:
        - - - - activity
      operationId: activity/list-watchers-for-repo
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/watching#list-watchers
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/simple-user'
              examples:
                default:
                  $ref: '#/components/examples/simple-user-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: activity
        subcategory: watching
  /repos/{owner}/{repo}/subscription:
    get:
      summary: Get a repository subscription
      description: >-
        Gets information about whether the authenticated user is subscribed to
        the repository.
      tags:
        - - - - activity
      operationId: activity/get-repo-subscription
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/watching#get-a-repository-subscription
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: if you subscribe to the repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repository-subscription'
              examples:
                response-if-you-subscribe-to-the-repository:
                  $ref: >-
                    #/components/examples/repository-subscription-response-if-you-subscribe-to-the-repository
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Not Found if you don't subscribe to the repository
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: activity
        subcategory: watching
    put:
      summary: Set a repository subscription
      description: >-
        If you would like to watch a repository, set `subscribed` to `true`. If
        you would like to ignore notifications made within a repository, set
        `ignored` to `true`. If you would like to stop watching a repository,
        [delete the repository's
        subscription](https://docs.github.com/enterprise-server@3.9/rest/activity/watching#delete-a-repository-subscription)
        completely.
      tags:
        - - - - activity
      operationId: activity/set-repo-subscription
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/watching#set-a-repository-subscription
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                subscribed:
                  type: boolean
                  description: >-
                    Determines if notifications should be received from this
                    repository.
                ignored:
                  type: boolean
                  description: >-
                    Determines if all notifications should be blocked from this
                    repository.
            examples:
              default:
                value:
                  subscribed: true
                  ignored: false
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repository-subscription'
              examples:
                default:
                  $ref: '#/components/examples/repository-subscription'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: activity
        subcategory: watching
    delete:
      summary: Delete a repository subscription
      description: >-
        This endpoint should only be used to stop watching a repository. To
        control whether or not you wish to receive notifications from a
        repository, [set the repository's subscription
        manually](https://docs.github.com/enterprise-server@3.9/rest/activity/watching#set-a-repository-subscription).
      tags:
        - - - - activity
      operationId: activity/delete-repo-subscription
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/activity/watching#delete-a-repository-subscription
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: activity
        subcategory: watching
  /repos/{owner}/{repo}/tags:
    get:
      summary: List repository tags
      description: ''
      tags:
        - - - - repos
      operationId: repos/list-tags
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#list-repository-tags
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tag'
              examples:
                default:
                  $ref: '#/components/examples/tag-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
  /repos/{owner}/{repo}/tags/protection:
    get:
      summary: List tag protection states for a repository
      description: |-
        This returns the tag protection states of a repository.

        This information is only available to repository administrators.
      tags:
        - - - - repos
      operationId: repos/list-tag-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/tags#list-tag-protection-states-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tag-protection'
              examples:
                default:
                  $ref: '#/components/examples/tag-protection-items'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: tags
    post:
      summary: Create a tag protection state for a repository
      description: |-
        This creates a tag protection state for a repository.
        This endpoint is only available to repository administrators.
      tags:
        - - - - repos
      operationId: repos/create-tag-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/tags#create-a-tag-protection-state-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pattern:
                  type: string
                  description: >-
                    An optional glob pattern to match against when enforcing tag
                    protection.
              required:
                - pattern
            examples:
              default:
                value:
                  pattern: v1.*
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tag-protection'
              examples:
                default:
                  $ref: '#/components/examples/tag-protection'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: tags
  /repos/{owner}/{repo}/tags/protection/{tag_protection_id}:
    delete:
      summary: Delete a tag protection state for a repository
      description: |-
        This deletes a tag protection state for a repository.
        This endpoint is only available to repository administrators.
      tags:
        - - - - repos
      operationId: repos/delete-tag-protection
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/tags#delete-a-tag-protection-state-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/tag-protection-id'
      responses:
        '204':
          description: Response
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: tags
  /repos/{owner}/{repo}/tarball/{ref}:
    get:
      summary: Download a repository archive (tar)
      description: >-
        Gets a redirect URL to download a tar archive for a repository. If you
        omit `:ref`, the repository’s default branch (usually

        `main`) will be used. Please make sure your HTTP framework is configured
        to follow redirects or you will need to use

        the `Location` header to make a second `GET` request.

        **Note**: For private repositories, these links are temporary and expire
        after five minutes.
      tags:
        - - - - repos
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/contents#download-a-repository-archive-tar
      operationId: repos/download-tarball-archive
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: ref
          in: path
          required: true
          x-multi-segment: true
          schema:
            type: string
      responses:
        '302':
          description: Response
          headers:
            Location:
              example: >-
                https://codeload.github.com/me/myprivate/legacy.zip/master?login=me&token=thistokenexpires
              schema:
                type: string
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: contents
  /repos/{owner}/{repo}/teams:
    get:
      summary: List repository teams
      description: >-
        Lists the teams that have access to the specified repository and that
        are also visible to the authenticated user.


        For a public repository, a team is listed only if that team added the
        public repository explicitly.


        OAuth app tokens and personal access tokens (classic) need the
        `public_repo` or `repo` scope to use this endpoint with a public
        repository, and `repo` scope to use this endpoint with a private
        repository.
      tags:
        - - - - repos
      operationId: repos/list-teams
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#list-repository-teams
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
              examples:
                default:
                  $ref: '#/components/examples/team-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
  /repos/{owner}/{repo}/topics:
    get:
      summary: Get all repository topics
      description: ''
      tags:
        - - - - repos
      operationId: repos/get-all-topics
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#get-all-repository-topics
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per-page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic'
              examples:
                default:
                  $ref: '#/components/examples/topic'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
    put:
      summary: Replace all repository topics
      description: ''
      tags:
        - - - - repos
      operationId: repos/replace-all-topics
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#replace-all-repository-topics
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                names:
                  type: array
                  description: >-
                    An array of topics to add to the repository. Pass one or
                    more topics to _replace_ the set of existing topics. Send an
                    empty array (`[]`) to clear all topics from the repository.
                    **Note:** Topic `names` cannot contain uppercase letters.
                  items:
                    type: string
              required:
                - names
            examples:
              default:
                value:
                  names:
                    - octocat
                    - atom
                    - electron
                    - api
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic'
              examples:
                default:
                  $ref: '#/components/examples/topic'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed_simple'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
  /repos/{owner}/{repo}/transfer:
    post:
      summary: Transfer a repository
      description: >-
        A transfer request will need to be accepted by the new owner when
        transferring a personal repository to another user. The response will
        contain the original `owner`, and the transfer will continue
        asynchronously. For more details on the requirements to transfer
        personal and organization-owned repositories, see [about repository
        transfers](https://docs.github.com/enterprise-server@3.9/articles/about-repository-transfers/).

        You must use a personal access token or an OAuth token for this
        endpoint. An installation access token cannot be used because it is only
        granted access to a single account.
      tags:
        - - - - repos
      operationId: repos/transfer
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#transfer-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_owner:
                  type: string
                  description: >-
                    The username or organization name the repository will be
                    transferred to.
                new_name:
                  type: string
                  description: The new name to be given to the repository.
                team_ids:
                  type: array
                  description: >-
                    ID of the team or teams to add to the repository. Teams can
                    only be added to organization-owned repositories.
                  items:
                    type: integer
              required:
                - new_owner
            examples:
              default:
                value:
                  new_owner: github
                  team_ids:
                    - 12
                    - 345
                  new_name: octorepo
      responses:
        '202':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
  /repos/{owner}/{repo}/vulnerability-alerts:
    get:
      summary: Check if vulnerability alerts are enabled for a repository
      description: >-
        Shows whether dependency alerts are enabled or disabled for a
        repository. The authenticated user must have admin read access to the
        repository. For more information, see "[About security alerts for
        vulnerable
        dependencies](https://docs.github.com/enterprise-server@3.9/articles/about-security-alerts-for-vulnerable-dependencies)".
      tags:
        - - - - repos
      operationId: repos/check-vulnerability-alerts
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response if repository is enabled with vulnerability alerts
        '404':
          description: Not Found if repository is not enabled with vulnerability alerts
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: repos
        subcategory: repos
    put:
      summary: Enable vulnerability alerts
      description: >-
        Enables dependency alerts and the dependency graph for a repository. The
        authenticated user must have admin access to the repository. For more
        information, see "[About security alerts for vulnerable
        dependencies](https://docs.github.com/enterprise-server@3.9/articles/about-security-alerts-for-vulnerable-dependencies)".
      tags:
        - - - - repos
      operationId: repos/enable-vulnerability-alerts
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#enable-vulnerability-alerts
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
    delete:
      summary: Disable vulnerability alerts
      description: >-
        Disables dependency alerts for a repository.

        The authenticated user must have admin access to the repository. For
        more information,

        see "[About security alerts for vulnerable
        dependencies](https://docs.github.com/enterprise-server@3.9/articles/about-security-alerts-for-vulnerable-dependencies)".
      tags:
        - - - - repos
      operationId: repos/disable-vulnerability-alerts
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#disable-vulnerability-alerts
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
  /repos/{owner}/{repo}/zipball/{ref}:
    get:
      summary: Download a repository archive (zip)
      description: >-
        Gets a redirect URL to download a zip archive for a repository. If you
        omit `:ref`, the repository’s default branch (usually

        `main`) will be used. Please make sure your HTTP framework is configured
        to follow redirects or you will need to use

        the `Location` header to make a second `GET` request.


        **Note**: For private repositories, these links are temporary and expire
        after five minutes. If the repository is empty, you will receive a 404
        when you follow the redirect.
      tags:
        - - - - repos
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/contents#download-a-repository-archive-zip
      operationId: repos/download-zipball-archive
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
        - name: ref
          in: path
          required: true
          x-multi-segment: true
          schema:
            type: string
      responses:
        '302':
          description: Response
          headers:
            Location:
              example: >-
                https://codeload.github.com/me/myprivate/legacy.zip/master?login=me&token=thistokenexpires
              schema:
                type: string
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: contents
  /repos/{template_owner}/{template_repo}/generate:
    post:
      summary: Create a repository using a template
      description: >-
        Creates a new repository using a repository template. Use the
        `template_owner` and `template_repo` route parameters to specify the
        repository to use as the template. If the repository is not public, the
        authenticated user must own or be a member of an organization that owns
        the repository. To check if a repository is available to use as a
        template, get the repository's information using the [Get a
        repository](https://docs.github.com/enterprise-server@3.9/rest/repos/repos#get-a-repository)
        endpoint and check that the `is_template` key is `true`.


        OAuth app tokens and personal access tokens (classic) need the
        `public_repo` or `repo` scope to create a public repository, and `repo`
        scope to create a private repository.
      tags:
        - - - - repos
      operationId: repos/create-using-template
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#create-a-repository-using-a-template
      parameters:
        - name: template_owner
          description: >-
            The account owner of the template repository. The name is not case
            sensitive.
          in: path
          required: true
          schema:
            type: string
        - name: template_repo
          description: >-
            The name of the template repository without the `.git` extension.
            The name is not case sensitive.
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner:
                  type: string
                  description: >-
                    The organization or person who will own the new repository.
                    To create a new repository in an organization, the
                    authenticated user must be a member of the specified
                    organization.
                name:
                  type: string
                  description: The name of the new repository.
                description:
                  type: string
                  description: A short description of the new repository.
                include_all_branches:
                  type: boolean
                  description: >-
                    Set to `true` to include the directory structure and files
                    from all branches in the template repository, and not just
                    the default branch. Default: `false`.
                  default: false
                private:
                  type: boolean
                  description: >-
                    Either `true` to create a new private repository or `false`
                    to create a new public one.
                  default: false
              required:
                - name
            examples:
              default:
                value:
                  owner: octocat
                  name: Hello-World
                  description: This is your first repository
                  include_all_branches: false
                  private: false
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/full-repository'
              examples:
                default:
                  $ref: '#/components/examples/full-repository'
          headers:
            Location:
              example: https://api.github.com/repos/octocat/Hello-World
              schema:
                type: string
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: repos
        subcategory: repos
        previews:
          - required: true
            name: baptiste
            note: >-
              Creating and using repository templates is currently available for
              developers to preview. To access this new endpoint during the
              preview period, you must provide a custom [media
              type](https://docs.github.com/enterprise-server@3.9/rest/overview/media-types)
              in the `Accept` header:


              ```shell

              application/vnd.github.baptiste-preview+json

              ```
  /repositories:
    get:
      summary: List public repositories
      description: >-
        Lists all public repositories in the order that they were created.


        Note:

        - For GitHub Enterprise Server, this endpoint will only list
        repositories available to all users on the enterprise.

        - Pagination is powered exclusively by the `since` parameter. Use the
        [Link
        header](https://docs.github.com/enterprise-server@3.9/rest/guides/using-pagination-in-the-rest-api#using-link-headers)
        to get the URL for the next page of repositories.
      tags:
        - - - - repos
      operationId: repos/list-public
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#list-public-repositories
      parameters:
        - $ref: '#/components/parameters/since-repo'
        - name: visibility
          description: >-
            Specifies the types of repositories to return. This endpoint will
            only list repositories available to all users on the enterprise.
          in: query
          required: false
          schema:
            type: string
            default: public
            example: all
            enum:
              - all
              - public
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/public-repository-items'
          headers:
            Link:
              example: <https://api.github.com/repositories?since=364>; rel="next"
              schema:
                type: string
        '304':
          $ref: '#/components/responses/not_modified'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
  /search/repositories:
    get:
      summary: Search repositories
      description: >-
        Find repositories via various criteria. This method returns up to 100
        results [per
        page](https://docs.github.com/enterprise-server@3.9/rest/guides/using-pagination-in-the-rest-api).


        When searching for repositories, you can get text match metadata for the
        **name** and **description** fields when you pass the `text-match` media
        type. For more details about how to receive highlighted search results,
        see [Text match
        metadata](https://docs.github.com/enterprise-server@3.9/rest/search/search#text-match-metadata).


        For example, if you want to search for popular Tetris repositories
        written in assembly code, your query might look like this:


        `q=tetris+language:assembly&sort=stars&order=desc`


        This query searches for repositories with the word `tetris` in the name,
        the description, or the README. The results are limited to repositories
        where the primary language is assembly. The results are sorted by stars
        in descending order, so that the most popular repositories appear first
        in the search results.
      tags:
        - - - - search
      operationId: search/repos
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/search/search#search-repositories
      parameters:
        - name: q
          description: >-
            The query contains one or more search keywords and qualifiers.
            Qualifiers allow you to limit your search to specific areas of
            GitHub Enterprise Server. The REST API supports the same qualifiers
            as the web interface for GitHub Enterprise Server. To learn more
            about the format of the query, see [Constructing a search
            query](https://docs.github.com/enterprise-server@3.9/rest/search/search#constructing-a-search-query).
            See "[Searching for
            repositories](https://docs.github.com/enterprise-server@3.9/articles/searching-for-repositories/)"
            for a detailed list of qualifiers.
          in: query
          required: true
          schema:
            type: string
        - name: sort
          description: >-
            Sorts the results of your query by number of `stars`, `forks`, or
            `help-wanted-issues` or how recently the items were `updated`.
            Default: [best
            match](https://docs.github.com/enterprise-server@3.9/rest/search/search#ranking-search-results)
          in: query
          required: false
          schema:
            type: string
            enum:
              - stars
              - forks
              - help-wanted-issues
              - updated
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - incomplete_results
                  - items
                properties:
                  total_count:
                    type: integer
                  incomplete_results:
                    type: boolean
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/repo-search-result-item'
              examples:
                default:
                  $ref: '#/components/examples/repo-search-result-item-paginated'
        '304':
          $ref: '#/components/responses/not_modified'
        '422':
          $ref: '#/components/responses/validation_failed'
        '503':
          $ref: '#/components/responses/service_unavailable'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: search
        subcategory: search
  /teams/{team_id}/repos:
    get:
      summary: List team repositories (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [List team
        repositories](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#list-team-repositories)
        endpoint.
      tags:
        - - - - teams
      operationId: teams/list-repos-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#list-team-repositories-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: teams
      deprecated: true
  /teams/{team_id}/repos/{owner}/{repo}:
    get:
      summary: Check team permissions for a repository (Legacy)
      description: >-
        **Note**: Repositories inherited through a parent team will also be
        checked.


        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Check team permissions for a
        repository](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#check-team-permissions-for-a-repository)
        endpoint.


        You can also get information about the specified repository, including
        what permissions the team grants on it, by passing the following custom
        [media
        type](https://docs.github.com/enterprise-server@3.9/rest/overview/media-types/)
        via the `Accept` header:
      tags:
        - - - - teams
      operationId: teams/check-permissions-for-repo-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#check-team-permissions-for-a-repository-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '200':
          description: Alternative response with extra repository information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-repository'
              examples:
                alternative-response-with-extra-repository-information:
                  $ref: >-
                    #/components/examples/team-repository-alternative-response-with-extra-repository-information
        '204':
          description: Response if repository is managed by this team
        '404':
          description: Not Found if repository is not managed by this team
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: teams
      deprecated: true
    put:
      summary: Add or update team repository permissions (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new "[Add or update team repository
        permissions](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#add-or-update-team-repository-permissions)"
        endpoint.


        To add a repository to a team or update the team's permission on a
        repository, the authenticated user must have admin access to the
        repository, and must be able to see the team. The repository must be
        owned by the organization, or a direct fork of a repository owned by the
        organization. You will get a `422 Unprocessable Entity` status if you
        attempt to add a repository to a team that is not owned by the
        organization.


        Note that, if you choose not to pass any parameters, you'll need to set
        `Content-Length` to zero when calling out to this endpoint. For more
        information, see "[HTTP
        method](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-rest-api#http-method)."
      tags:
        - - - - teams
      operationId: teams/add-or-update-repo-permissions-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#add-or-update-team-repository-permissions-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  type: string
                  description: >-
                    The permission to grant the team on this repository. If no
                    permission is specified, the team's `permission` attribute
                    will be used to determine what permission to grant the team
                    on this repository.
                  enum:
                    - pull
                    - push
                    - admin
            examples:
              default:
                summary: Example of setting permission to pull
                value:
                  permission: push
      responses:
        '204':
          description: Response
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: teams
      deprecated: true
    delete:
      summary: Remove a repository from a team (Legacy)
      description: >-
        **Deprecation Notice:** This endpoint route is deprecated and will be
        removed from the Teams API. We recommend migrating your existing code to
        use the new [Remove a repository from a
        team](https://docs.github.com/enterprise-server@3.9/rest/teams/teams#remove-a-repository-from-a-team)
        endpoint.


        If the authenticated user is an organization owner or a team maintainer,
        they can remove any repositories from the team. To remove a repository
        from a team as an organization member, the authenticated user must have
        admin access to the repository and must be able to see the team. NOTE:
        This does not delete the repository, it just removes it from the team.
      tags:
        - - - - teams
      operationId: teams/remove-repo-legacy
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/teams/teams#remove-a-repository-from-a-team-legacy
      parameters:
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/repo'
      responses:
        '204':
          description: Response
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        removalDate: '2021-02-01'
        deprecationDate: '2020-01-21'
        category: teams
        subcategory: teams
      deprecated: true
  /user/installations/{installation_id}/repositories:
    get:
      summary: List repositories accessible to the user access token
      description: >-
        List repositories that the authenticated user has explicit permission
        (`:read`, `:write`, or `:admin`) to access for an installation.


        The authenticated user has explicit permission to access repositories
        they own, repositories where they are a collaborator, and repositories
        that they can access through an organization membership.


        The access the user has to each repository is included in the hash under
        the `permissions` key.
      tags:
        - - - - apps
      operationId: apps/list-installation-repos-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/apps/installations#list-repositories-accessible-to-the-user-access-token
      parameters:
        - $ref: '#/components/parameters/installation-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: >-
            The access the user has to each repository is included in the hash
            under the `permissions` key.
          content:
            application/json:
              schema:
                type: object
                required:
                  - total_count
                  - repositories
                properties:
                  total_count:
                    type: integer
                  repository_selection:
                    type: string
                  repositories:
                    type: array
                    items:
                      $ref: '#/components/schemas/repository'
              examples:
                default:
                  $ref: '#/components/examples/repository-paginated'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: apps
        subcategory: installations
  /user/installations/{installation_id}/repositories/{repository_id}:
    put:
      summary: Add a repository to an app installation
      description: >-
        Add a single repository to an installation. The authenticated user must
        have admin access to the repository.
      tags:
        - - - - apps
      operationId: apps/add-repo-to-installation-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/apps/installations#add-a-repository-to-an-app-installation
      parameters:
        - $ref: '#/components/parameters/installation-id'
        - $ref: '#/components/parameters/repository-id'
      responses:
        '204':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: apps
        subcategory: installations
    delete:
      summary: Remove a repository from an app installation
      description: >-
        Remove a single repository from an installation. The authenticated user
        must have admin access to the repository.


        You must use a personal access token (which you can create via the
        [command
        line](https://docs.github.com/enterprise-server@3.9/github/authenticating-to-github/creating-a-personal-access-token)
        or [Basic
        Authentication](https://docs.github.com/enterprise-server@3.9/rest/overview/other-authentication-methods#basic-authentication))
        to access this endpoint.
      tags:
        - - - - apps
      operationId: apps/remove-repo-from-installation-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/apps/installations#remove-a-repository-from-an-app-installation
      parameters:
        - $ref: '#/components/parameters/installation-id'
        - $ref: '#/components/parameters/repository-id'
      responses:
        '204':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: apps
        subcategory: installations
  /user/migrations/{migration_id}/repositories:
    get:
      summary: List repositories for a user migration
      description: Lists all the repositories for this user migration.
      tags:
        - - - - migrations
      operationId: migrations/list-repos-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/migrations/users#list-repositories-for-a-user-migration
      parameters:
        - $ref: '#/components/parameters/migration-id'
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: migrations
        subcategory: users
  /user/repos:
    get:
      summary: List repositories for the authenticated user
      description: >-
        Lists repositories that the authenticated user has explicit permission
        (`:read`, `:write`, or `:admin`) to access.


        The authenticated user has explicit permission to access repositories
        they own, repositories where they are a collaborator, and repositories
        that they can access through an organization membership.
      tags:
        - - - - repos
      operationId: repos/list-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#list-repositories-for-the-authenticated-user
      parameters:
        - name: visibility
          description: Limit results to repositories with the specified visibility.
          in: query
          required: false
          schema:
            type: string
            enum:
              - all
              - public
              - private
            default: all
        - name: affiliation
          description: |-
            Comma-separated list of values. Can include:  
             * `owner`: Repositories that are owned by the authenticated user.  
             * `collaborator`: Repositories that the user has been added to as a collaborator.  
             * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
          in: query
          required: false
          schema:
            type: string
            default: owner,collaborator,organization_member
        - name: type
          description: >-
            Limit results to repositories of the specified type. Will cause a
            `422` error if used in the same request as **visibility** or
            **affiliation**.
          in: query
          required: false
          schema:
            type: string
            enum:
              - all
              - owner
              - public
              - private
              - member
            default: all
        - name: sort
          description: The property to sort the results by.
          in: query
          required: false
          schema:
            type: string
            enum:
              - created
              - updated
              - pushed
              - full_name
            default: full_name
        - name: direction
          description: >-
            The order to sort by. Default: `asc` when using `full_name`,
            otherwise `desc`.
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/since-repo-date'
        - $ref: '#/components/parameters/before-repo-date'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/repository'
              examples:
                default:
                  $ref: '#/components/examples/repository-items-default-response'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: repos
        subcategory: repos
    post:
      summary: Create a repository for the authenticated user
      description: >-
        Creates a new repository for the authenticated user.


        OAuth app tokens and personal access tokens (classic) need the
        `public_repo` or `repo` scope to create a public repository, and `repo`
        scope to create a private repository.
      tags:
        - - - - repos
      operationId: repos/create-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#create-a-repository-for-the-authenticated-user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  description: The name of the repository.
                  type: string
                  example: Team Environment
                description:
                  description: A short description of the repository.
                  type: string
                homepage:
                  description: A URL with more information about the repository.
                  type: string
                private:
                  description: Whether the repository is private.
                  default: false
                  type: boolean
                has_issues:
                  description: Whether issues are enabled.
                  default: true
                  type: boolean
                  example: true
                has_projects:
                  description: Whether projects are enabled.
                  default: true
                  type: boolean
                  example: true
                has_wiki:
                  description: Whether the wiki is enabled.
                  default: true
                  type: boolean
                  example: true
                has_discussions:
                  description: Whether discussions are enabled.
                  default: false
                  type: boolean
                  example: true
                team_id:
                  description: >-
                    The id of the team that will be granted access to this
                    repository. This is only valid when creating a repository in
                    an organization.
                  type: integer
                auto_init:
                  description: Whether the repository is initialized with a minimal README.
                  default: false
                  type: boolean
                gitignore_template:
                  description: The desired language or platform to apply to the .gitignore.
                  example: Haskell
                  type: string
                license_template:
                  description: >-
                    The license keyword of the open source license for this
                    repository.
                  example: mit
                  type: string
                allow_squash_merge:
                  description: Whether to allow squash merges for pull requests.
                  default: true
                  type: boolean
                  example: true
                allow_merge_commit:
                  description: Whether to allow merge commits for pull requests.
                  default: true
                  type: boolean
                  example: true
                allow_rebase_merge:
                  description: Whether to allow rebase merges for pull requests.
                  default: true
                  type: boolean
                  example: true
                allow_auto_merge:
                  description: Whether to allow Auto-merge to be used on pull requests.
                  default: false
                  type: boolean
                  example: false
                delete_branch_on_merge:
                  description: >-
                    Whether to delete head branches when pull requests are
                    merged
                  default: false
                  type: boolean
                  example: false
                squash_merge_commit_title:
                  type: string
                  enum:
                    - PR_TITLE
                    - COMMIT_OR_PR_TITLE
                  description: >-
                    The default value for a squash merge commit title:


                    - `PR_TITLE` - default to the pull request's title.

                    - `COMMIT_OR_PR_TITLE` - default to the commit's title (if
                    only one commit) or the pull request's title (when more than
                    one commit).
                squash_merge_commit_message:
                  type: string
                  enum:
                    - PR_BODY
                    - COMMIT_MESSAGES
                    - BLANK
                  description: >-
                    The default value for a squash merge commit message:


                    - `PR_BODY` - default to the pull request's body.

                    - `COMMIT_MESSAGES` - default to the branch's commit
                    messages.

                    - `BLANK` - default to a blank commit message.
                merge_commit_title:
                  type: string
                  enum:
                    - PR_TITLE
                    - MERGE_MESSAGE
                  description: >-
                    The default value for a merge commit title.


                    - `PR_TITLE` - default to the pull request's title.

                    - `MERGE_MESSAGE` - default to the classic title for a merge
                    message (e.g., Merge pull request #123 from branch-name).
                merge_commit_message:
                  type: string
                  enum:
                    - PR_BODY
                    - PR_TITLE
                    - BLANK
                  description: |-
                    The default value for a merge commit message.

                    - `PR_TITLE` - default to the pull request's title.
                    - `PR_BODY` - default to the pull request's body.
                    - `BLANK` - default to a blank commit message.
                has_downloads:
                  description: Whether downloads are enabled.
                  default: true
                  type: boolean
                  example: true
                is_template:
                  description: >-
                    Whether this repository acts as a template that can be used
                    to generate new repositories.
                  default: false
                  type: boolean
                  example: true
              required:
                - name
              type: object
            examples:
              default:
                value:
                  name: Hello-World
                  description: This is your first repo!
                  homepage: https://github.com
                  private: false
                  is_template: true
      responses:
        '201':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/full-repository'
              examples:
                default:
                  $ref: '#/components/examples/full-repository'
          headers:
            Location:
              example: https://api.github.com/repos/octocat/Hello-World
              schema:
                type: string
        '304':
          $ref: '#/components/responses/not_modified'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/validation_failed'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: repos
        subcategory: repos
  /user/repository_invitations:
    get:
      summary: List repository invitations for the authenticated user
      description: >-
        When authenticating as a user, this endpoint will list all currently
        open repository invitations for that user.
      tags:
        - - - - repos
      operationId: repos/list-invitations-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/collaborators/invitations#list-repository-invitations-for-the-authenticated-user
      parameters:
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/repository-invitation'
              examples:
                default:
                  $ref: '#/components/examples/repository-invitation-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
        '304':
          $ref: '#/components/responses/not_modified'
        '401':
          $ref: '#/components/responses/requires_authentication'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: collaborators
        subcategory: invitations
  /user/repository_invitations/{invitation_id}:
    patch:
      summary: Accept a repository invitation
      description: ''
      tags:
        - - - - repos
      operationId: repos/accept-invitation-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/collaborators/invitations#accept-a-repository-invitation
      parameters:
        - $ref: '#/components/parameters/invitation-id'
      responses:
        '204':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '409':
          $ref: '#/components/responses/conflict'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: collaborators
        subcategory: invitations
    delete:
      summary: Decline a repository invitation
      description: ''
      tags:
        - - - - repos
      operationId: repos/decline-invitation-for-authenticated-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/collaborators/invitations#decline-a-repository-invitation
      parameters:
        - $ref: '#/components/parameters/invitation-id'
      responses:
        '204':
          description: Response
        '304':
          $ref: '#/components/responses/not_modified'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not_found'
        '409':
          $ref: '#/components/responses/conflict'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: false
        category: collaborators
        subcategory: invitations
  /users/{username}/repos:
    get:
      summary: List repositories for a user
      description: Lists public repositories for the specified user.
      tags:
        - - - - repos
      operationId: repos/list-for-user
      externalDocs:
        description: API method documentation
        url: >-
          https://docs.github.com/enterprise-server@3.9/rest/repos/repos#list-repositories-for-a-user
      parameters:
        - $ref: '#/components/parameters/username'
        - name: type
          description: Limit results to repositories of the specified type.
          in: query
          required: false
          schema:
            type: string
            enum:
              - all
              - owner
              - member
            default: owner
        - name: sort
          description: The property to sort the results by.
          in: query
          required: false
          schema:
            type: string
            enum:
              - created
              - updated
              - pushed
              - full_name
            default: full_name
        - name: direction
          description: >-
            The order to sort by. Default: `asc` when using `full_name`,
            otherwise `desc`.
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - $ref: '#/components/parameters/per-page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/minimal-repository'
              examples:
                default:
                  $ref: '#/components/examples/minimal-repository-items'
          headers:
            Link:
              $ref: '#/components/headers/link'
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: repos
        subcategory: repos
x-webhooks:
  branch-protection-rule-created:
    post:
      summary: >-
        This event occurs when there is activity relating to branch protection
        rules. For more information, see "[About protected
        branches](https://docs.github.com/enterprise-server@3.9/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches)."
        For information about the APIs to manage branch protection rules, see
        [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#branchprotectionrule)
        or "[Branch
        protection](https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Administration" repository permission.
      description: A branch protection rule was created.
      operationId: branch-protection-rule/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#branch_protection_rule
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-branch-protection-rule-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: branch_protection_rule
        supported-webhook-types:
          - repository
          - organization
          - app
  branch-protection-rule-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to branch protection
        rules. For more information, see "[About protected
        branches](https://docs.github.com/enterprise-server@3.9/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches)."
        For information about the APIs to manage branch protection rules, see
        [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#branchprotectionrule)
        or "[Branch
        protection](https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Administration" repository permission.
      description: A branch protection rule was deleted.
      operationId: branch-protection-rule/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#branch_protection_rule
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-branch-protection-rule-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: branch_protection_rule
        supported-webhook-types:
          - repository
          - organization
          - app
  branch-protection-rule-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to branch protection
        rules. For more information, see "[About protected
        branches](https://docs.github.com/enterprise-server@3.9/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches)."
        For information about the APIs to manage branch protection rules, see
        [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#branchprotectionrule)
        or "[Branch
        protection](https://docs.github.com/enterprise-server@3.9/rest/branches/branch-protection)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Administration" repository permission.
      description: A branch protection rule was edited.
      operationId: branch-protection-rule/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#branch_protection_rule
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-branch-protection-rule-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: branch_protection_rule
        supported-webhook-types:
          - repository
          - organization
          - app
  cache-sync:
    post:
      summary: >-
        This event occurs when a Git ref has been successfully synced to a cache
        replica. For more information, see "[About repository
        caching](https://docs.github.com/enterprise-server@3.9/admin/enterprise-management/caching-repositories/about-repository-caching)."
      operationId: cache-sync
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#cache_sync
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-cache-sync'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: cache_sync
        supported-webhook-types:
          - repository
          - organization
          - app
  check-run-completed:
    post:
      summary: >-
        This event occurs when there is activity relating to a check run. For
        information about check runs, see "[Getting started with the Checks
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-checks-api)."
        For information about the APIs to manage check runs, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#checkrun)
        or "[Check
        Runs](https://docs.github.com/enterprise-server@3.9/rest/checks/runs)"
        in the REST API documentation.


        For activity relating to check suites, use the `check-suite` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Checks" repository permission. To receive the
        `rerequested` and `requested_action` event types, the app must have at
        least write-level access for the "Checks" permission. GitHub Apps with
        write-level access for the "Checks" permission are automatically
        subscribed to this webhook event.


        Repository and organization webhooks only receive payloads for the
        `created` and `completed` event types in repositories.


        **Note**: The API only looks for pushes in the repository where the
        check run was created. Pushes to a branch in a forked repository are not
        detected and return an empty `pull_requests` array and a `null` value
        for `head_branch`.
      description: A check run was completed, and a conclusion is available.
      operationId: check-run/completed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#check_run
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-check-run-completed'
            examples:
              default:
                $ref: '#/components/examples/check-run-completed'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/webhook-check-run-completed-form-encoded'
            examples:
              default:
                $ref: '#/components/examples/check-run-completed-form-encoded'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: check_run
        supported-webhook-types:
          - repository
          - organization
          - app
  check-run-created:
    post:
      summary: >-
        This event occurs when there is activity relating to a check run. For
        information about check runs, see "[Getting started with the Checks
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-checks-api)."
        For information about the APIs to manage check runs, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#checkrun)
        or "[Check
        Runs](https://docs.github.com/enterprise-server@3.9/rest/checks/runs)"
        in the REST API documentation.


        For activity relating to check suites, use the `check-suite` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Checks" repository permission. To receive the
        `rerequested` and `requested_action` event types, the app must have at
        least write-level access for the "Checks" permission. GitHub Apps with
        write-level access for the "Checks" permission are automatically
        subscribed to this webhook event.


        Repository and organization webhooks only receive payloads for the
        `created` and `completed` event types in repositories.


        **Note**: The API only looks for pushes in the repository where the
        check run was created. Pushes to a branch in a forked repository are not
        detected and return an empty `pull_requests` array and a `null` value
        for `head_branch`.
      description: A new check run was created.
      operationId: check-run/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#check_run
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-check-run-created'
            examples:
              default:
                $ref: '#/components/examples/check-run-created'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/webhook-check-run-created-form-encoded'
            examples:
              default:
                $ref: '#/components/examples/check-run-created-form-encoded'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: check_run
        supported-webhook-types:
          - repository
          - organization
          - app
  check-run-requested-action:
    post:
      summary: >-
        This event occurs when there is activity relating to a check run. For
        information about check runs, see "[Getting started with the Checks
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-checks-api)."
        For information about the APIs to manage check runs, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#checkrun)
        or "[Check
        Runs](https://docs.github.com/enterprise-server@3.9/rest/checks/runs)"
        in the REST API documentation.


        For activity relating to check suites, use the `check-suite` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Checks" repository permission. To receive the
        `rerequested` and `requested_action` event types, the app must have at
        least write-level access for the "Checks" permission. GitHub Apps with
        write-level access for the "Checks" permission are automatically
        subscribed to this webhook event.


        Repository and organization webhooks only receive payloads for the
        `created` and `completed` event types in repositories.


        **Note**: The API only looks for pushes in the repository where the
        check run was created. Pushes to a branch in a forked repository are not
        detected and return an empty `pull_requests` array and a `null` value
        for `head_branch`.
      description: >-
        A check run completed, and someone requested a followup action that your
        app provides. Only the GitHub App someone requests to perform an action
        will receive the `requested_action` payload. For more information, see
        "[Creating CI tests with the Checks
        API](https://docs.github.com/enterprise-server@3.9/developers/apps/guides/creating-ci-tests-with-the-checks-api)."
      operationId: check-run/requested-action
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#check_run
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-check-run-requested-action'
            examples:
              default:
                $ref: '#/components/examples/check-run-requested-action'
          application/x-www-form-urlencoded:
            schema:
              $ref: >-
                #/components/schemas/webhook-check-run-requested-action-form-encoded
            examples:
              default:
                $ref: '#/components/examples/check-run-requested-action-form-encoded'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: check_run
        supported-webhook-types:
          - repository
          - organization
          - app
  check-run-rerequested:
    post:
      summary: >-
        This event occurs when there is activity relating to a check run. For
        information about check runs, see "[Getting started with the Checks
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-checks-api)."
        For information about the APIs to manage check runs, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#checkrun)
        or "[Check
        Runs](https://docs.github.com/enterprise-server@3.9/rest/checks/runs)"
        in the REST API documentation.


        For activity relating to check suites, use the `check-suite` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Checks" repository permission. To receive the
        `rerequested` and `requested_action` event types, the app must have at
        least write-level access for the "Checks" permission. GitHub Apps with
        write-level access for the "Checks" permission are automatically
        subscribed to this webhook event.


        Repository and organization webhooks only receive payloads for the
        `created` and `completed` event types in repositories.


        **Note**: The API only looks for pushes in the repository where the
        check run was created. Pushes to a branch in a forked repository are not
        detected and return an empty `pull_requests` array and a `null` value
        for `head_branch`.
      description: >-
        Someone requested to re-run a check run. Only the GitHub App that
        someone requests to re-run the check will receive the `rerequested`
        payload.
      operationId: check-run/rerequested
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#check_run
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-check-run-rerequested'
            examples:
              default:
                $ref: '#/components/examples/check-run-rerequested'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/webhook-check-run-rerequested-form-encoded'
            examples:
              default:
                $ref: '#/components/examples/check-run-rerequested-form-encoded'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: check_run
        supported-webhook-types:
          - repository
          - organization
          - app
  check-suite-completed:
    post:
      summary: >-
        This event occurs when there is activity relating to a check suite. For
        information about check suites, see "[Getting started with the Checks
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-checks-api)."
        For information about the APIs to manage check suites, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#checksuite)
        or "[Check
        Suites](https://docs.github.com/enterprise-server@3.9/rest/checks/suites)"
        in the REST API documentation.


        For activity relating to check runs, use the `check_run` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Checks" permission. To receive the `requested` and
        `rerequested` event types, the app must have at least write-level access
        for the "Checks" permission. GitHub Apps with write-level access for the
        "Checks" permission are automatically subscribed to this webhook event.


        Repository and organization webhooks only receive payloads for the
        `completed` event types in repositories.


        **Note**: The API only looks for pushes in the repository where the
        check suite was created. Pushes to a branch in a forked repository are
        not detected and return an empty `pull_requests` array and a `null`
        value for `head_branch`.
      description: >-
        All check runs in a check suite have completed, and a conclusion is
        available.
      operationId: check-suite/completed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#check_suite
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-check-suite-completed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: check_suite
        supported-webhook-types:
          - repository
          - organization
          - app
  check-suite-requested:
    post:
      summary: >-
        This event occurs when there is activity relating to a check suite. For
        information about check suites, see "[Getting started with the Checks
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-checks-api)."
        For information about the APIs to manage check suites, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#checksuite)
        or "[Check
        Suites](https://docs.github.com/enterprise-server@3.9/rest/checks/suites)"
        in the REST API documentation.


        For activity relating to check runs, use the `check_run` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Checks" permission. To receive the `requested` and
        `rerequested` event types, the app must have at least write-level access
        for the "Checks" permission. GitHub Apps with write-level access for the
        "Checks" permission are automatically subscribed to this webhook event.


        Repository and organization webhooks only receive payloads for the
        `completed` event types in repositories.


        **Note**: The API only looks for pushes in the repository where the
        check suite was created. Pushes to a branch in a forked repository are
        not detected and return an empty `pull_requests` array and a `null`
        value for `head_branch`.
      description: >-
        Someone requested to run a check suite. By default, check suites are
        automatically created when you create a check run. For more information,
        see [the GraphQL API documentation for creating a check
        run](https://docs.github.com/enterprise-server@3.9/graphql/reference/mutations#createcheckrun)
        or "[Create a check
        run](https://docs.github.com/enterprise-server@3.9/rest/checks/runs#create-a-check-run)"
        in the REST API documentation.
      operationId: check-suite/requested
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#check_suite
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-check-suite-requested'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: check_suite
        supported-webhook-types:
          - repository
          - organization
          - app
  check-suite-rerequested:
    post:
      summary: >-
        This event occurs when there is activity relating to a check suite. For
        information about check suites, see "[Getting started with the Checks
        API](https://docs.github.com/enterprise-server@3.9/rest/guides/getting-started-with-the-checks-api)."
        For information about the APIs to manage check suites, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#checksuite)
        or "[Check
        Suites](https://docs.github.com/enterprise-server@3.9/rest/checks/suites)"
        in the REST API documentation.


        For activity relating to check runs, use the `check_run` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Checks" permission. To receive the `requested` and
        `rerequested` event types, the app must have at least write-level access
        for the "Checks" permission. GitHub Apps with write-level access for the
        "Checks" permission are automatically subscribed to this webhook event.


        Repository and organization webhooks only receive payloads for the
        `completed` event types in repositories.


        **Note**: The API only looks for pushes in the repository where the
        check suite was created. Pushes to a branch in a forked repository are
        not detected and return an empty `pull_requests` array and a `null`
        value for `head_branch`.
      description: >-
        Someone requested to re-run the check runs in a check suite. For more
        information, see [the GraphQL API documentation for creating a check
        suite](https://docs.github.com/enterprise-server@3.9/graphql/reference/mutations#createchecksuite)
        or "[Create a check
        suite](https://docs.github.com/enterprise-server@3.9/rest/checks/suites#create-a-check-suite)"
        in the REST API documentation.
      operationId: check-suite/rerequested
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#check_suite
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-check-suite-rerequested'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: check_suite
        supported-webhook-types:
          - repository
          - organization
          - app
  code-scanning-alert-appeared-in-branch:
    post:
      summary: >-
        This event occurs when there is activity relating to code scanning
        alerts in a repository. For more information, see "[About code
        scanning](https://docs.github.com/enterprise-server@3.9/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)"
        and "[About code scanning
        alerts](https://docs.github.com/enterprise-server@3.9/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)."
        For information about the API to manage code scanning, see "[Code
        scanning](https://docs.github.com/enterprise-server@3.9/rest/code-scanning)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Code scanning alerts" repository permission.
      description: >-
        A previously created code scanning alert appeared in another branch.
        This can happen when a branch is merged into or created from a branch
        with a pre-existing code scanning alert.
      operationId: code-scanning-alert/appeared-in-branch
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#code_scanning_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/webhook-code-scanning-alert-appeared-in-branch
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: code_scanning_alert
        supported-webhook-types:
          - repository
          - organization
          - app
  code-scanning-alert-closed-by-user:
    post:
      summary: >-
        This event occurs when there is activity relating to code scanning
        alerts in a repository. For more information, see "[About code
        scanning](https://docs.github.com/enterprise-server@3.9/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)"
        and "[About code scanning
        alerts](https://docs.github.com/enterprise-server@3.9/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)."
        For information about the API to manage code scanning, see "[Code
        scanning](https://docs.github.com/enterprise-server@3.9/rest/code-scanning)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Code scanning alerts" repository permission.
      description: Someone closed a code scanning alert.
      operationId: code-scanning-alert/closed-by-user
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#code_scanning_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-code-scanning-alert-closed-by-user'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: code_scanning_alert
        supported-webhook-types:
          - repository
          - organization
          - app
  code-scanning-alert-created:
    post:
      summary: >-
        This event occurs when there is activity relating to code scanning
        alerts in a repository. For more information, see "[About code
        scanning](https://docs.github.com/enterprise-server@3.9/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)"
        and "[About code scanning
        alerts](https://docs.github.com/enterprise-server@3.9/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)."
        For information about the API to manage code scanning, see "[Code
        scanning](https://docs.github.com/enterprise-server@3.9/rest/code-scanning)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Code scanning alerts" repository permission.
      description: A code scanning alert was created in a repository.
      operationId: code-scanning-alert/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#code_scanning_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-code-scanning-alert-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: code_scanning_alert
        supported-webhook-types:
          - repository
          - organization
          - app
  code-scanning-alert-fixed:
    post:
      summary: >-
        This event occurs when there is activity relating to code scanning
        alerts in a repository. For more information, see "[About code
        scanning](https://docs.github.com/enterprise-server@3.9/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)"
        and "[About code scanning
        alerts](https://docs.github.com/enterprise-server@3.9/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)."
        For information about the API to manage code scanning, see "[Code
        scanning](https://docs.github.com/enterprise-server@3.9/rest/code-scanning)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Code scanning alerts" repository permission.
      description: A code scanning alert was fixed in a branch by a commit.
      operationId: code-scanning-alert/fixed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#code_scanning_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-code-scanning-alert-fixed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: code_scanning_alert
        supported-webhook-types:
          - repository
          - organization
          - app
  code-scanning-alert-reopened:
    post:
      summary: >-
        This event occurs when there is activity relating to code scanning
        alerts in a repository. For more information, see "[About code
        scanning](https://docs.github.com/enterprise-server@3.9/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)"
        and "[About code scanning
        alerts](https://docs.github.com/enterprise-server@3.9/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)."
        For information about the API to manage code scanning, see "[Code
        scanning](https://docs.github.com/enterprise-server@3.9/rest/code-scanning)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Code scanning alerts" repository permission.
      description: A previously fixed code scanning alert reappeared in a branch.
      operationId: code-scanning-alert/reopened
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#code_scanning_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-code-scanning-alert-reopened'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: code_scanning_alert
        supported-webhook-types:
          - repository
          - organization
          - app
  code-scanning-alert-reopened-by-user:
    post:
      summary: >-
        This event occurs when there is activity relating to code scanning
        alerts in a repository. For more information, see "[About code
        scanning](https://docs.github.com/enterprise-server@3.9/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)"
        and "[About code scanning
        alerts](https://docs.github.com/enterprise-server@3.9/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts)."
        For information about the API to manage code scanning, see "[Code
        scanning](https://docs.github.com/enterprise-server@3.9/rest/code-scanning)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Code scanning alerts" repository permission.
      description: Someone reopened a code scanning alert.
      operationId: code-scanning-alert/reopened-by-user
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#code_scanning_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/webhook-code-scanning-alert-reopened-by-user
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: code_scanning_alert
        supported-webhook-types:
          - repository
          - organization
          - app
  commit-comment-created:
    post:
      summary: >-
        This event occurs when there is activity relating to commit comments.
        For more information about commit comments, see "[Commenting on a pull
        request](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request)."
        For information about the APIs to manage commit comments, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#commitcomment)
        or "[Commit
        comments](https://docs.github.com/enterprise-server@3.9/rest/commits/comments)"
        in the REST API documentation.


        For activity relating to comments on pull request reviews, use the
        `pull_request_review_comment` event. For activity relating to issue
        comments, use the `issue_comment` event. For activity relating to
        discussion comments, use the `discussion_comment` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Contents" repository permission.
      description: Someone commented on a commit.
      operationId: commit-comment/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#commit_comment
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-commit-comment-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: commit_comment
        supported-webhook-types:
          - repository
          - organization
          - app
  create:
    post:
      summary: >-
        This event occurs when a Git branch or tag is created.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Contents" repository permission.


        **Notes**:

        - This event will not occur when more than three tags are created at
        once.

        - Payloads are capped at 25 MB. If an event generates a larger payload,
        GitHub will not deliver a payload for that webhook event. This may
        happen, for example, if many branches or tags are pushed at once. We
        suggest monitoring your payload size to ensure delivery.
      operationId: create
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#create
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-create'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: create
        supported-webhook-types:
          - repository
          - organization
          - app
  delete:
    post:
      summary: >-
        This event occurs when a Git branch or tag is deleted. To subscribe to
        all pushes to a repository, including

        branch and tag deletions, use the [`push`](#push) webhook event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Contents" repository permission.


        **Note**: This event will not occur when more than three tags are
        deleted at once.
      operationId: delete
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#delete
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-delete'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: delete
        supported-webhook-types:
          - repository
          - organization
          - app
  dependabot-alert-created:
    post:
      summary: >-
        This event occurs when there is activity relating to Dependabot alerts.


        For more information about Dependabot alerts, see "[About Dependabot
        alerts](https://docs.github.com/enterprise-server@3.9/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)."
        For information about the API to manage Dependabot alerts, see
        "[Dependabot
        alerts](https://docs.github.com/enterprise-server@3.9/rest/dependabot/alerts)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Dependabot alerts" repository permission.


        **Note**: Webhook events for Dependabot alerts are currently in beta and
        subject to change.
      description: >-
        A manifest file change introduced a vulnerable dependency, or a GitHub
        Security Advisory was published and an existing dependency was found to
        be vulnerable.
      operationId: dependabot-alert/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#dependabot_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-dependabot-alert-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: dependabot_alert
        supported-webhook-types:
          - repository
          - organization
          - app
  dependabot-alert-dismissed:
    post:
      summary: >-
        This event occurs when there is activity relating to Dependabot alerts.


        For more information about Dependabot alerts, see "[About Dependabot
        alerts](https://docs.github.com/enterprise-server@3.9/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)."
        For information about the API to manage Dependabot alerts, see
        "[Dependabot
        alerts](https://docs.github.com/enterprise-server@3.9/rest/dependabot/alerts)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Dependabot alerts" repository permission.


        **Note**: Webhook events for Dependabot alerts are currently in beta and
        subject to change.
      description: A Dependabot alert was manually closed.
      operationId: dependabot-alert/dismissed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#dependabot_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-dependabot-alert-dismissed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: dependabot_alert
        supported-webhook-types:
          - repository
          - organization
          - app
  dependabot-alert-fixed:
    post:
      summary: >-
        This event occurs when there is activity relating to Dependabot alerts.


        For more information about Dependabot alerts, see "[About Dependabot
        alerts](https://docs.github.com/enterprise-server@3.9/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)."
        For information about the API to manage Dependabot alerts, see
        "[Dependabot
        alerts](https://docs.github.com/enterprise-server@3.9/rest/dependabot/alerts)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Dependabot alerts" repository permission.


        **Note**: Webhook events for Dependabot alerts are currently in beta and
        subject to change.
      description: A manifest file change removed a vulnerability.
      operationId: dependabot-alert/fixed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#dependabot_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-dependabot-alert-fixed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: dependabot_alert
        supported-webhook-types:
          - repository
          - organization
          - app
  dependabot-alert-reintroduced:
    post:
      summary: >-
        This event occurs when there is activity relating to Dependabot alerts.


        For more information about Dependabot alerts, see "[About Dependabot
        alerts](https://docs.github.com/enterprise-server@3.9/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)."
        For information about the API to manage Dependabot alerts, see
        "[Dependabot
        alerts](https://docs.github.com/enterprise-server@3.9/rest/dependabot/alerts)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Dependabot alerts" repository permission.


        **Note**: Webhook events for Dependabot alerts are currently in beta and
        subject to change.
      description: >-
        A manifest file change introduced a vulnerable dependency that had
        previously been fixed.
      operationId: dependabot-alert/reintroduced
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#dependabot_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-dependabot-alert-reintroduced'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: dependabot_alert
        supported-webhook-types:
          - repository
          - organization
          - app
  dependabot-alert-reopened:
    post:
      summary: >-
        This event occurs when there is activity relating to Dependabot alerts.


        For more information about Dependabot alerts, see "[About Dependabot
        alerts](https://docs.github.com/enterprise-server@3.9/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)."
        For information about the API to manage Dependabot alerts, see
        "[Dependabot
        alerts](https://docs.github.com/enterprise-server@3.9/rest/dependabot/alerts)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Dependabot alerts" repository permission.


        **Note**: Webhook events for Dependabot alerts are currently in beta and
        subject to change.
      description: A Dependabot alert was manually reopened.
      operationId: dependabot-alert/reopened
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#dependabot_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-dependabot-alert-reopened'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: dependabot_alert
        supported-webhook-types:
          - repository
          - organization
          - app
  deploy-key-created:
    post:
      summary: >-
        This event occurs when there is activity relating to deploy keys. For
        more information, see "[Managing deploy
        keys](https://docs.github.com/enterprise-server@3.9/developers/overview/managing-deploy-keys)."
        For information about the APIs to manage deploy keys, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#deploykey)
        or "[Deploy
        keys](https://docs.github.com/enterprise-server@3.9/rest/deploy-keys)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Deployments" repository permission.
      description: A deploy key was created.
      operationId: deploy-key/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#deploy_key
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-deploy-key-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: deploy_key
        supported-webhook-types:
          - repository
          - organization
          - app
  deploy-key-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to deploy keys. For
        more information, see "[Managing deploy
        keys](https://docs.github.com/enterprise-server@3.9/developers/overview/managing-deploy-keys)."
        For information about the APIs to manage deploy keys, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#deploykey)
        or "[Deploy
        keys](https://docs.github.com/enterprise-server@3.9/rest/deploy-keys)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Deployments" repository permission.
      description: A deploy key was deleted.
      operationId: deploy-key/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#deploy_key
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-deploy-key-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: deploy_key
        supported-webhook-types:
          - repository
          - organization
          - app
  deployment-created:
    post:
      summary: >-
        This event occurs when there is activity relating to deployments. For
        more information, see "[About
        deployments](https://docs.github.com/enterprise-server@3.9/actions/deployment/about-deployments)."
        For information about the APIs to manage deployments, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#deployment)
        or
        "[Deployments](https://docs.github.com/enterprise-server@3.9/rest/deployments/deployments)"
        in the REST API documentation.


        For activity relating to deployment status, use the `deployment_status`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Deployments" repository permission.
      description: A deployment was created.
      operationId: deployment/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#deployment
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-deployment-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: deployment
        supported-webhook-types:
          - repository
          - organization
          - app
  deployment-review-approved:
    post:
      summary: >-
        This event occurs when there is activity relating to deployment reviews.
        For more information, see "[About
        deployments](https://docs.github.com/enterprise-server@3.9/actions/deployment/about-deployments)."
        For information about the APIs to manage deployments, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#deployment)
        or
        "[Deployments](https://docs.github.com/enterprise-server@3.9/rest/deployments/deployments)"
        in the REST API documentation.


        For activity relating to deployment creation or deployment status, use
        the `deployment` or `deployment_status` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Deployments" repository permission.
      description: A deployment review was approved.
      operationId: deployment-review/approved
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#deployment_review
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-deployment-review-approved'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: deployment_review
        supported-webhook-types:
          - app
  deployment-review-rejected:
    post:
      summary: >-
        This event occurs when there is activity relating to deployment reviews.
        For more information, see "[About
        deployments](https://docs.github.com/enterprise-server@3.9/actions/deployment/about-deployments)."
        For information about the APIs to manage deployments, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#deployment)
        or
        "[Deployments](https://docs.github.com/enterprise-server@3.9/rest/deployments/deployments)"
        in the REST API documentation.


        For activity relating to deployment creation or deployment status, use
        the `deployment` or `deployment_status` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Deployments" repository permission.
      description: A deployment review was rejected.
      operationId: deployment-review/rejected
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#deployment_review
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-deployment-review-rejected'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: deployment_review
        supported-webhook-types:
          - app
  deployment-review-requested:
    post:
      summary: >-
        This event occurs when there is activity relating to deployment reviews.
        For more information, see "[About
        deployments](https://docs.github.com/enterprise-server@3.9/actions/deployment/about-deployments)."
        For information about the APIs to manage deployments, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#deployment)
        or
        "[Deployments](https://docs.github.com/enterprise-server@3.9/rest/deployments/deployments)"
        in the REST API documentation.


        For activity relating to deployment creation or deployment status, use
        the `deployment` or `deployment_status` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Deployments" repository permission.
      description: A deployment review was requested.
      operationId: deployment-review/requested
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#deployment_review
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-deployment-review-requested'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: deployment_review
        supported-webhook-types:
          - app
  deployment-status-created:
    post:
      summary: >-
        This event occurs when there is activity relating to deployment
        statuses. For more information, see "[About
        deployments](https://docs.github.com/enterprise-server@3.9/actions/deployment/about-deployments)."
        For information about the APIs to manage deployments, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#deployment)
        or
        "[Deployments](https://docs.github.com/enterprise-server@3.9/rest/deployments/deployments)"
        in the REST API documentation.


        For activity relating to deployment creation, use the `deployment`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Deployments" repository permission.
      description: A new deployment status was created.
      operationId: deployment-status/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#deployment_status
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-deployment-status-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: deployment_status
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-answered:
    post:
      summary: >-
        This event occurs when there is activity relating to a discussion. For
        more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a comment on a discussion, use the
        `discussion_comment` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: A comment on the discussion was marked as the answer.
      operationId: discussion/answered
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-answered'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-category-changed:
    post:
      summary: >-
        This event occurs when there is activity relating to a discussion. For
        more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a comment on a discussion, use the
        `discussion_comment` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: The category of a discussion was changed.
      operationId: discussion/category-changed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-category-changed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-closed:
    post:
      summary: >-
        This event occurs when there is activity relating to a discussion. For
        more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a comment on a discussion, use the
        `discussion_comment` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: A discussion was closed.
      operationId: discussion/closed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: discussions
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.9.0
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-closed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-comment-created:
    post:
      summary: >-
        This event occurs when there is activity relating to a comment on a
        discussion. For more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a discussion as opposed to comments on a
        discussion, use the `discussion` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: A comment on a discussion was created.
      operationId: discussion-comment/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion_comment
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-comment-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion_comment
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-comment-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to a comment on a
        discussion. For more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a discussion as opposed to comments on a
        discussion, use the `discussion` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: A comment on a discussion was deleted.
      operationId: discussion-comment/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion_comment
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-comment-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion_comment
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-comment-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to a comment on a
        discussion. For more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a discussion as opposed to comments on a
        discussion, use the `discussion` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: A comment on a discussion was edited.
      operationId: discussion-comment/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion_comment
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-comment-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion_comment
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-created:
    post:
      summary: >-
        This event occurs when there is activity relating to a discussion. For
        more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a comment on a discussion, use the
        `discussion_comment` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: A discussion was created.
      operationId: discussion/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to a discussion. For
        more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a comment on a discussion, use the
        `discussion_comment` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: A discussion was deleted.
      operationId: discussion/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to a discussion. For
        more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a comment on a discussion, use the
        `discussion_comment` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: >-
        The title or body on a discussion was edited, or the category of the
        discussion was changed.
      operationId: discussion/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-labeled:
    post:
      summary: >-
        This event occurs when there is activity relating to a discussion. For
        more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a comment on a discussion, use the
        `discussion_comment` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: A label was added to a discussion.
      operationId: discussion/labeled
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-labeled'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-locked:
    post:
      summary: >-
        This event occurs when there is activity relating to a discussion. For
        more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a comment on a discussion, use the
        `discussion_comment` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: A discussion was locked.
      operationId: discussion/locked
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-locked'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-pinned:
    post:
      summary: >-
        This event occurs when there is activity relating to a discussion. For
        more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a comment on a discussion, use the
        `discussion_comment` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: A discussion was pinned.
      operationId: discussion/pinned
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-pinned'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-reopened:
    post:
      summary: >-
        This event occurs when there is activity relating to a discussion. For
        more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a comment on a discussion, use the
        `discussion_comment` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: A discussion was reopened.
      operationId: discussion/reopened
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: discussions
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.9.0
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-reopened'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-transferred:
    post:
      summary: >-
        This event occurs when there is activity relating to a discussion. For
        more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a comment on a discussion, use the
        `discussion_comment` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: A discussion was transferred to another repository.
      operationId: discussion/transferred
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-transferred'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-unanswered:
    post:
      summary: >-
        This event occurs when there is activity relating to a discussion. For
        more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a comment on a discussion, use the
        `discussion_comment` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: A comment on the discussion was unmarked as the answer.
      operationId: discussion/unanswered
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-unanswered'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-unlabeled:
    post:
      summary: >-
        This event occurs when there is activity relating to a discussion. For
        more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a comment on a discussion, use the
        `discussion_comment` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: A label was removed from a discussion.
      operationId: discussion/unlabeled
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-unlabeled'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-unlocked:
    post:
      summary: >-
        This event occurs when there is activity relating to a discussion. For
        more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a comment on a discussion, use the
        `discussion_comment` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: A discussion was unlocked.
      operationId: discussion/unlocked
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-unlocked'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion
        supported-webhook-types:
          - repository
          - organization
          - app
  discussion-unpinned:
    post:
      summary: >-
        This event occurs when there is activity relating to a discussion. For
        more information about discussions, see "[GitHub
        Discussions](https://docs.github.com/enterprise-server@3.9/discussions)."
        For information about the API to manage discussions, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#discussion).


        For activity relating to a comment on a discussion, use the
        `discussion_comment` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Discussions" repository permission.


        **Note**: Webhook events for GitHub Discussions are currently in beta
        and subject to change.
      description: A discussion was unpinned.
      operationId: discussion/unpinned
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#discussion
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-discussion-unpinned'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: discussion
        supported-webhook-types:
          - repository
          - organization
          - app
  enterprise-anonymous-access-disabled:
    post:
      summary: >-
        This event occurs when there is activity relating to anonymous Git read
        access in an enterprise. For more information, see "[Enforcing
        repository management policies in your
        enterprise](https://docs.github.com/enterprise-server@3.9/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#configuring-anonymous-git-read-access)."
      description: Anonymous Git read access was disabled.
      operationId: enterprise/anonymous-access-disabled
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#enterprise
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/webhook-enterprise-anonymous-access-disabled
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: enterprise
        supported-webhook-types:
          - business
  enterprise-anonymous-access-enabled:
    post:
      summary: >-
        This event occurs when there is activity relating to anonymous Git read
        access in an enterprise. For more information, see "[Enforcing
        repository management policies in your
        enterprise](https://docs.github.com/enterprise-server@3.9/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#configuring-anonymous-git-read-access)."
      description: Anonymous Git read access was enabled.
      operationId: enterprise/anonymous-access-enabled
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#enterprise
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-enterprise-anonymous-access-enabled'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: enterprise
        supported-webhook-types:
          - business
  fork:
    post:
      summary: >-
        This event occurs when someone forks a repository. For more information,
        see "[Fork a
        repo](https://docs.github.com/enterprise-server@3.9/get-started/quickstart/fork-a-repo)."
        For information about the API to manage forks, see
        "[Forks](https://docs.github.com/enterprise-server@3.9/rest/repos/forks)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Contents" repository permission.
      operationId: fork
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#fork
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-fork'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: fork
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  github-app-authorization-revoked:
    post:
      summary: >-
        This event occurs when a user revokes their authorization of a GitHub
        App. For more information, see "[About
        apps](https://docs.github.com/enterprise-server@3.9/developers/apps/getting-started-with-apps/about-apps#about-github-apps)."
        For information about the API to manage GitHub Apps, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#app)
        or "[Apps](https://docs.github.com/enterprise-server@3.9/rest/apps)" in
        the REST API documentation.


        A GitHub App receives this webhook by default and cannot unsubscribe
        from this event.


        Anyone can revoke their authorization of a GitHub App from their [GitHub
        account settings page](https://github.com/settings/apps/authorizations).
        Revoking the authorization of a GitHub App does not uninstall the GitHub
        App. You should program your GitHub App so that when it receives this
        webhook, it stops calling the API on behalf of the person who revoked
        the token. If your GitHub App continues to use a revoked access token,
        it will receive the `401 Bad Credentials` error. For details about
        requests with a user access token, which require GitHub App
        authorization, see "[Authenticating with a GitHub App on behalf of a
        user](https://docs.github.com/enterprise-server@3.9/apps/creating-github-apps/authenticating-with-a-github-app/authenticating-with-a-github-app-on-behalf-of-a-user)."
      description: Someone revoked their authorization of a GitHub App.
      operationId: github-app-authorization/revoked
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#github_app_authorization
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-github-app-authorization-revoked'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: github_app_authorization
        supported-webhook-types:
          - app
  gollum:
    post:
      summary: >-
        This event occurs when someone creates or updates a wiki page. For more
        information, see "[About
        wikis](https://docs.github.com/enterprise-server@3.9/communities/documenting-your-project-with-wikis/about-wikis)."


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Contents" repository permission.
      operationId: gollum
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#gollum
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-gollum'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: gollum
        supported-webhook-types:
          - repository
          - organization
          - app
  installation-created:
    post:
      summary: >-
        This event occurs when there is activity relating to a GitHub App
        installation. All GitHub Apps receive this event by default. You cannot
        manually subscribe to this event.


        For more information about GitHub Apps, see "[About
        apps](https://docs.github.com/enterprise-server@3.9/developers/apps/getting-started-with-apps/about-apps#about-github-apps)."
        For information about the APIs to manage GitHub Apps, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#app)
        or "[Apps](https://docs.github.com/enterprise-server@3.9/rest/apps)" in
        the REST API documentation.
      description: Someone installed a GitHub App on a user or organization account.
      operationId: installation/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#installation
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-installation-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: installation
        supported-webhook-types:
          - app
  installation-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to a GitHub App
        installation. All GitHub Apps receive this event by default. You cannot
        manually subscribe to this event.


        For more information about GitHub Apps, see "[About
        apps](https://docs.github.com/enterprise-server@3.9/developers/apps/getting-started-with-apps/about-apps#about-github-apps)."
        For information about the APIs to manage GitHub Apps, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#app)
        or "[Apps](https://docs.github.com/enterprise-server@3.9/rest/apps)" in
        the REST API documentation.
      description: >-
        Someone uninstalled a GitHub App from their user or organization
        account.
      operationId: installation/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#installation
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-installation-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: installation
        supported-webhook-types:
          - app
  installation-new-permissions-accepted:
    post:
      summary: >-
        This event occurs when there is activity relating to a GitHub App
        installation. All GitHub Apps receive this event by default. You cannot
        manually subscribe to this event.


        For more information about GitHub Apps, see "[About
        apps](https://docs.github.com/enterprise-server@3.9/developers/apps/getting-started-with-apps/about-apps#about-github-apps)."
        For information about the APIs to manage GitHub Apps, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#app)
        or "[Apps](https://docs.github.com/enterprise-server@3.9/rest/apps)" in
        the REST API documentation.
      description: Someone granted new permissions to a GitHub App.
      operationId: installation/new-permissions-accepted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#installation
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/webhook-installation-new-permissions-accepted
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: installation
        supported-webhook-types:
          - app
  installation-repositories-added:
    post:
      summary: >-
        This event occurs when there is activity relating to which repositories
        a GitHub App installation can access. All GitHub Apps receive this event
        by default. You cannot manually subscribe to this event.


        For more information about GitHub Apps, see "[About
        apps](https://docs.github.com/enterprise-server@3.9/developers/apps/getting-started-with-apps/about-apps#about-github-apps)."
        For information about the APIs to manage GitHub Apps, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#app)
        or "[Apps](https://docs.github.com/enterprise-server@3.9/rest/apps)" in
        the REST API documentation.
      description: >-
        A GitHub App installation was granted access to one or more
        repositories.
      operationId: installation-repositories/added
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#installation_repositories
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-installation-repositories-added'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: installation_repositories
        supported-webhook-types:
          - app
  installation-repositories-removed:
    post:
      summary: >-
        This event occurs when there is activity relating to which repositories
        a GitHub App installation can access. All GitHub Apps receive this event
        by default. You cannot manually subscribe to this event.


        For more information about GitHub Apps, see "[About
        apps](https://docs.github.com/enterprise-server@3.9/developers/apps/getting-started-with-apps/about-apps#about-github-apps)."
        For information about the APIs to manage GitHub Apps, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#app)
        or "[Apps](https://docs.github.com/enterprise-server@3.9/rest/apps)" in
        the REST API documentation.
      description: >-
        Access to one or more repositories was revoked for a GitHub App
        installation.
      operationId: installation-repositories/removed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#installation_repositories
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-installation-repositories-removed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: installation_repositories
        supported-webhook-types:
          - app
  installation-suspend:
    post:
      summary: >-
        This event occurs when there is activity relating to a GitHub App
        installation. All GitHub Apps receive this event by default. You cannot
        manually subscribe to this event.


        For more information about GitHub Apps, see "[About
        apps](https://docs.github.com/enterprise-server@3.9/developers/apps/getting-started-with-apps/about-apps#about-github-apps)."
        For information about the APIs to manage GitHub Apps, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#app)
        or "[Apps](https://docs.github.com/enterprise-server@3.9/rest/apps)" in
        the REST API documentation.
      description: >-
        Someone blocked access by a GitHub App to their user or organization
        account.
      operationId: installation/suspend
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#installation
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-installation-suspend'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: installation
        supported-webhook-types:
          - app
  installation-target-renamed:
    post:
      summary: >-
        This event occurs when there is activity relating to the user or
        organization account that a GitHub App is installed on. For more
        information, see "[About
        apps](https://docs.github.com/enterprise-server@3.9/developers/apps/getting-started-with-apps/about-apps#about-github-apps)."
        For information about the APIs to manage GitHub Apps, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#app)
        or "[Apps](https://docs.github.com/enterprise-server@3.9/rest/apps)" in
        the REST API documentation.
      description: >-
        Somebody renamed the user or organization account that a GitHub App is
        installed on.
      operationId: installation-target/renamed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#installation_target
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-installation-target-renamed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: installation_target
        supported-webhook-types:
          - app
  installation-unsuspend:
    post:
      summary: >-
        This event occurs when there is activity relating to a GitHub App
        installation. All GitHub Apps receive this event by default. You cannot
        manually subscribe to this event.


        For more information about GitHub Apps, see "[About
        apps](https://docs.github.com/enterprise-server@3.9/developers/apps/getting-started-with-apps/about-apps#about-github-apps)."
        For information about the APIs to manage GitHub Apps, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#app)
        or "[Apps](https://docs.github.com/enterprise-server@3.9/rest/apps)" in
        the REST API documentation.
      description: >-
        A GitHub App that was blocked from accessing a user or organization
        account was given access the account again.
      operationId: installation/unsuspend
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#installation
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-installation-unsuspend'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: installation
        supported-webhook-types:
          - app
  issue-comment-created:
    post:
      summary: >-
        This event occurs when there is activity relating to a comment on an
        issue or pull request. For more information about issues and pull
        requests, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)"
        and "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage issue comments, see [the
        GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issuecomment)
        or "[Issue
        comments](https://docs.github.com/enterprise-server@3.9/rest/issues/comments)"
        in the REST API documentation.


        For activity relating to an issue as opposed to comments on an issue,
        use the `issue` event. For activity related to pull request reviews or
        pull request review comments, use the `pull_request_review` or
        `pull_request_review_comment` events. For more information about the
        different types of pull request comments, see "[Working with
        comments](https://docs.github.com/enterprise-server@3.9/rest/guides/working-with-comments)."


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: A comment on an issue or pull request was created.
      operationId: issue-comment/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issue_comment
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issue-comment-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issue_comment
        supported-webhook-types:
          - repository
          - organization
          - app
  issue-comment-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to a comment on an
        issue or pull request. For more information about issues and pull
        requests, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)"
        and "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage issue comments, see [the
        GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issuecomment)
        or "[Issue
        comments](https://docs.github.com/enterprise-server@3.9/rest/issues/comments)"
        in the REST API documentation.


        For activity relating to an issue as opposed to comments on an issue,
        use the `issue` event. For activity related to pull request reviews or
        pull request review comments, use the `pull_request_review` or
        `pull_request_review_comment` events. For more information about the
        different types of pull request comments, see "[Working with
        comments](https://docs.github.com/enterprise-server@3.9/rest/guides/working-with-comments)."


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: A comment on an issue or pull request was deleted.
      operationId: issue-comment/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issue_comment
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issue-comment-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issue_comment
        supported-webhook-types:
          - repository
          - organization
          - app
  issue-comment-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to a comment on an
        issue or pull request. For more information about issues and pull
        requests, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)"
        and "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage issue comments, see [the
        GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issuecomment)
        or "[Issue
        comments](https://docs.github.com/enterprise-server@3.9/rest/issues/comments)"
        in the REST API documentation.


        For activity relating to an issue as opposed to comments on an issue,
        use the `issue` event. For activity related to pull request reviews or
        pull request review comments, use the `pull_request_review` or
        `pull_request_review_comment` events. For more information about the
        different types of pull request comments, see "[Working with
        comments](https://docs.github.com/enterprise-server@3.9/rest/guides/working-with-comments)."


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: A comment on an issue or pull request was edited.
      operationId: issue-comment/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issue_comment
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issue-comment-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issue_comment
        supported-webhook-types:
          - repository
          - organization
          - app
  issues-assigned:
    post:
      summary: >-
        This event occurs when there is activity relating to an issue. For more
        information about issues, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)."
        For information about the APIs to manage issues, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issue)
        or "[Issues](https://docs.github.com/enterprise-server@3.9/rest/issues)"
        in the REST API documentation.


        For activity relating to a comment on an issue, use the `issue_comment`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: An issue was assigned to a user.
      operationId: issues/assigned
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issues
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issues-assigned'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issues
        supported-webhook-types:
          - repository
          - organization
          - app
  issues-closed:
    post:
      summary: >-
        This event occurs when there is activity relating to an issue. For more
        information about issues, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)."
        For information about the APIs to manage issues, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issue)
        or "[Issues](https://docs.github.com/enterprise-server@3.9/rest/issues)"
        in the REST API documentation.


        For activity relating to a comment on an issue, use the `issue_comment`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: An issue was closed.
      operationId: issues/closed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issues
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issues-closed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issues
        supported-webhook-types:
          - repository
          - organization
          - app
  issues-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to an issue. For more
        information about issues, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)."
        For information about the APIs to manage issues, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issue)
        or "[Issues](https://docs.github.com/enterprise-server@3.9/rest/issues)"
        in the REST API documentation.


        For activity relating to a comment on an issue, use the `issue_comment`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: An issue was deleted.
      operationId: issues/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issues
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issues-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issues
        supported-webhook-types:
          - repository
          - organization
          - app
  issues-demilestoned:
    post:
      summary: >-
        This event occurs when there is activity relating to an issue. For more
        information about issues, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)."
        For information about the APIs to manage issues, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issue)
        or "[Issues](https://docs.github.com/enterprise-server@3.9/rest/issues)"
        in the REST API documentation.


        For activity relating to a comment on an issue, use the `issue_comment`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: An issue was removed from a milestone.
      operationId: issues/demilestoned
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issues
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issues-demilestoned'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issues
        supported-webhook-types:
          - repository
          - organization
          - app
  issues-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to an issue. For more
        information about issues, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)."
        For information about the APIs to manage issues, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issue)
        or "[Issues](https://docs.github.com/enterprise-server@3.9/rest/issues)"
        in the REST API documentation.


        For activity relating to a comment on an issue, use the `issue_comment`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: The title or body on an issue was edited.
      operationId: issues/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issues
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issues-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issues
        supported-webhook-types:
          - repository
          - organization
          - app
  issues-labeled:
    post:
      summary: >-
        This event occurs when there is activity relating to an issue. For more
        information about issues, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)."
        For information about the APIs to manage issues, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issue)
        or "[Issues](https://docs.github.com/enterprise-server@3.9/rest/issues)"
        in the REST API documentation.


        For activity relating to a comment on an issue, use the `issue_comment`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: A label was added to an issue.
      operationId: issues/labeled
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issues
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issues-labeled'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issues
        supported-webhook-types:
          - repository
          - organization
          - app
  issues-locked:
    post:
      summary: >-
        This event occurs when there is activity relating to an issue. For more
        information about issues, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)."
        For information about the APIs to manage issues, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issue)
        or "[Issues](https://docs.github.com/enterprise-server@3.9/rest/issues)"
        in the REST API documentation.


        For activity relating to a comment on an issue, use the `issue_comment`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: >-
        Conversation on an issue was locked. For more information, see "[Locking
        conversations](https://docs.github.com/enterprise-server@3.9/communities/moderating-comments-and-conversations/locking-conversations)."
      operationId: issues/locked
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issues
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issues-locked'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issues
        supported-webhook-types:
          - repository
          - organization
          - app
  issues-milestoned:
    post:
      summary: >-
        This event occurs when there is activity relating to an issue. For more
        information about issues, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)."
        For information about the APIs to manage issues, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issue)
        or "[Issues](https://docs.github.com/enterprise-server@3.9/rest/issues)"
        in the REST API documentation.


        For activity relating to a comment on an issue, use the `issue_comment`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: An issue was added to a milestone.
      operationId: issues/milestoned
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issues
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issues-milestoned'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issues
        supported-webhook-types:
          - repository
          - organization
          - app
  issues-opened:
    post:
      summary: >-
        This event occurs when there is activity relating to an issue. For more
        information about issues, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)."
        For information about the APIs to manage issues, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issue)
        or "[Issues](https://docs.github.com/enterprise-server@3.9/rest/issues)"
        in the REST API documentation.


        For activity relating to a comment on an issue, use the `issue_comment`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: >-
        An issue was created. When a closed issue is reopened, the action will
        be `reopened` instead.
      operationId: issues/opened
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issues
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issues-opened'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issues
        supported-webhook-types:
          - repository
          - organization
          - app
  issues-pinned:
    post:
      summary: >-
        This event occurs when there is activity relating to an issue. For more
        information about issues, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)."
        For information about the APIs to manage issues, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issue)
        or "[Issues](https://docs.github.com/enterprise-server@3.9/rest/issues)"
        in the REST API documentation.


        For activity relating to a comment on an issue, use the `issue_comment`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: >-
        An issue was pinned to a repository. For more information, see "[Pinning
        an issue to your
        repository](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository)."
      operationId: issues/pinned
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issues
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issues-pinned'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issues
        supported-webhook-types:
          - repository
          - organization
          - app
  issues-reopened:
    post:
      summary: >-
        This event occurs when there is activity relating to an issue. For more
        information about issues, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)."
        For information about the APIs to manage issues, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issue)
        or "[Issues](https://docs.github.com/enterprise-server@3.9/rest/issues)"
        in the REST API documentation.


        For activity relating to a comment on an issue, use the `issue_comment`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: A closed issue was reopened.
      operationId: issues/reopened
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issues
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issues-reopened'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issues
        supported-webhook-types:
          - repository
          - organization
          - app
  issues-transferred:
    post:
      summary: >-
        This event occurs when there is activity relating to an issue. For more
        information about issues, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)."
        For information about the APIs to manage issues, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issue)
        or "[Issues](https://docs.github.com/enterprise-server@3.9/rest/issues)"
        in the REST API documentation.


        For activity relating to a comment on an issue, use the `issue_comment`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: >-
        An issue was transferred to another repository. For more information,
        see "[Transferring an issue to another
        repository](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/transferring-an-issue-to-another-repository)."
      operationId: issues/transferred
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issues
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issues-transferred'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issues
        supported-webhook-types:
          - repository
          - organization
          - app
  issues-unassigned:
    post:
      summary: >-
        This event occurs when there is activity relating to an issue. For more
        information about issues, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)."
        For information about the APIs to manage issues, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issue)
        or "[Issues](https://docs.github.com/enterprise-server@3.9/rest/issues)"
        in the REST API documentation.


        For activity relating to a comment on an issue, use the `issue_comment`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: A user was unassigned from an issue.
      operationId: issues/unassigned
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issues
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issues-unassigned'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issues
        supported-webhook-types:
          - repository
          - organization
          - app
  issues-unlabeled:
    post:
      summary: >-
        This event occurs when there is activity relating to an issue. For more
        information about issues, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)."
        For information about the APIs to manage issues, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issue)
        or "[Issues](https://docs.github.com/enterprise-server@3.9/rest/issues)"
        in the REST API documentation.


        For activity relating to a comment on an issue, use the `issue_comment`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: A label was removed from an issue.
      operationId: issues/unlabeled
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issues
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issues-unlabeled'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issues
        supported-webhook-types:
          - repository
          - organization
          - app
  issues-unlocked:
    post:
      summary: >-
        This event occurs when there is activity relating to an issue. For more
        information about issues, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)."
        For information about the APIs to manage issues, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issue)
        or "[Issues](https://docs.github.com/enterprise-server@3.9/rest/issues)"
        in the REST API documentation.


        For activity relating to a comment on an issue, use the `issue_comment`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: >-
        Conversation on an issue was locked. For more information, see "[Locking
        conversations](https://docs.github.com/enterprise-server@3.9/communities/moderating-comments-and-conversations/locking-conversations)."
      operationId: issues/unlocked
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issues
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issues-unlocked'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issues
        supported-webhook-types:
          - repository
          - organization
          - app
  issues-unpinned:
    post:
      summary: >-
        This event occurs when there is activity relating to an issue. For more
        information about issues, see "[About
        issues](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/about-issues)."
        For information about the APIs to manage issues, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#issue)
        or "[Issues](https://docs.github.com/enterprise-server@3.9/rest/issues)"
        in the REST API documentation.


        For activity relating to a comment on an issue, use the `issue_comment`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" repository permission.
      description: >-
        An issue was unpinned from a repository. For more information, see
        "[Pinning an issue to your
        repository](https://docs.github.com/enterprise-server@3.9/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository)."
      operationId: issues/unpinned
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#issues
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-issues-unpinned'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: issues
        supported-webhook-types:
          - repository
          - organization
          - app
  label-created:
    post:
      summary: >-
        This event occurs when there is activity relating to labels. For more
        information, see "[Managing
        labels](https://docs.github.com/enterprise-server@3.9/issues/using-labels-and-milestones-to-track-work/managing-labels)."
        For information about the APIs to manage labels, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#label)
        or
        "[Labels](https://docs.github.com/enterprise-server@3.9/rest/issues/labels)"
        in the REST API documentation.


        If you want to receive an event when a label is added to or removed from
        an issue, pull request, or discussion, use the `labeled` or `unlabeled`
        action type for the `issues`, `pull_request`, or `discussion` events
        instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      description: A label was created.
      operationId: label/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#label
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-label-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: label
        supported-webhook-types:
          - repository
          - organization
          - app
  label-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to labels. For more
        information, see "[Managing
        labels](https://docs.github.com/enterprise-server@3.9/issues/using-labels-and-milestones-to-track-work/managing-labels)."
        For information about the APIs to manage labels, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#label)
        or
        "[Labels](https://docs.github.com/enterprise-server@3.9/rest/issues/labels)"
        in the REST API documentation.


        If you want to receive an event when a label is added to or removed from
        an issue, pull request, or discussion, use the `labeled` or `unlabeled`
        action type for the `issues`, `pull_request`, or `discussion` events
        instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      description: A label was deleted.
      operationId: label/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#label
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-label-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: label
        supported-webhook-types:
          - repository
          - organization
          - app
  label-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to labels. For more
        information, see "[Managing
        labels](https://docs.github.com/enterprise-server@3.9/issues/using-labels-and-milestones-to-track-work/managing-labels)."
        For information about the APIs to manage labels, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#label)
        or
        "[Labels](https://docs.github.com/enterprise-server@3.9/rest/issues/labels)"
        in the REST API documentation.


        If you want to receive an event when a label is added to or removed from
        an issue, pull request, or discussion, use the `labeled` or `unlabeled`
        action type for the `issues`, `pull_request`, or `discussion` events
        instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      description: A label's name, description, or color was changed.
      operationId: label/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#label
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-label-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: label
        supported-webhook-types:
          - repository
          - organization
          - app
  member-added:
    post:
      summary: >-
        This event occurs when there is activity relating to collaborators in a
        repository. For more information, see "[Adding outside collaborators to
        repositories in your
        organization](https://docs.github.com/enterprise-server@3.9/organizations/managing-user-access-to-your-organizations-repositories/adding-outside-collaborators-to-repositories-in-your-organization)."
        For more information about the API to manage repository collaborators,
        see [the GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#repositorycollaboratorconnection)
        or
        "[Collaborators](https://docs.github.com/enterprise-server@3.9/rest/collaborators/collaborators)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Members" organization permission.
      description: A GitHub user accepted an invitation to a repository.
      operationId: member/added
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#member
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-member-added'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: member
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  member-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to collaborators in a
        repository. For more information, see "[Adding outside collaborators to
        repositories in your
        organization](https://docs.github.com/enterprise-server@3.9/organizations/managing-user-access-to-your-organizations-repositories/adding-outside-collaborators-to-repositories-in-your-organization)."
        For more information about the API to manage repository collaborators,
        see [the GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#repositorycollaboratorconnection)
        or
        "[Collaborators](https://docs.github.com/enterprise-server@3.9/rest/collaborators/collaborators)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Members" organization permission.
      description: Permissions were changed for a collaborator on a repository.
      operationId: member/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#member
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-member-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: member
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  member-removed:
    post:
      summary: >-
        This event occurs when there is activity relating to collaborators in a
        repository. For more information, see "[Adding outside collaborators to
        repositories in your
        organization](https://docs.github.com/enterprise-server@3.9/organizations/managing-user-access-to-your-organizations-repositories/adding-outside-collaborators-to-repositories-in-your-organization)."
        For more information about the API to manage repository collaborators,
        see [the GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#repositorycollaboratorconnection)
        or
        "[Collaborators](https://docs.github.com/enterprise-server@3.9/rest/collaborators/collaborators)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Members" organization permission.
      description: A collaborator was removed from a repository.
      operationId: member/removed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#member
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-member-removed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: member
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  membership-added:
    post:
      summary: >-
        This event occurs when there is activity relating to team membership.
        For more information, see "[About
        teams](https://docs.github.com/enterprise-server@3.9/organizations/organizing-members-into-teams/about-teams)."
        For more information about the APIs to manage team memberships, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#team)
        or "[Team
        members](https://docs.github.com/enterprise-server@3.9/rest/teams/members)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Members" organization permission.
      description: An organization member was added to a team.
      operationId: membership/added
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#membership
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-membership-added'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: membership
        supported-webhook-types:
          - organization
          - business
          - app
  membership-removed:
    post:
      summary: >-
        This event occurs when there is activity relating to team membership.
        For more information, see "[About
        teams](https://docs.github.com/enterprise-server@3.9/organizations/organizing-members-into-teams/about-teams)."
        For more information about the APIs to manage team memberships, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#team)
        or "[Team
        members](https://docs.github.com/enterprise-server@3.9/rest/teams/members)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Members" organization permission.
      description: An organization member was removed from a team.
      operationId: membership/removed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#membership
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-membership-removed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: membership
        supported-webhook-types:
          - organization
          - business
          - app
  meta-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to a webhook itself.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Meta" app permission.
      description: The webhook was deleted.
      operationId: meta/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#meta
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-meta-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: meta
        supported-webhook-types:
          - marketplace
          - business
          - repository
          - organization
          - app
  milestone-closed:
    post:
      summary: >-
        This event occurs when there is activity relating to milestones. For
        more information, see "[About
        milestones](https://docs.github.com/enterprise-server@3.9/issues/using-labels-and-milestones-to-track-work/about-milestones)."
        For information about the APIs to manage milestones, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#milestone)
        or
        "[Milestones](https://docs.github.com/enterprise-server@3.9/rest/issues/milestones)"
        in the REST API documentation.


        If you want to receive an event when an issue or pull request is added
        to or removed from a milestone, use the `milestoned` or `demilestoned`
        action type for the `issues` or `pull_request` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" or "Pull requests" repository permissions.
      description: A milestone was closed.
      operationId: milestone/closed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#milestone
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-milestone-closed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: milestone
        supported-webhook-types:
          - repository
          - organization
          - app
  milestone-created:
    post:
      summary: >-
        This event occurs when there is activity relating to milestones. For
        more information, see "[About
        milestones](https://docs.github.com/enterprise-server@3.9/issues/using-labels-and-milestones-to-track-work/about-milestones)."
        For information about the APIs to manage milestones, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#milestone)
        or
        "[Milestones](https://docs.github.com/enterprise-server@3.9/rest/issues/milestones)"
        in the REST API documentation.


        If you want to receive an event when an issue or pull request is added
        to or removed from a milestone, use the `milestoned` or `demilestoned`
        action type for the `issues` or `pull_request` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" or "Pull requests" repository permissions.
      description: A milestone was created.
      operationId: milestone/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#milestone
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-milestone-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: milestone
        supported-webhook-types:
          - repository
          - organization
          - app
  milestone-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to milestones. For
        more information, see "[About
        milestones](https://docs.github.com/enterprise-server@3.9/issues/using-labels-and-milestones-to-track-work/about-milestones)."
        For information about the APIs to manage milestones, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#milestone)
        or
        "[Milestones](https://docs.github.com/enterprise-server@3.9/rest/issues/milestones)"
        in the REST API documentation.


        If you want to receive an event when an issue or pull request is added
        to or removed from a milestone, use the `milestoned` or `demilestoned`
        action type for the `issues` or `pull_request` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" or "Pull requests" repository permissions.
      description: A milestone was deleted.
      operationId: milestone/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#milestone
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-milestone-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: milestone
        supported-webhook-types:
          - repository
          - organization
          - app
  milestone-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to milestones. For
        more information, see "[About
        milestones](https://docs.github.com/enterprise-server@3.9/issues/using-labels-and-milestones-to-track-work/about-milestones)."
        For information about the APIs to manage milestones, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#milestone)
        or
        "[Milestones](https://docs.github.com/enterprise-server@3.9/rest/issues/milestones)"
        in the REST API documentation.


        If you want to receive an event when an issue or pull request is added
        to or removed from a milestone, use the `milestoned` or `demilestoned`
        action type for the `issues` or `pull_request` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" or "Pull requests" repository permissions.
      description: A milestone was edited.
      operationId: milestone/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#milestone
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-milestone-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: milestone
        supported-webhook-types:
          - repository
          - organization
          - app
  milestone-opened:
    post:
      summary: >-
        This event occurs when there is activity relating to milestones. For
        more information, see "[About
        milestones](https://docs.github.com/enterprise-server@3.9/issues/using-labels-and-milestones-to-track-work/about-milestones)."
        For information about the APIs to manage milestones, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#milestone)
        or
        "[Milestones](https://docs.github.com/enterprise-server@3.9/rest/issues/milestones)"
        in the REST API documentation.


        If you want to receive an event when an issue or pull request is added
        to or removed from a milestone, use the `milestoned` or `demilestoned`
        action type for the `issues` or `pull_request` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Issues" or "Pull requests" repository permissions.
      description: A milestone was opened.
      operationId: milestone/opened
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#milestone
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-milestone-opened'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: milestone
        supported-webhook-types:
          - repository
          - organization
          - app
  organization-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to an organization and
        its members. For more information, see "[About
        organizations](https://docs.github.com/enterprise-server@3.9/organizations/collaborating-with-groups-in-organizations/about-organizations)."
        For information about the APIs to manage organizations, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#organization)
        or
        "[Organizations](https://docs.github.com/enterprise-server@3.9/rest/orgs)"
        in the REST API documentation.


        If you want to receive an event when a non-member is blocked or
        unblocked from an organization, use the `org_block` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Members" organization permission.
      description: An organization was deleted.
      operationId: organization/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#organization
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-organization-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: organization
        supported-webhook-types:
          - organization
          - business
          - app
  organization-member-added:
    post:
      summary: >-
        This event occurs when there is activity relating to an organization and
        its members. For more information, see "[About
        organizations](https://docs.github.com/enterprise-server@3.9/organizations/collaborating-with-groups-in-organizations/about-organizations)."
        For information about the APIs to manage organizations, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#organization)
        or
        "[Organizations](https://docs.github.com/enterprise-server@3.9/rest/orgs)"
        in the REST API documentation.


        If you want to receive an event when a non-member is blocked or
        unblocked from an organization, use the `org_block` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Members" organization permission.
      description: A member accepted an invitation to join an organization.
      operationId: organization/member-added
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#organization
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-organization-member-added'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: organization
        supported-webhook-types:
          - organization
          - business
          - app
  organization-member-invited:
    post:
      summary: >-
        This event occurs when there is activity relating to an organization and
        its members. For more information, see "[About
        organizations](https://docs.github.com/enterprise-server@3.9/organizations/collaborating-with-groups-in-organizations/about-organizations)."
        For information about the APIs to manage organizations, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#organization)
        or
        "[Organizations](https://docs.github.com/enterprise-server@3.9/rest/orgs)"
        in the REST API documentation.


        If you want to receive an event when a non-member is blocked or
        unblocked from an organization, use the `org_block` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Members" organization permission.
      description: A member was invited to join the organization.
      operationId: organization/member-invited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#organization
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-organization-member-invited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: organization
        supported-webhook-types:
          - organization
          - business
          - app
  organization-member-removed:
    post:
      summary: >-
        This event occurs when there is activity relating to an organization and
        its members. For more information, see "[About
        organizations](https://docs.github.com/enterprise-server@3.9/organizations/collaborating-with-groups-in-organizations/about-organizations)."
        For information about the APIs to manage organizations, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#organization)
        or
        "[Organizations](https://docs.github.com/enterprise-server@3.9/rest/orgs)"
        in the REST API documentation.


        If you want to receive an event when a non-member is blocked or
        unblocked from an organization, use the `org_block` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Members" organization permission.
      description: A member was removed from the organization.
      operationId: organization/member-removed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#organization
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-organization-member-removed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: organization
        supported-webhook-types:
          - organization
          - business
          - app
  organization-renamed:
    post:
      summary: >-
        This event occurs when there is activity relating to an organization and
        its members. For more information, see "[About
        organizations](https://docs.github.com/enterprise-server@3.9/organizations/collaborating-with-groups-in-organizations/about-organizations)."
        For information about the APIs to manage organizations, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#organization)
        or
        "[Organizations](https://docs.github.com/enterprise-server@3.9/rest/orgs)"
        in the REST API documentation.


        If you want to receive an event when a non-member is blocked or
        unblocked from an organization, use the `org_block` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Members" organization permission.
      description: The name of an organization was changed.
      operationId: organization/renamed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#organization
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-organization-renamed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: organization
        supported-webhook-types:
          - organization
          - business
          - app
  package-published:
    post:
      summary: >-
        This event occurs when there is activity relating to GitHub Packages.
        For more information, see "[Introduction to GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/introduction-to-github-packages)."
        For information about the APIs to manage GitHub Packages, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#package)
        or
        "[Packages](https://docs.github.com/enterprise-server@3.9/rest/packages)"
        in the REST API documentation.


        To install this event on a GitHub App, the app must have at least
        read-level access for the "Packages" repository permission.
      description: A package was published to a registry.
      operationId: package/published
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#package
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-package-published'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: package
        supported-webhook-types:
          - repository
          - organization
          - app
  package-updated:
    post:
      summary: >-
        This event occurs when there is activity relating to GitHub Packages.
        For more information, see "[Introduction to GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/introduction-to-github-packages)."
        For information about the APIs to manage GitHub Packages, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#package)
        or
        "[Packages](https://docs.github.com/enterprise-server@3.9/rest/packages)"
        in the REST API documentation.


        To install this event on a GitHub App, the app must have at least
        read-level access for the "Packages" repository permission.
      description: A previously published package was updated.
      operationId: package/updated
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#package
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-package-updated'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: package
        supported-webhook-types:
          - repository
          - organization
          - app
  page-build:
    post:
      summary: >-
        This event occurs when there is an attempted build of a GitHub Pages
        site. This event occurs regardless of whether the build is successful.
        For more information, see "[Configuring a publishing source for your
        GitHub Pages
        site](https://docs.github.com/enterprise-server@3.9/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site)."
        For information about the API to manage GitHub Pages, see
        "[Pages](https://docs.github.com/enterprise-server@3.9/rest/pages)" in
        the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pages" repository permission.
      operationId: page-build
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#page_build
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-page-build'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: page_build
        supported-webhook-types:
          - repository
          - organization
          - app
  ping:
    post:
      summary: >-
        This event occurs when you create a new webhook. The ping event is a
        confirmation from GitHub that you configured the webhook correctly.
      operationId: ping
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#ping
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-ping'
            examples:
              default:
                $ref: '#/components/examples/ping'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/webhook-ping-form-encoded'
            examples:
              default:
                $ref: '#/components/examples/ping-form-encoded'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: ping
        supported-webhook-types:
          - repository
          - organization
          - app
          - business
          - marketplace
  project-card-converted:
    post:
      summary: >-
        This event occurs when there is activity relating to a card on a project
        (classic). For more information, see "[About projects
        (classic)](https://docs.github.com/enterprise-server@3.9/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)."
        For information about the API to manage classic projects, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#project)
        or "[Projects
        (classic)](https://docs.github.com/enterprise-server@3.9/rest/projects)"
        in the REST API documentation.


        For activity relating to a project (classic) or a column on a project
        (classic), use the `project` and `project_column` event.


        This event relates to projects (classic) only. For activity relating to
        the new Projects experience, use the `projects_v2` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" repository or organization permission.
      description: A note in a project (classic) was converted to an issue.
      operationId: project-card/converted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#project_card
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-project-card-converted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: project_card
        supported-webhook-types:
          - repository
          - organization
          - app
  project-card-created:
    post:
      summary: >-
        This event occurs when there is activity relating to a card on a project
        (classic). For more information, see "[About projects
        (classic)](https://docs.github.com/enterprise-server@3.9/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)."
        For information about the API to manage classic projects, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#project)
        or "[Projects
        (classic)](https://docs.github.com/enterprise-server@3.9/rest/projects)"
        in the REST API documentation.


        For activity relating to a project (classic) or a column on a project
        (classic), use the `project` and `project_column` event.


        This event relates to projects (classic) only. For activity relating to
        the new Projects experience, use the `projects_v2` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" repository or organization permission.
      description: A card was added to a project (classic).
      operationId: project-card/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#project_card
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-project-card-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: project_card
        supported-webhook-types:
          - repository
          - organization
          - app
  project-card-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to a card on a project
        (classic). For more information, see "[About projects
        (classic)](https://docs.github.com/enterprise-server@3.9/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)."
        For information about the API to manage classic projects, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#project)
        or "[Projects
        (classic)](https://docs.github.com/enterprise-server@3.9/rest/projects)"
        in the REST API documentation.


        For activity relating to a project (classic) or a column on a project
        (classic), use the `project` and `project_column` event.


        This event relates to projects (classic) only. For activity relating to
        the new Projects experience, use the `projects_v2` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" repository or organization permission.
      description: A card on a project (classic) was deleted.
      operationId: project-card/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#project_card
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-project-card-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: project_card
        supported-webhook-types:
          - repository
          - organization
          - app
  project-card-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to a card on a project
        (classic). For more information, see "[About projects
        (classic)](https://docs.github.com/enterprise-server@3.9/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)."
        For information about the API to manage classic projects, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#project)
        or "[Projects
        (classic)](https://docs.github.com/enterprise-server@3.9/rest/projects)"
        in the REST API documentation.


        For activity relating to a project (classic) or a column on a project
        (classic), use the `project` and `project_column` event.


        This event relates to projects (classic) only. For activity relating to
        the new Projects experience, use the `projects_v2` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" repository or organization permission.
      description: A note on a project (classic) was edited.
      operationId: project-card/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#project_card
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-project-card-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: project_card
        supported-webhook-types:
          - repository
          - organization
          - app
  project-card-moved:
    post:
      summary: >-
        This event occurs when there is activity relating to a card on a project
        (classic). For more information, see "[About projects
        (classic)](https://docs.github.com/enterprise-server@3.9/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)."
        For information about the API to manage classic projects, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#project)
        or "[Projects
        (classic)](https://docs.github.com/enterprise-server@3.9/rest/projects)"
        in the REST API documentation.


        For activity relating to a project (classic) or a column on a project
        (classic), use the `project` and `project_column` event.


        This event relates to projects (classic) only. For activity relating to
        the new Projects experience, use the `projects_v2` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" repository or organization permission.
      description: >-
        A card on a project (classic) was moved to another column or to another
        position in its column.
      operationId: project-card/moved
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#project_card
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-project-card-moved'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: project_card
        supported-webhook-types:
          - repository
          - organization
          - app
  project-closed:
    post:
      summary: >-
        This event occurs when there is activity relating to a project
        (classic). For more information, see "[About projects
        (classic)](https://docs.github.com/enterprise-server@3.9/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)."
        For information about the API to manage classic projects, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#project)
        or "[Projects
        (classic)](https://docs.github.com/enterprise-server@3.9/rest/projects)"
        in the REST API documentation.


        For activity relating to a card or column on a project (classic), use
        the `project_card` and `project_column` event.


        This event relates to projects (classic) only. For activity relating to
        the new Projects experience, use the `projects_v2` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" repository or organization permission.
      description: A project (classic) was closed.
      operationId: project/closed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#project
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-project-closed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: project
        supported-webhook-types:
          - repository
          - organization
          - app
  project-column-created:
    post:
      summary: >-
        This event occurs when there is activity relating to a column on a
        project (classic). For more information, see "[About projects
        (classic)](https://docs.github.com/enterprise-server@3.9/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)."
        For information about the API to manage classic projects, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#project)
        or "[Projects
        (classic)](https://docs.github.com/enterprise-server@3.9/rest/projects)"
        in the REST API documentation.


        For activity relating to a project (classic) or a card on a project
        (classic), use the `project` and `project_card` event.


        This event relates to projects (classic) only. For activity relating to
        the new Projects experience, use the `projects_v2` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" repository or organization permission.
      description: A column was added to a project (classic).
      operationId: project-column/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#project_column
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-project-column-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: project_column
        supported-webhook-types:
          - repository
          - organization
          - app
  project-column-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to a column on a
        project (classic). For more information, see "[About projects
        (classic)](https://docs.github.com/enterprise-server@3.9/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)."
        For information about the API to manage classic projects, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#project)
        or "[Projects
        (classic)](https://docs.github.com/enterprise-server@3.9/rest/projects)"
        in the REST API documentation.


        For activity relating to a project (classic) or a card on a project
        (classic), use the `project` and `project_card` event.


        This event relates to projects (classic) only. For activity relating to
        the new Projects experience, use the `projects_v2` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" repository or organization permission.
      description: A column was deleted from a project (classic).
      operationId: project-column/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#project_column
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-project-column-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: project_column
        supported-webhook-types:
          - repository
          - organization
          - app
  project-column-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to a column on a
        project (classic). For more information, see "[About projects
        (classic)](https://docs.github.com/enterprise-server@3.9/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)."
        For information about the API to manage classic projects, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#project)
        or "[Projects
        (classic)](https://docs.github.com/enterprise-server@3.9/rest/projects)"
        in the REST API documentation.


        For activity relating to a project (classic) or a card on a project
        (classic), use the `project` and `project_card` event.


        This event relates to projects (classic) only. For activity relating to
        the new Projects experience, use the `projects_v2` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" repository or organization permission.
      description: The name of a column on a project (classic) was changed.
      operationId: project-column/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#project_column
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-project-column-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: project_column
        supported-webhook-types:
          - repository
          - organization
          - app
  project-column-moved:
    post:
      summary: >-
        This event occurs when there is activity relating to a column on a
        project (classic). For more information, see "[About projects
        (classic)](https://docs.github.com/enterprise-server@3.9/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)."
        For information about the API to manage classic projects, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#project)
        or "[Projects
        (classic)](https://docs.github.com/enterprise-server@3.9/rest/projects)"
        in the REST API documentation.


        For activity relating to a project (classic) or a card on a project
        (classic), use the `project` and `project_card` event.


        This event relates to projects (classic) only. For activity relating to
        the new Projects experience, use the `projects_v2` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" repository or organization permission.
      description: A column was moved to a new position on a project (classic).
      operationId: project-column/moved
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#project_column
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-project-column-moved'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: project_column
        supported-webhook-types:
          - repository
          - organization
          - app
  project-created:
    post:
      summary: >-
        This event occurs when there is activity relating to a project
        (classic). For more information, see "[About projects
        (classic)](https://docs.github.com/enterprise-server@3.9/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)."
        For information about the API to manage classic projects, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#project)
        or "[Projects
        (classic)](https://docs.github.com/enterprise-server@3.9/rest/projects)"
        in the REST API documentation.


        For activity relating to a card or column on a project (classic), use
        the `project_card` and `project_column` event.


        This event relates to projects (classic) only. For activity relating to
        the new Projects experience, use the `projects_v2` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" repository or organization permission.
      description: A project (classic) was created.
      operationId: project/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#project
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-project-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: project
        supported-webhook-types:
          - repository
          - organization
          - app
  project-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to a project
        (classic). For more information, see "[About projects
        (classic)](https://docs.github.com/enterprise-server@3.9/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)."
        For information about the API to manage classic projects, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#project)
        or "[Projects
        (classic)](https://docs.github.com/enterprise-server@3.9/rest/projects)"
        in the REST API documentation.


        For activity relating to a card or column on a project (classic), use
        the `project_card` and `project_column` event.


        This event relates to projects (classic) only. For activity relating to
        the new Projects experience, use the `projects_v2` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" repository or organization permission.
      description: A project (classic) was deleted.
      operationId: project/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#project
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-project-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: project
        supported-webhook-types:
          - repository
          - organization
          - app
  project-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to a project
        (classic). For more information, see "[About projects
        (classic)](https://docs.github.com/enterprise-server@3.9/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)."
        For information about the API to manage classic projects, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#project)
        or "[Projects
        (classic)](https://docs.github.com/enterprise-server@3.9/rest/projects)"
        in the REST API documentation.


        For activity relating to a card or column on a project (classic), use
        the `project_card` and `project_column` event.


        This event relates to projects (classic) only. For activity relating to
        the new Projects experience, use the `projects_v2` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" repository or organization permission.
      description: The name or description of a project (classic) was changed.
      operationId: project/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#project
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-project-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: project
        supported-webhook-types:
          - repository
          - organization
          - app
  project-reopened:
    post:
      summary: >-
        This event occurs when there is activity relating to a project
        (classic). For more information, see "[About projects
        (classic)](https://docs.github.com/enterprise-server@3.9/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards)."
        For information about the API to manage classic projects, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#project)
        or "[Projects
        (classic)](https://docs.github.com/enterprise-server@3.9/rest/projects)"
        in the REST API documentation.


        For activity relating to a card or column on a project (classic), use
        the `project_card` and `project_column` event.


        This event relates to projects (classic) only. For activity relating to
        the new Projects experience, use the `projects_v2` event instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" repository or organization permission.
      description: A project (classic) was closed.
      operationId: project/reopened
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#project
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-project-reopened'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: project
        supported-webhook-types:
          - repository
          - organization
          - app
  projects-v2-closed:
    post:
      summary: >-
        This event occurs when there is activity relating to an
        organization-level project. For more information, see "[About
        Projects](https://docs.github.com/enterprise-server@3.9/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)."
        For information about the Projects API, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#projectv2).


        For activity relating to a item on a project, use the `projects_v2_item`
        event. For activity relating to Projects (classic), use the `project`,
        `project_card`, and `project_column` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" organization permission.


        **Note**: Webhook events for projects are currently in beta and subject
        to change. To share feedback about projects webhooks with GitHub, see
        the [Projects webhook feedback
        discussion](https://github.com/orgs/community/discussions/17405).
      description: A project in the organization was closed.
      operationId: projects-v2/closed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#projects_v2
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: project-v2
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-projects-v2-project-closed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: projects_v2
        supported-webhook-types:
          - organization
  projects-v2-created:
    post:
      summary: >-
        This event occurs when there is activity relating to an
        organization-level project. For more information, see "[About
        Projects](https://docs.github.com/enterprise-server@3.9/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)."
        For information about the Projects API, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#projectv2).


        For activity relating to a item on a project, use the `projects_v2_item`
        event. For activity relating to Projects (classic), use the `project`,
        `project_card`, and `project_column` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" organization permission.


        **Note**: Webhook events for projects are currently in beta and subject
        to change. To share feedback about projects webhooks with GitHub, see
        the [Projects webhook feedback
        discussion](https://github.com/orgs/community/discussions/17405).
      description: A project in the organization was created.
      operationId: projects-v2/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#projects_v2
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: project-v2
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-projects-v2-project-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: projects_v2
        supported-webhook-types:
          - organization
  projects-v2-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to an
        organization-level project. For more information, see "[About
        Projects](https://docs.github.com/enterprise-server@3.9/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)."
        For information about the Projects API, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#projectv2).


        For activity relating to a item on a project, use the `projects_v2_item`
        event. For activity relating to Projects (classic), use the `project`,
        `project_card`, and `project_column` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" organization permission.


        **Note**: Webhook events for projects are currently in beta and subject
        to change. To share feedback about projects webhooks with GitHub, see
        the [Projects webhook feedback
        discussion](https://github.com/orgs/community/discussions/17405).
      description: A project in the organization was deleted.
      operationId: projects-v2/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#projects_v2
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: project-v2
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-projects-v2-project-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: projects_v2
        supported-webhook-types:
          - organization
  projects-v2-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to an
        organization-level project. For more information, see "[About
        Projects](https://docs.github.com/enterprise-server@3.9/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)."
        For information about the Projects API, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#projectv2).


        For activity relating to a item on a project, use the `projects_v2_item`
        event. For activity relating to Projects (classic), use the `project`,
        `project_card`, and `project_column` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" organization permission.


        **Note**: Webhook events for projects are currently in beta and subject
        to change. To share feedback about projects webhooks with GitHub, see
        the [Projects webhook feedback
        discussion](https://github.com/orgs/community/discussions/17405).
      description: >-
        The title, description, or README of a project in the organization was
        changed.
      operationId: projects-v2/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#projects_v2
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: project-v2
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-projects-v2-project-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: projects_v2
        supported-webhook-types:
          - organization
  projects-v2-item-archived:
    post:
      summary: >-
        This event occurs when there is activity relating to an item on an
        organization-level project. For more information, see "[About
        Projects](https://docs.github.com/enterprise-server@3.9/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)."
        For information about the Projects API, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#projectv2item).


        For activity relating to a project (instead of an item on a project),
        use the `projects_v2` event. For activity relating to Projects
        (classic), use the `project`, `project_card`, and `project_column`
        events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" organization permission.


        **Note**: Webhook events for projects are currently in beta and subject
        to change. To share feedback about projects webhooks with GitHub, see
        the [Projects webhook feedback
        discussion](https://github.com/orgs/community/discussions/17405).
      description: >-
        An item on an organization project was archived. For more information,
        see "[Archiving items from your
        project](https://docs.github.com/enterprise-server@3.9/issues/planning-and-tracking-with-projects/managing-items-in-your-project/archiving-items-from-your-project)."
      operationId: projects-v2-item/archived
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#projects_v2_item
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: project-v2-item
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-projects-v2-item-archived'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: projects_v2_item
        supported-webhook-types:
          - organization
  projects-v2-item-converted:
    post:
      summary: >-
        This event occurs when there is activity relating to an item on an
        organization-level project. For more information, see "[About
        Projects](https://docs.github.com/enterprise-server@3.9/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)."
        For information about the Projects API, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#projectv2item).


        For activity relating to a project (instead of an item on a project),
        use the `projects_v2` event. For activity relating to Projects
        (classic), use the `project`, `project_card`, and `project_column`
        events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" organization permission.


        **Note**: Webhook events for projects are currently in beta and subject
        to change. To share feedback about projects webhooks with GitHub, see
        the [Projects webhook feedback
        discussion](https://github.com/orgs/community/discussions/17405).
      description: A draft issue in an organization project was converted to an issue.
      operationId: projects-v2-item/converted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#projects_v2_item
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: project-v2-item
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-projects-v2-item-converted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: projects_v2_item
        supported-webhook-types:
          - organization
  projects-v2-item-created:
    post:
      summary: >-
        This event occurs when there is activity relating to an item on an
        organization-level project. For more information, see "[About
        Projects](https://docs.github.com/enterprise-server@3.9/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)."
        For information about the Projects API, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#projectv2item).


        For activity relating to a project (instead of an item on a project),
        use the `projects_v2` event. For activity relating to Projects
        (classic), use the `project`, `project_card`, and `project_column`
        events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" organization permission.


        **Note**: Webhook events for projects are currently in beta and subject
        to change. To share feedback about projects webhooks with GitHub, see
        the [Projects webhook feedback
        discussion](https://github.com/orgs/community/discussions/17405).
      description: An item was added to a project in the organization.
      operationId: projects-v2-item/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#projects_v2_item
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: project-v2-item
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-projects-v2-item-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: projects_v2_item
        supported-webhook-types:
          - organization
  projects-v2-item-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to an item on an
        organization-level project. For more information, see "[About
        Projects](https://docs.github.com/enterprise-server@3.9/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)."
        For information about the Projects API, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#projectv2item).


        For activity relating to a project (instead of an item on a project),
        use the `projects_v2` event. For activity relating to Projects
        (classic), use the `project`, `project_card`, and `project_column`
        events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" organization permission.


        **Note**: Webhook events for projects are currently in beta and subject
        to change. To share feedback about projects webhooks with GitHub, see
        the [Projects webhook feedback
        discussion](https://github.com/orgs/community/discussions/17405).
      description: An item was deleted from a project in the organization.
      operationId: projects-v2-item/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#projects_v2_item
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: project-v2-item
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-projects-v2-item-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: projects_v2_item
        supported-webhook-types:
          - organization
  projects-v2-item-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to an item on an
        organization-level project. For more information, see "[About
        Projects](https://docs.github.com/enterprise-server@3.9/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)."
        For information about the Projects API, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#projectv2item).


        For activity relating to a project (instead of an item on a project),
        use the `projects_v2` event. For activity relating to Projects
        (classic), use the `project`, `project_card`, and `project_column`
        events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" organization permission.


        **Note**: Webhook events for projects are currently in beta and subject
        to change. To share feedback about projects webhooks with GitHub, see
        the [Projects webhook feedback
        discussion](https://github.com/orgs/community/discussions/17405).
      description: >-
        The values or state of an item in an organization project were changed.
        For example, the value of a field was updated, the body of a draft issue
        was changed, or a draft issue was converted to an issue.
      operationId: projects-v2-item/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#projects_v2_item
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: project-v2-item
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-projects-v2-item-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: projects_v2_item
        supported-webhook-types:
          - organization
  projects-v2-item-reordered:
    post:
      summary: >-
        This event occurs when there is activity relating to an item on an
        organization-level project. For more information, see "[About
        Projects](https://docs.github.com/enterprise-server@3.9/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)."
        For information about the Projects API, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#projectv2item).


        For activity relating to a project (instead of an item on a project),
        use the `projects_v2` event. For activity relating to Projects
        (classic), use the `project`, `project_card`, and `project_column`
        events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" organization permission.


        **Note**: Webhook events for projects are currently in beta and subject
        to change. To share feedback about projects webhooks with GitHub, see
        the [Projects webhook feedback
        discussion](https://github.com/orgs/community/discussions/17405).
      description: >-
        The position of an item in an organization project was changed. For
        example, an item was moved above or below another item in the table or
        board layout.
      operationId: projects-v2-item/reordered
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#projects_v2_item
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: project-v2-item
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-projects-v2-item-reordered'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: projects_v2_item
        supported-webhook-types:
          - organization
  projects-v2-item-restored:
    post:
      summary: >-
        This event occurs when there is activity relating to an item on an
        organization-level project. For more information, see "[About
        Projects](https://docs.github.com/enterprise-server@3.9/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)."
        For information about the Projects API, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#projectv2item).


        For activity relating to a project (instead of an item on a project),
        use the `projects_v2` event. For activity relating to Projects
        (classic), use the `project`, `project_card`, and `project_column`
        events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" organization permission.


        **Note**: Webhook events for projects are currently in beta and subject
        to change. To share feedback about projects webhooks with GitHub, see
        the [Projects webhook feedback
        discussion](https://github.com/orgs/community/discussions/17405).
      description: >-
        An archived item on an organization project was restored from the
        archive. For more information, see "[Archiving items from your
        project](https://docs.github.com/enterprise-server@3.9/issues/planning-and-tracking-with-projects/managing-items-in-your-project/archiving-items-from-your-project)."
      operationId: projects-v2-item/restored
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#projects_v2_item
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: project-v2-item
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-projects-v2-item-restored'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: projects_v2_item
        supported-webhook-types:
          - organization
  projects-v2-reopened:
    post:
      summary: >-
        This event occurs when there is activity relating to an
        organization-level project. For more information, see "[About
        Projects](https://docs.github.com/enterprise-server@3.9/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)."
        For information about the Projects API, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#projectv2).


        For activity relating to a item on a project, use the `projects_v2_item`
        event. For activity relating to Projects (classic), use the `project`,
        `project_card`, and `project_column` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Projects" organization permission.


        **Note**: Webhook events for projects are currently in beta and subject
        to change. To share feedback about projects webhooks with GitHub, see
        the [Projects webhook feedback
        discussion](https://github.com/orgs/community/discussions/17405).
      description: A project in the organization was reopened.
      operationId: projects-v2/reopened
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#projects_v2
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: project-v2
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-projects-v2-project-reopened'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: projects_v2
        supported-webhook-types:
          - organization
  public:
    post:
      summary: >-
        This event occurs when repository visibility changes from private to
        public. For more information, see "[Setting repository
        visibility](https://docs.github.com/enterprise-server@3.9/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/setting-repository-visibility)."


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      operationId: public
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#public
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-public'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: public
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-assigned:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: A pull request was assigned to a user.
      operationId: pull-request/assigned
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-assigned'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-auto-merge-disabled:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: >-
        Auto merge was disabled for a pull request. For more information, see
        "[Automatically merging a pull
        request](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request)."
      operationId: pull-request/auto-merge-disabled
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-auto-merge-disabled'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-auto-merge-enabled:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: >-
        Auto merge was enabled for a pull request. For more information, see
        "[Automatically merging a pull
        request](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request)."
      operationId: pull-request/auto-merge-enabled
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-auto-merge-enabled'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-closed:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: >-
        A pull request was closed. If `merged` is false in the webhook payload,
        the pull request was closed with unmerged commits. If `merged` is true
        in the webhook payload, the pull request was merged.
      operationId: pull-request/closed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-closed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-converted-to-draft:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: >-
        A pull request was converted to a draft. For more information, see
        "[Changing the stage of a pull
        request](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request)."
      operationId: pull-request/converted-to-draft
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-converted-to-draft'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-demilestoned:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: A pull request was removed from a milestone.
      operationId: pull-request/demilestoned
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-demilestoned'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-edited:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: >-
        The title or body of a pull request was edited, or the base branch of a
        pull request was changed.
      operationId: pull-request/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-labeled:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: A label was added to a pull request.
      operationId: pull-request/labeled
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-labeled'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-locked:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: >-
        Conversation on a pull request was locked. For more information, see
        "[Locking
        conversations](https://docs.github.com/enterprise-server@3.9/communities/moderating-comments-and-conversations/locking-conversations)."
      operationId: pull-request/locked
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-locked'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-milestoned:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: A pull request was added to a milestone.
      operationId: pull-request/milestoned
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-milestoned'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-opened:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: A pull request was created
      operationId: pull-request/opened
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-opened'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-ready-for-review:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: >-
        A draft pull request was marked as ready for review. For more
        information, see "[Changing the stage of a pull
        request](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request)."
      operationId: pull-request/ready-for-review
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-ready-for-review'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-reopened:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: A previously closed pull request was reopened.
      operationId: pull-request/reopened
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-reopened'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-review-comment-created:
    post:
      summary: >-
        This event occurs when there is activity relating to a pull request
        review comment. A pull request review comment is a comment on a pull
        request's diff. For more information, see "[Commenting on a pull
        request](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)."
        For information about the APIs to manage pull request review comments,
        see [the GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequestreviewcomment)
        or "[Pull request review
        comments](https://docs.github.com/enterprise-server@3.9/rest/pulls/comments)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request comments, or
        pull request review threads, use the `pull_request_review`,
        `issue_comment`, or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: A comment on a pull request diff was created.
      operationId: pull-request-review-comment/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request_review_comment
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-review-comment-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request_review_comment
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-review-comment-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to a pull request
        review comment. A pull request review comment is a comment on a pull
        request's diff. For more information, see "[Commenting on a pull
        request](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)."
        For information about the APIs to manage pull request review comments,
        see [the GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequestreviewcomment)
        or "[Pull request review
        comments](https://docs.github.com/enterprise-server@3.9/rest/pulls/comments)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request comments, or
        pull request review threads, use the `pull_request_review`,
        `issue_comment`, or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: A comment on a pull request diff was deleted.
      operationId: pull-request-review-comment/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request_review_comment
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-review-comment-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request_review_comment
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-review-comment-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to a pull request
        review comment. A pull request review comment is a comment on a pull
        request's diff. For more information, see "[Commenting on a pull
        request](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)."
        For information about the APIs to manage pull request review comments,
        see [the GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequestreviewcomment)
        or "[Pull request review
        comments](https://docs.github.com/enterprise-server@3.9/rest/pulls/comments)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request comments, or
        pull request review threads, use the `pull_request_review`,
        `issue_comment`, or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: The content of a comment on a pull request diff was changed.
      operationId: pull-request-review-comment/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request_review_comment
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-review-comment-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request_review_comment
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-review-dismissed:
    post:
      summary: >-
        This event occurs when there is activity relating to a pull request
        review. A pull request review is a group of pull request review comments
        in addition to a body comment and a state. For more information, see
        "[About pull request
        reviews](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)."
        For information about the APIs to manage pull request reviews, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequestreview)
        or "[Pull request
        reviews](https://docs.github.com/enterprise-server@3.9/rest/pulls/reviews)"
        in the REST API documentation.


        For activity related to pull request review comments, pull request
        comments, or pull request review threads, use the
        `pull_request_review_comment`, `issue_comment`, or
        `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: A review on a pull request was dismissed.
      operationId: pull-request-review/dismissed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request_review
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-review-dismissed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request_review
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-review-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to a pull request
        review. A pull request review is a group of pull request review comments
        in addition to a body comment and a state. For more information, see
        "[About pull request
        reviews](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)."
        For information about the APIs to manage pull request reviews, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequestreview)
        or "[Pull request
        reviews](https://docs.github.com/enterprise-server@3.9/rest/pulls/reviews)"
        in the REST API documentation.


        For activity related to pull request review comments, pull request
        comments, or pull request review threads, use the
        `pull_request_review_comment`, `issue_comment`, or
        `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: The body comment on a pull request review was edited.
      operationId: pull-request-review/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request_review
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-review-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request_review
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-review-request-removed:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: >-
        A request for review by a person or team was removed from a pull
        request.
      operationId: pull-request/review-request-removed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-review-request-removed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-review-requested:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: >-
        Review by a person or team was requested for a pull request. For more
        information, see "[Requesting a pull request
        review](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/requesting-a-pull-request-review)."
      operationId: pull-request/review-requested
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-review-requested'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-review-submitted:
    post:
      summary: >-
        This event occurs when there is activity relating to a pull request
        review. A pull request review is a group of pull request review comments
        in addition to a body comment and a state. For more information, see
        "[About pull request
        reviews](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)."
        For information about the APIs to manage pull request reviews, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequestreview)
        or "[Pull request
        reviews](https://docs.github.com/enterprise-server@3.9/rest/pulls/reviews)"
        in the REST API documentation.


        For activity related to pull request review comments, pull request
        comments, or pull request review threads, use the
        `pull_request_review_comment`, `issue_comment`, or
        `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: A review on a pull request was submitted.
      operationId: pull-request-review/submitted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request_review
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-review-submitted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request_review
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-review-thread-resolved:
    post:
      summary: >-
        This event occurs when there is activity relating to a comment thread on
        a pull request. For more information, see "[About pull request
        reviews](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)."
        For information about the APIs to manage pull request reviews, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequestreviewthread)
        or "[Pull request review
        comments](https://docs.github.com/enterprise-server@3.9/rest/pulls/comments)"
        in the REST API documentation.


        For activity related to pull request review comments, pull request
        comments, or pull request reviews, use the
        `pull_request_review_comment`, `issue_comment`, or `pull_request_review`
        events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: A comment thread on a pull request was marked as resolved.
      operationId: pull-request-review-thread/resolved
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request_review_thread
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-review-thread-resolved'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request_review_thread
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-review-thread-unresolved:
    post:
      summary: >-
        This event occurs when there is activity relating to a comment thread on
        a pull request. For more information, see "[About pull request
        reviews](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)."
        For information about the APIs to manage pull request reviews, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequestreviewthread)
        or "[Pull request review
        comments](https://docs.github.com/enterprise-server@3.9/rest/pulls/comments)"
        in the REST API documentation.


        For activity related to pull request review comments, pull request
        comments, or pull request reviews, use the
        `pull_request_review_comment`, `issue_comment`, or `pull_request_review`
        events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: >-
        A previously resolved comment thread on a pull request was marked as
        unresolved.
      operationId: pull-request-review-thread/unresolved
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request_review_thread
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/webhook-pull-request-review-thread-unresolved
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request_review_thread
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-synchronize:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: >-
        A pull request's head branch was updated. For example, the head branch
        was updated from the base branch or new commits were pushed to the head
        branch.
      operationId: pull-request/synchronize
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-synchronize'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-unassigned:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: A user was unassigned from a pull request.
      operationId: pull-request/unassigned
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-unassigned'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-unlabeled:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: A label was removed from a pull request.
      operationId: pull-request/unlabeled
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-unlabeled'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  pull-request-unlocked:
    post:
      summary: >-
        This event occurs when there is activity on a pull request. For more
        information, see "[About pull
        requests](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)."
        For information about the APIs to manage pull requests, see [the GraphQL
        API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#pullrequest)
        or
        "[Pulls](https://docs.github.com/enterprise-server@3.9/rest/pulls/pulls)"
        in the REST API documentation.


        For activity related to pull request reviews, pull request review
        comments, pull request comments, or pull request review threads, use the
        `pull_request_review`, `pull_request_review_comment`, `issue_comment`,
        or `pull_request_review_thread` events instead.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Pull requests" repository permission.
      description: >-
        Conversation on a pull request was unlocked. For more information, see
        "[Locking
        conversations](https://docs.github.com/enterprise-server@3.9/communities/moderating-comments-and-conversations/locking-conversations)."
      operationId: pull-request/unlocked
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#pull_request
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-pull-request-unlocked'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: pull_request
        supported-webhook-types:
          - repository
          - organization
          - app
  push:
    post:
      summary: >-
        This event occurs when there is a push to a repository branch. This
        includes when a commit is pushed, when a commit tag is pushed,

        when a branch is deleted, when a tag is deleted, or when a repository is
        created from a template. To subscribe to only branch

        and tag deletions, use the [`delete`](#delete) webhook event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Contents" repository permission.


        **Note**: An event will not be created when more than three tags are
        pushed at once.
      operationId: push
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#push
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-push'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: push
        supported-webhook-types:
          - repository
          - organization
          - app
  registry-package-published:
    post:
      summary: >-
        This event occurs when there is activity relating to GitHub Packages.
        For more information, see "[Introduction to GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/introduction-to-github-packages)."
        For information about the APIs to manage GitHub Packages, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#package)
        or
        "[Packages](https://docs.github.com/enterprise-server@3.9/rest/packages)"
        in the REST API documentation.


        To install this event on a GitHub App, the app must have at least
        read-level access for the "Packages" repository permission.


        **Note**: GitHub recommends that you use the newer `package` event
        instead.
      description: A package was published to a registry.
      operationId: registry-package/published
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#registry_package
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-registry-package-published'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: registry_package
        supported-webhook-types:
          - repository
          - organization
          - app
  registry-package-updated:
    post:
      summary: >-
        This event occurs when there is activity relating to GitHub Packages.
        For more information, see "[Introduction to GitHub
        Packages](https://docs.github.com/enterprise-server@3.9/packages/learn-github-packages/introduction-to-github-packages)."
        For information about the APIs to manage GitHub Packages, see [the
        GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#package)
        or
        "[Packages](https://docs.github.com/enterprise-server@3.9/rest/packages)"
        in the REST API documentation.


        To install this event on a GitHub App, the app must have at least
        read-level access for the "Packages" repository permission.


        **Note**: GitHub recommends that you use the newer `package` event
        instead.
      description: A package that was previously published to a registry was updated.
      operationId: registry-package/updated
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#registry_package
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-registry-package-updated'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: registry_package
        supported-webhook-types:
          - repository
          - organization
          - app
  release-created:
    post:
      summary: >-
        This event occurs when there is activity relating to releases. For more
        information, see "[About
        releases](https://docs.github.com/enterprise-server@3.9/repositories/releasing-projects-on-github/about-releases)."
        For information about the APIs to manage releases, see [the GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#release)
        or
        "[Releases](https://docs.github.com/enterprise-server@3.9/rest/releases)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Contents" repository permission.
      description: >-
        A draft was saved, or a release or pre-release was published without
        previously being saved as a draft.
      operationId: release/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#release
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-release-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: release
        supported-webhook-types:
          - repository
          - organization
          - app
  release-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to releases. For more
        information, see "[About
        releases](https://docs.github.com/enterprise-server@3.9/repositories/releasing-projects-on-github/about-releases)."
        For information about the APIs to manage releases, see [the GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#release)
        or
        "[Releases](https://docs.github.com/enterprise-server@3.9/rest/releases)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Contents" repository permission.
      description: A release, pre-release, or draft release was deleted.
      operationId: release/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#release
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-release-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: release
        supported-webhook-types:
          - repository
          - organization
          - app
  release-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to releases. For more
        information, see "[About
        releases](https://docs.github.com/enterprise-server@3.9/repositories/releasing-projects-on-github/about-releases)."
        For information about the APIs to manage releases, see [the GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#release)
        or
        "[Releases](https://docs.github.com/enterprise-server@3.9/rest/releases)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Contents" repository permission.
      description: >-
        The details of a release, pre-release, or draft release were edited. For
        more information, see "[Managing releases in a
        repository](https://docs.github.com/enterprise-server@3.9/repositories/releasing-projects-on-github/managing-releases-in-a-repository#editing-a-release)."
      operationId: release/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#release
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-release-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: release
        supported-webhook-types:
          - repository
          - organization
          - app
  release-prereleased:
    post:
      summary: >-
        This event occurs when there is activity relating to releases. For more
        information, see "[About
        releases](https://docs.github.com/enterprise-server@3.9/repositories/releasing-projects-on-github/about-releases)."
        For information about the APIs to manage releases, see [the GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#release)
        or
        "[Releases](https://docs.github.com/enterprise-server@3.9/rest/releases)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Contents" repository permission.
      description: >-
        A release was created and identified as a pre-release. A pre-release is
        a release that is not ready for production and may be unstable.
      operationId: release/prereleased
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#release
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-release-prereleased'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: release
        supported-webhook-types:
          - repository
          - organization
          - app
  release-published:
    post:
      summary: >-
        This event occurs when there is activity relating to releases. For more
        information, see "[About
        releases](https://docs.github.com/enterprise-server@3.9/repositories/releasing-projects-on-github/about-releases)."
        For information about the APIs to manage releases, see [the GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#release)
        or
        "[Releases](https://docs.github.com/enterprise-server@3.9/rest/releases)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Contents" repository permission.
      description: A release, pre-release, or draft of a release was published.
      operationId: release/published
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#release
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-release-published'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: release
        supported-webhook-types:
          - repository
          - organization
          - app
  release-released:
    post:
      summary: >-
        This event occurs when there is activity relating to releases. For more
        information, see "[About
        releases](https://docs.github.com/enterprise-server@3.9/repositories/releasing-projects-on-github/about-releases)."
        For information about the APIs to manage releases, see [the GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#release)
        or
        "[Releases](https://docs.github.com/enterprise-server@3.9/rest/releases)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Contents" repository permission.
      description: A release was published, or a pre-release was changed to a release.
      operationId: release/released
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#release
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-release-released'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: release
        supported-webhook-types:
          - repository
          - organization
          - app
  release-unpublished:
    post:
      summary: >-
        This event occurs when there is activity relating to releases. For more
        information, see "[About
        releases](https://docs.github.com/enterprise-server@3.9/repositories/releasing-projects-on-github/about-releases)."
        For information about the APIs to manage releases, see [the GraphQL API
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#release)
        or
        "[Releases](https://docs.github.com/enterprise-server@3.9/rest/releases)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Contents" repository permission.
      description: A release or pre-release was unpublished.
      operationId: release/unpublished
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#release
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-release-unpublished'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: release
        supported-webhook-types:
          - repository
          - organization
          - app
  repository-anonymous-access-disabled:
    post:
      summary: >-
        This event occurs when there is activity relating to repositories. For
        more information, see "[About
        repositories](https://docs.github.com/enterprise-server@3.9/repositories/creating-and-managing-repositories/about-repositories)."
        For information about the APIs to manage repositories, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#repository)
        or
        "[Repositories](https://docs.github.com/enterprise-server@3.9/rest/repos)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      description: >-
        Someone disabled anonymous Git read access to the repository. For more
        information, see "[Enabling anonymous Git read access for a
        repository](/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/enabling-anonymous-git-read-access-for-a-repository)."
      operationId: repository/anonymous-access-disabled
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#repository
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/webhook-repository-anonymous-access-disabled
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: repository
        supported-webhook-types:
          - app
          - business
          - organization
          - repository
  repository-anonymous-access-enabled:
    post:
      summary: >-
        This event occurs when there is activity relating to repositories. For
        more information, see "[About
        repositories](https://docs.github.com/enterprise-server@3.9/repositories/creating-and-managing-repositories/about-repositories)."
        For information about the APIs to manage repositories, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#repository)
        or
        "[Repositories](https://docs.github.com/enterprise-server@3.9/rest/repos)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      description: >-
        Someone enabled anonymous Git read access to the repository. For more
        information, see "[Enabling anonymous Git read access for a
        repository](/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/enabling-anonymous-git-read-access-for-a-repository)."
      operationId: repository/anonymous-access-enabled
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#repository
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-repository-anonymous-access-enabled'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: repository
        supported-webhook-types:
          - app
          - business
          - organization
          - repository
  repository-archived:
    post:
      summary: >-
        This event occurs when there is activity relating to repositories. For
        more information, see "[About
        repositories](https://docs.github.com/enterprise-server@3.9/repositories/creating-and-managing-repositories/about-repositories)."
        For information about the APIs to manage repositories, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#repository)
        or
        "[Repositories](https://docs.github.com/enterprise-server@3.9/rest/repos)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      description: A repository was archived.
      operationId: repository/archived
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#repository
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-repository-archived'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: repository
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  repository-created:
    post:
      summary: >-
        This event occurs when there is activity relating to repositories. For
        more information, see "[About
        repositories](https://docs.github.com/enterprise-server@3.9/repositories/creating-and-managing-repositories/about-repositories)."
        For information about the APIs to manage repositories, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#repository)
        or
        "[Repositories](https://docs.github.com/enterprise-server@3.9/rest/repos)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      description: A repository was created.
      operationId: repository/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#repository
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-repository-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: repository
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  repository-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to repositories. For
        more information, see "[About
        repositories](https://docs.github.com/enterprise-server@3.9/repositories/creating-and-managing-repositories/about-repositories)."
        For information about the APIs to manage repositories, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#repository)
        or
        "[Repositories](https://docs.github.com/enterprise-server@3.9/rest/repos)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      description: >-
        A repository was deleted. GitHub Apps and repository webhooks will not
        receive this event.
      operationId: repository/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#repository
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-repository-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: repository
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  repository-dispatch-sample.collected:
    post:
      summary: >-
        This event occurs when a GitHub App sends a `POST` request to
        `/repos/{owner}/{repo}/dispatches`. For more information, see [the REST
        API documentation for creating a repository dispatch
        event](https://docs.github.com/enterprise-server@3.9/rest/repos/repos#create-a-repository-dispatch-event).


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Contents" repository permission.
      description: >-
        The `event_type` that was specified in the `POST
        /repos/{owner}/{repo}/dispatches` request body.
      operationId: repository-dispatch/sample.collected
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#repository_dispatch
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-repository-dispatch-sample'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: repository_dispatch
        supported-webhook-types:
          - app
  repository-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to repositories. For
        more information, see "[About
        repositories](https://docs.github.com/enterprise-server@3.9/repositories/creating-and-managing-repositories/about-repositories)."
        For information about the APIs to manage repositories, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#repository)
        or
        "[Repositories](https://docs.github.com/enterprise-server@3.9/rest/repos)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      description: >-
        The topics, default branch, description, or homepage of a repository was
        changed.
      operationId: repository/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#repository
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-repository-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: repository
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  repository-privatized:
    post:
      summary: >-
        This event occurs when there is activity relating to repositories. For
        more information, see "[About
        repositories](https://docs.github.com/enterprise-server@3.9/repositories/creating-and-managing-repositories/about-repositories)."
        For information about the APIs to manage repositories, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#repository)
        or
        "[Repositories](https://docs.github.com/enterprise-server@3.9/rest/repos)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      description: The visibility of a repository was changed to `private`.
      operationId: repository/privatized
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#repository
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-repository-privatized'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: repository
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  repository-publicized:
    post:
      summary: >-
        This event occurs when there is activity relating to repositories. For
        more information, see "[About
        repositories](https://docs.github.com/enterprise-server@3.9/repositories/creating-and-managing-repositories/about-repositories)."
        For information about the APIs to manage repositories, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#repository)
        or
        "[Repositories](https://docs.github.com/enterprise-server@3.9/rest/repos)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      description: The visibility of a repository was changed to `public`.
      operationId: repository/publicized
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#repository
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-repository-publicized'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: repository
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  repository-renamed:
    post:
      summary: >-
        This event occurs when there is activity relating to repositories. For
        more information, see "[About
        repositories](https://docs.github.com/enterprise-server@3.9/repositories/creating-and-managing-repositories/about-repositories)."
        For information about the APIs to manage repositories, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#repository)
        or
        "[Repositories](https://docs.github.com/enterprise-server@3.9/rest/repos)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      description: The name of a repository was changed.
      operationId: repository/renamed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#repository
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-repository-renamed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: repository
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  repository-transferred:
    post:
      summary: >-
        This event occurs when there is activity relating to repositories. For
        more information, see "[About
        repositories](https://docs.github.com/enterprise-server@3.9/repositories/creating-and-managing-repositories/about-repositories)."
        For information about the APIs to manage repositories, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#repository)
        or
        "[Repositories](https://docs.github.com/enterprise-server@3.9/rest/repos)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      description: >-
        Ownership of the repository was transferred to a user or organization
        account. This event is only sent to the account where the ownership is
        transferred. To receive the `repository.transferred` event, the new
        owner account must have the GitHub App installed, and the App must be
        subscribed to "Repository" events.
      operationId: repository/transferred
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#repository
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-repository-transferred'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: repository
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  repository-unarchived:
    post:
      summary: >-
        This event occurs when there is activity relating to repositories. For
        more information, see "[About
        repositories](https://docs.github.com/enterprise-server@3.9/repositories/creating-and-managing-repositories/about-repositories)."
        For information about the APIs to manage repositories, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#repository)
        or
        "[Repositories](https://docs.github.com/enterprise-server@3.9/rest/repos)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      description: A previously archived repository was unarchived.
      operationId: repository/unarchived
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#repository
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-repository-unarchived'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: repository
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  repository-vulnerability-alert-create:
    post:
      summary: >-
        This event occurs when there is activity relating to a security
        vulnerability alert in a repository.


        **Note**: This event is deprecated. Use the `dependabot_alert` event
        instead.
      description: A repository vulnerability alert was created.
      operationId: repository-vulnerability-alert/create
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#repository_vulnerability_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/webhook-repository-vulnerability-alert-create
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: repository_vulnerability_alert
        supported-webhook-types:
          - repository
          - organization
  repository-vulnerability-alert-dismiss:
    post:
      summary: >-
        This event occurs when there is activity relating to a security
        vulnerability alert in a repository.


        **Note**: This event is deprecated. Use the `dependabot_alert` event
        instead.
      description: A repository vulnerability alert was dismissed.
      operationId: repository-vulnerability-alert/dismiss
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#repository_vulnerability_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/webhook-repository-vulnerability-alert-dismiss
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: repository_vulnerability_alert
        supported-webhook-types:
          - repository
          - organization
  repository-vulnerability-alert-reopen:
    post:
      summary: >-
        This event occurs when there is activity relating to a security
        vulnerability alert in a repository.


        **Note**: This event is deprecated. Use the `dependabot_alert` event
        instead.
      description: >-
        A previously dismissed or resolved repository vulnerability alert was
        reopened.
      operationId: repository-vulnerability-alert/reopen
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#repository_vulnerability_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/webhook-repository-vulnerability-alert-reopen
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: repository_vulnerability_alert
        supported-webhook-types:
          - repository
          - organization
  repository-vulnerability-alert-resolve:
    post:
      summary: >-
        This event occurs when there is activity relating to a security
        vulnerability alert in a repository.


        **Note**: This event is deprecated. Use the `dependabot_alert` event
        instead.
      description: A repository vulnerability alert was marked as resolved.
      operationId: repository-vulnerability-alert/resolve
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#repository_vulnerability_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/webhook-repository-vulnerability-alert-resolve
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: repository_vulnerability_alert
        supported-webhook-types:
          - repository
          - organization
  secret-scanning-alert-created:
    post:
      summary: >-
        This event occurs when there is activity relating to a secret scanning
        alert. For more information about secret scanning, see "[About secret
        scanning](https://docs.github.com/enterprise-server@3.9/code-security/secret-scanning/about-secret-scanning)."
        For information about the API to manage secret scanning alerts, see
        "[Secret
        scanning](https://docs.github.com/enterprise-server@3.9/rest/secret-scanning)"
        in the REST API documentation.


        For activity relating to secret scanning alert locations, use the
        `secret_scanning_alert_location` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Secret scanning alerts" repository permission.
      description: A secret scanning alert was created.
      operationId: secret-scanning-alert/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#secret_scanning_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-secret-scanning-alert-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: secret_scanning_alert
        supported-webhook-types:
          - repository
          - organization
          - app
  secret-scanning-alert-location-created:
    post:
      summary: >-
        This event occurs when there is activity relating to the locations of a
        secret in a secret scanning alert.


        For more information about secret scanning, see "[About secret
        scanning](https://docs.github.com/enterprise-server@3.9/code-security/secret-scanning/about-secret-scanning)."
        For information about the API to manage secret scanning alerts, see
        "[Secret
        scanning](https://docs.github.com/enterprise-server@3.9/rest/secret-scanning)"
        in the REST API documentation.


        For activity relating to secret scanning alerts, use the
        `secret_scanning_alert` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Secret scanning alerts" repository permission.
      description: >-
        A new instance of a previously detected secret was detected in a
        repository, and the location of the secret was added to the existing
        alert.
      operationId: secret-scanning-alert-location/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#secret_scanning_alert_location
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/webhook-secret-scanning-alert-location-created
            examples:
              default:
                $ref: '#/components/examples/secret-scanning-alert-location-created'
          application/x-www-form-urlencoded:
            schema:
              $ref: >-
                #/components/schemas/webhook-secret-scanning-alert-location-created-form-encoded
            examples:
              default:
                $ref: >-
                  #/components/examples/secret-scanning-alert-location-created-form-encoded
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        enabledForGitHubApps: true
        category: webhooks
        subcategory: secret_scanning_alert_location
        supported-webhook-types:
          - repository
          - organization
          - app
  secret-scanning-alert-reopened:
    post:
      summary: >-
        This event occurs when there is activity relating to a secret scanning
        alert. For more information about secret scanning, see "[About secret
        scanning](https://docs.github.com/enterprise-server@3.9/code-security/secret-scanning/about-secret-scanning)."
        For information about the API to manage secret scanning alerts, see
        "[Secret
        scanning](https://docs.github.com/enterprise-server@3.9/rest/secret-scanning)"
        in the REST API documentation.


        For activity relating to secret scanning alert locations, use the
        `secret_scanning_alert_location` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Secret scanning alerts" repository permission.
      description: A previously closed secret scanning alert was reopened.
      operationId: secret-scanning-alert/reopened
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#secret_scanning_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-secret-scanning-alert-reopened'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: secret_scanning_alert
        supported-webhook-types:
          - repository
          - organization
          - app
  secret-scanning-alert-resolved:
    post:
      summary: >-
        This event occurs when there is activity relating to a secret scanning
        alert. For more information about secret scanning, see "[About secret
        scanning](https://docs.github.com/enterprise-server@3.9/code-security/secret-scanning/about-secret-scanning)."
        For information about the API to manage secret scanning alerts, see
        "[Secret
        scanning](https://docs.github.com/enterprise-server@3.9/rest/secret-scanning)"
        in the REST API documentation.


        For activity relating to secret scanning alert locations, use the
        `secret_scanning_alert_location` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Secret scanning alerts" repository permission.
      description: A secret scanning alert was closed.
      operationId: secret-scanning-alert/resolved
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#secret_scanning_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-secret-scanning-alert-resolved'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: secret_scanning_alert
        supported-webhook-types:
          - repository
          - organization
          - app
  secret-scanning-alert-revoked:
    post:
      summary: >-
        This event occurs when there is activity relating to a secret scanning
        alert. For more information about secret scanning, see "[About secret
        scanning](https://docs.github.com/enterprise-server@3.9/code-security/secret-scanning/about-secret-scanning)."
        For information about the API to manage secret scanning alerts, see
        "[Secret
        scanning](https://docs.github.com/enterprise-server@3.9/rest/secret-scanning)"
        in the REST API documentation.


        For activity relating to secret scanning alert locations, use the
        `secret_scanning_alert_location` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Secret scanning alerts" repository permission.
      description: A secret scanning alert was marked as revoked.
      operationId: secret-scanning-alert/revoked
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#secret_scanning_alert
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-secret-scanning-alert-revoked'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: secret_scanning_alert
        supported-webhook-types:
          - repository
          - organization
          - app
  security-advisory-published:
    post:
      summary: >-
        This event occurs when there is activity relating to a global security
        advisory that was reviewed by GitHub. A GitHub-reviewed global security
        advisory provides information about security vulnerabilities or malware
        that have been mapped to packages in ecosystems we support. For more
        information about global security advisories, see "[About global
        security
        advisories](https://docs.github.com/enterprise-server@3.9/code-security/security-advisories/working-with-global-security-advisories-from-the-github-advisory-database/about-global-security-advisories)."
        For information about the API to manage security advisories, see [the
        REST API
        documentation](https://docs.github.com/enterprise-server@3.9/rest/security-advisories/global-advisories)
        or [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#securityadvisory).


        GitHub Dependabot alerts are also powered by the security advisory
        dataset. For more information, see "[About Dependabot
        alerts](https://docs.github.com/enterprise-server@3.9/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)."
      description: A security advisory was published to the GitHub community.
      operationId: security-advisory/published
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#security_advisory
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-security-advisory-published'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: security_advisory
        supported-webhook-types:
          - app
  security-advisory-updated:
    post:
      summary: >-
        This event occurs when there is activity relating to a global security
        advisory that was reviewed by GitHub. A GitHub-reviewed global security
        advisory provides information about security vulnerabilities or malware
        that have been mapped to packages in ecosystems we support. For more
        information about global security advisories, see "[About global
        security
        advisories](https://docs.github.com/enterprise-server@3.9/code-security/security-advisories/working-with-global-security-advisories-from-the-github-advisory-database/about-global-security-advisories)."
        For information about the API to manage security advisories, see [the
        REST API
        documentation](https://docs.github.com/enterprise-server@3.9/rest/security-advisories/global-advisories)
        or [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#securityadvisory).


        GitHub Dependabot alerts are also powered by the security advisory
        dataset. For more information, see "[About Dependabot
        alerts](https://docs.github.com/enterprise-server@3.9/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)."
      description: The metadata or description of a security advisory was changed.
      operationId: security-advisory/updated
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#security_advisory
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-security-advisory-updated'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: security_advisory
        supported-webhook-types:
          - app
  security-advisory-withdrawn:
    post:
      summary: >-
        This event occurs when there is activity relating to a global security
        advisory that was reviewed by GitHub. A GitHub-reviewed global security
        advisory provides information about security vulnerabilities or malware
        that have been mapped to packages in ecosystems we support. For more
        information about global security advisories, see "[About global
        security
        advisories](https://docs.github.com/enterprise-server@3.9/code-security/security-advisories/working-with-global-security-advisories-from-the-github-advisory-database/about-global-security-advisories)."
        For information about the API to manage security advisories, see [the
        REST API
        documentation](https://docs.github.com/enterprise-server@3.9/rest/security-advisories/global-advisories)
        or [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#securityadvisory).


        GitHub Dependabot alerts are also powered by the security advisory
        dataset. For more information, see "[About Dependabot
        alerts](https://docs.github.com/enterprise-server@3.9/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)."
      description: A previously published security advisory was withdrawn.
      operationId: security-advisory/withdrawn
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#security_advisory
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-security-advisory-withdrawn'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: security_advisory
        supported-webhook-types:
          - app
  security-and-analysis:
    post:
      summary: >-
        This event occurs when code security and analysis features are enabled
        or disabled for a repository. For more information, see "[GitHub
        security
        features](https://docs.github.com/enterprise-server@3.9/code-security/getting-started/github-security-features)."


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Administration" repository permission.
      operationId: security-and-analysis
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#security_and_analysis
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-security-and-analysis'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: security_and_analysis
        supported-webhook-types:
          - repository
          - organization
          - app
  sponsorship-cancelled:
    post:
      summary: >-
        This event occurs when there is activity relating to a sponsorship
        listing. For more information, see "[About GitHub
        Sponsors](https://docs.github.com/enterprise-server@3.9/sponsors/getting-started-with-github-sponsors/about-github-sponsors)."
        For information about the API to manage sponsors, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#sponsorship).


        You can only create a sponsorship webhook on GitHub.com. For more
        information, see "[Configuring webhooks for events in your sponsored
        account](https://docs.github.com/enterprise-server@3.9/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
      description: >-
        A sponsorship was cancelled and the last billing cycle has ended.


        This event is only sent when a recurring (monthly) sponsorship is
        cancelled; it is not sent for one-time sponsorships.
      operationId: sponsorship/cancelled
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#sponsorship
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-sponsorship-cancelled'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: sponsorship
        supported-webhook-types:
          - sponsors_listing
  sponsorship-created:
    post:
      summary: >-
        This event occurs when there is activity relating to a sponsorship
        listing. For more information, see "[About GitHub
        Sponsors](https://docs.github.com/enterprise-server@3.9/sponsors/getting-started-with-github-sponsors/about-github-sponsors)."
        For information about the API to manage sponsors, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#sponsorship).


        You can only create a sponsorship webhook on GitHub.com. For more
        information, see "[Configuring webhooks for events in your sponsored
        account](https://docs.github.com/enterprise-server@3.9/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
      description: >-
        A sponsor created a sponsorship for a sponsored account. This event
        occurs once the payment is successfully processed.
      operationId: sponsorship/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#sponsorship
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-sponsorship-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: sponsorship
        supported-webhook-types:
          - sponsors_listing
  sponsorship-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to a sponsorship
        listing. For more information, see "[About GitHub
        Sponsors](https://docs.github.com/enterprise-server@3.9/sponsors/getting-started-with-github-sponsors/about-github-sponsors)."
        For information about the API to manage sponsors, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#sponsorship).


        You can only create a sponsorship webhook on GitHub.com. For more
        information, see "[Configuring webhooks for events in your sponsored
        account](https://docs.github.com/enterprise-server@3.9/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
      description: >-
        A monthly sponsor changed who can see their sponsorship. If you
        recognize your sponsors publicly, you may want to update your sponsor
        recognition to reflect the change when this event occurs.
      operationId: sponsorship/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#sponsorship
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-sponsorship-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: sponsorship
        supported-webhook-types:
          - sponsors_listing
  sponsorship-pending-cancellation:
    post:
      summary: >-
        This event occurs when there is activity relating to a sponsorship
        listing. For more information, see "[About GitHub
        Sponsors](https://docs.github.com/enterprise-server@3.9/sponsors/getting-started-with-github-sponsors/about-github-sponsors)."
        For information about the API to manage sponsors, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#sponsorship).


        You can only create a sponsorship webhook on GitHub.com. For more
        information, see "[Configuring webhooks for events in your sponsored
        account](https://docs.github.com/enterprise-server@3.9/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
      description: >-
        A sponsor scheduled a cancellation for their sponsorship. The
        cancellation will become effective on their next billing date.


        This event is only sent when a recurring (monthly) sponsorship is
        cancelled; it is not sent for one-time sponsorships.
      operationId: sponsorship/pending-cancellation
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#sponsorship
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-sponsorship-pending-cancellation'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: sponsorship
        supported-webhook-types:
          - sponsors_listing
  sponsorship-pending-tier-change:
    post:
      summary: >-
        This event occurs when there is activity relating to a sponsorship
        listing. For more information, see "[About GitHub
        Sponsors](https://docs.github.com/enterprise-server@3.9/sponsors/getting-started-with-github-sponsors/about-github-sponsors)."
        For information about the API to manage sponsors, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#sponsorship).


        You can only create a sponsorship webhook on GitHub.com. For more
        information, see "[Configuring webhooks for events in your sponsored
        account](https://docs.github.com/enterprise-server@3.9/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
      description: >-
        A sponsor scheduled a downgrade to a lower sponsorship tier. The new
        tier will become effective on their next billing date.
      operationId: sponsorship/pending-tier-change
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#sponsorship
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-sponsorship-pending-tier-change'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: sponsorship
        supported-webhook-types:
          - sponsors_listing
  sponsorship-tier-changed:
    post:
      summary: >-
        This event occurs when there is activity relating to a sponsorship
        listing. For more information, see "[About GitHub
        Sponsors](https://docs.github.com/enterprise-server@3.9/sponsors/getting-started-with-github-sponsors/about-github-sponsors)."
        For information about the API to manage sponsors, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#sponsorship).


        You can only create a sponsorship webhook on GitHub.com. For more
        information, see "[Configuring webhooks for events in your sponsored
        account](https://docs.github.com/enterprise-server@3.9/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account)."
      description: >-
        A sponsor changed the tier of their sponsorship and the change has taken
        effect. If a sponsor upgraded their tier, the change took effect
        immediately. If a sponsor downgraded their tier, the change took effect
        at the beginning of the sponsor's next billing cycle.
      operationId: sponsorship/tier-changed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#sponsorship
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-sponsorship-tier-changed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: sponsorship
        supported-webhook-types:
          - sponsors_listing
  star-created:
    post:
      summary: >-
        This event occurs when there is activity relating to repository stars.
        For more information about stars, see "[Saving repositories with
        stars](https://docs.github.com/enterprise-server@3.9/get-started/exploring-projects-on-github/saving-repositories-with-stars)."
        For information about the APIs to manage stars, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#starredrepositoryconnection)
        or
        "[Starring](https://docs.github.com/enterprise-server@3.9/rest/activity/starring)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      description: Someone starred a repository.
      operationId: star/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#star
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-star-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: star
        supported-webhook-types:
          - repository
          - organization
          - app
  star-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to repository stars.
        For more information about stars, see "[Saving repositories with
        stars](https://docs.github.com/enterprise-server@3.9/get-started/exploring-projects-on-github/saving-repositories-with-stars)."
        For information about the APIs to manage stars, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#starredrepositoryconnection)
        or
        "[Starring](https://docs.github.com/enterprise-server@3.9/rest/activity/starring)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      description: Someone unstarred the repository.
      operationId: star/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#star
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-star-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: star
        supported-webhook-types:
          - repository
          - organization
          - app
  status:
    post:
      summary: >-
        This event occurs when the status of a Git commit changes. For example,
        commits can be marked as `error`, `failure`, `pending`, or `success`.
        For more information, see "[About status
        checks](https://docs.github.com/enterprise-server@3.9/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks)."
        For information about the APIs to manage commit statuses, see [the
        GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#status)
        or "[Commit
        statuses](https://docs.github.com/enterprise-server@3.9/rest/commits/statuses)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Commit statuses" repository permission.
      operationId: status
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#status
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-status'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: status
        supported-webhook-types:
          - repository
          - organization
          - app
  team-add:
    post:
      summary: >-
        This event occurs when a team is added to a repository.

        For more information, see "[Managing teams and people with access to
        your
        repository](https://docs.github.com/enterprise-server@3.9/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/managing-teams-and-people-with-access-to-your-repository)."


        For activity relating to teams, see the `teams` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Members" organization permission.
      operationId: team-add
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#team_add
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-team-add'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: team_add
        supported-webhook-types:
          - repository
          - organization
          - app
  team-added-to-repository:
    post:
      summary: >-
        This event occurs when there is activity relating to teams in an
        organization.

        For more information, see "[About
        teams](https://docs.github.com/enterprise-server@3.9/organizations/organizing-members-into-teams/about-teams)."


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Members" organization permission.
      description: A team was granted access to a repository.
      operationId: team/added-to-repository
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#team
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-team-added-to-repository'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: team
        supported-webhook-types:
          - organization
          - business
          - app
  team-created:
    post:
      summary: >-
        This event occurs when there is activity relating to teams in an
        organization.

        For more information, see "[About
        teams](https://docs.github.com/enterprise-server@3.9/organizations/organizing-members-into-teams/about-teams)."


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Members" organization permission.
      description: A team was created.
      operationId: team/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#team
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-team-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: team
        supported-webhook-types:
          - organization
          - business
          - app
  team-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to teams in an
        organization.

        For more information, see "[About
        teams](https://docs.github.com/enterprise-server@3.9/organizations/organizing-members-into-teams/about-teams)."


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Members" organization permission.
      description: A team was deleted.
      operationId: team/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#team
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-team-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: team
        supported-webhook-types:
          - organization
          - business
          - app
  team-edited:
    post:
      summary: >-
        This event occurs when there is activity relating to teams in an
        organization.

        For more information, see "[About
        teams](https://docs.github.com/enterprise-server@3.9/organizations/organizing-members-into-teams/about-teams)."


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Members" organization permission.
      description: The name, description, or visibility of a team was changed.
      operationId: team/edited
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#team
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-team-edited'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: team
        supported-webhook-types:
          - organization
          - business
          - app
  team-removed-from-repository:
    post:
      summary: >-
        This event occurs when there is activity relating to teams in an
        organization.

        For more information, see "[About
        teams](https://docs.github.com/enterprise-server@3.9/organizations/organizing-members-into-teams/about-teams)."


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Members" organization permission.
      description: A team's access to a repository was removed.
      operationId: team/removed-from-repository
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#team
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-team-removed-from-repository'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: team
        supported-webhook-types:
          - organization
          - business
          - app
  user-created:
    post:
      summary: >-
        This event occurs when there is activity relating to user accounts in an
        enterprise.
      description: A user account was added to the enterprise.
      operationId: user/created
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#user
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-user-created'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: true
        category: webhooks
        subcategory: user
        supported-webhook-types:
          - business
  user-deleted:
    post:
      summary: >-
        This event occurs when there is activity relating to user accounts in an
        enterprise.
      description: A user account was removed from the enterprise.
      operationId: user/deleted
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#user
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-user-deleted'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: true
        category: webhooks
        subcategory: user
        supported-webhook-types:
          - business
  watch-started:
    post:
      summary: >-
        This event occurs when there is activity relating to watching, or
        subscribing to, a repository. For more information about watching, see
        "[Managing your
        subscriptions](https://docs.github.com/enterprise-server@3.9/account-and-profile/managing-subscriptions-and-notifications-on-github/managing-subscriptions-for-activity-on-github/managing-your-subscriptions)."
        For information about the APIs to manage watching, see
        "[Watching](https://docs.github.com/enterprise-server@3.9/rest/activity/watching)"
        in the REST API documentation.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Metadata" repository permission.
      description: Someone started watching the repository.
      operationId: watch/started
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#watch
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-watch-started'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: watch
        supported-webhook-types:
          - repository
          - organization
          - app
  workflow-dispatch:
    post:
      summary: >-
        This event occurs when a GitHub Actions workflow is manually triggered.
        For more information, see "[Manually running a
        workflow](https://docs.github.com/enterprise-server@3.9/actions/managing-workflow-runs/manually-running-a-workflow)."


        For activity relating to workflow runs, use the `workflow_run` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Contents" repository permission.
      operationId: workflow-dispatch
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#workflow_dispatch
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-workflow-dispatch'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: workflow_dispatch
        supported-webhook-types:
          - app
  workflow-job-completed:
    post:
      summary: >-
        This event occurs when there is activity relating to a job in a GitHub
        Actions workflow. For more information, see "[Using jobs in a
        workflow](https://docs.github.com/enterprise-server@3.9/actions/using-jobs/using-jobs-in-a-workflow)."
        For information about the API to manage workflow jobs, see "[Workflow
        jobs](https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-jobs)"
        in the REST API documentation.


        For activity relating to a workflow run instead of a job in a workflow
        run, use the `workflow_run` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Actions" repository permission.
      description: >-
        A job in a workflow run finished. This event occurs when a job in a
        workflow is completed, regardless of whether the job was successful or
        unsuccessful.
      operationId: workflow-job/completed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#workflow_job
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-workflow-job-completed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: workflow_job
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  workflow-job-in-progress:
    post:
      summary: >-
        This event occurs when there is activity relating to a job in a GitHub
        Actions workflow. For more information, see "[Using jobs in a
        workflow](https://docs.github.com/enterprise-server@3.9/actions/using-jobs/using-jobs-in-a-workflow)."
        For information about the API to manage workflow jobs, see "[Workflow
        jobs](https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-jobs)"
        in the REST API documentation.


        For activity relating to a workflow run instead of a job in a workflow
        run, use the `workflow_run` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Actions" repository permission.
      description: A job in a workflow run started processing on a runner.
      operationId: workflow-job/in-progress
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#workflow_job
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-workflow-job-in-progress'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: workflow_job
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  workflow-job-queued:
    post:
      summary: >-
        This event occurs when there is activity relating to a job in a GitHub
        Actions workflow. For more information, see "[Using jobs in a
        workflow](https://docs.github.com/enterprise-server@3.9/actions/using-jobs/using-jobs-in-a-workflow)."
        For information about the API to manage workflow jobs, see "[Workflow
        jobs](https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-jobs)"
        in the REST API documentation.


        For activity relating to a workflow run instead of a job in a workflow
        run, use the `workflow_run` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Actions" repository permission.
      description: A job in a workflow run was created.
      operationId: workflow-job/queued
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#workflow_job
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-workflow-job-queued'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: workflow_job
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  workflow-job-waiting:
    post:
      summary: >-
        This event occurs when there is activity relating to a job in a GitHub
        Actions workflow. For more information, see "[Using jobs in a
        workflow](https://docs.github.com/enterprise-server@3.9/actions/using-jobs/using-jobs-in-a-workflow)."
        For information about the API to manage workflow jobs, see "[Workflow
        jobs](https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-jobs)"
        in the REST API documentation.


        For activity relating to a workflow run instead of a job in a workflow
        run, use the `workflow_run` event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Actions" repository permission.
      description: A job in a workflow run was created and is waiting for approvals.
      operationId: workflow-job/waiting
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#workflow_job
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-workflow-job-waiting'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: workflow_job
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  workflow-run-completed:
    post:
      summary: >-
        This event occurs when there is activity relating to a run of a GitHub
        Actions workflow. For more information, see "[About
        workflows](https://docs.github.com/enterprise-server@3.9/actions/using-workflows/about-workflows)."
        For information about the APIs to manage workflow runs, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#workflowrun)
        or "[Workflow
        runs](https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs)"
        in the REST API documentation.


        For activity relating to a job in a workflow run, use the `workflow_job`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Actions" repository permission.
      description: >-
        A workflow run finished. This event occurs when a workflow run is
        completed, regardless of whether the workflow was successful or
        unsuccessful.
      operationId: workflow-run/completed
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#workflow_run
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-workflow-run-completed'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: workflow_run
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  workflow-run-in-progress:
    post:
      summary: >-
        This event occurs when there is activity relating to a run of a GitHub
        Actions workflow. For more information, see "[About
        workflows](https://docs.github.com/enterprise-server@3.9/actions/using-workflows/about-workflows)."
        For information about the APIs to manage workflow runs, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#workflowrun)
        or "[Workflow
        runs](https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs)"
        in the REST API documentation.


        For activity relating to a job in a workflow run, use the `workflow_job`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Actions" repository permission.
      description: A workflow run started processing on a runner.
      operationId: workflow-run/in-progress
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#workflow_run
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-workflow-run-in-progress'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: workflow_run
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
  workflow-run-requested:
    post:
      summary: >-
        This event occurs when there is activity relating to a run of a GitHub
        Actions workflow. For more information, see "[About
        workflows](https://docs.github.com/enterprise-server@3.9/actions/using-workflows/about-workflows)."
        For information about the APIs to manage workflow runs, see [the GraphQL
        documentation](https://docs.github.com/enterprise-server@3.9/graphql/reference/objects#workflowrun)
        or "[Workflow
        runs](https://docs.github.com/enterprise-server@3.9/rest/actions/workflow-runs)"
        in the REST API documentation.


        For activity relating to a job in a workflow run, use the `workflow_job`
        event.


        To subscribe to this event, a GitHub App must have at least read-level
        access for the "Actions" repository permission.
      description: A workflow run was triggered.
      operationId: workflow-run/requested
      externalDocs:
        url: >-
          https://docs.github.com/enterprise-server@3.9/webhooks/webhook-events-and-payloads#workflow_run
      parameters:
        - name: User-Agent
          in: header
          example: GitHub-Hookshot/123abc
          schema:
            type: string
        - name: X-Github-Hook-Id
          in: header
          example: 12312312
          schema:
            type: string
        - name: X-Github-Event
          in: header
          example: issues
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Id
          in: header
          example: 123123
          schema:
            type: string
        - name: X-Github-Hook-Installation-Target-Type
          in: header
          example: repository
          schema:
            type: string
        - name: X-GitHub-Delivery
          in: header
          example: 0b989ba4-242f-11e5-81e1-c7b6966d2516
          schema:
            type: string
        - name: X-Hub-Signature-256
          in: header
          example: sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e
          schema:
            type: string
        - name: X-GitHub-Enterprise-Version
          in: header
          example: 3.1.9
          schema:
            type: string
        - name: X-GitHub-Enterprise-Host
          in: header
          example: ghes.github.com
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-workflow-run-requested'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
      x-github:
        githubCloudOnly: false
        category: webhooks
        subcategory: workflow_run
        supported-webhook-types:
          - business
          - repository
          - organization
          - app
components:
  schemas:
    enterprise-repository-overview:
      title: Repository Enterprise Stats
      type: object
      properties:
        total_repos:
          type: integer
        root_repos:
          type: integer
        fork_repos:
          type: integer
        org_repos:
          type: integer
        total_pushes:
          type: integer
        total_wikis:
          type: integer
      required:
        - total_repos
        - root_repos
        - fork_repos
        - org_repos
        - total_pushes
        - total_wikis
    team-repository:
      title: Team Repository
      description: A team's access to a repository.
      type: object
      properties:
        id:
          description: Unique identifier of the repository
          example: 42
          type: integer
        node_id:
          type: string
          example: MDEwOlJlcG9zaXRvcnkxMjk2MjY5
        name:
          description: The name of the repository.
          type: string
          example: Team Environment
        full_name:
          type: string
          example: octocat/Hello-World
        license:
          $ref: '#/components/schemas/nullable-license-simple'
        forks:
          type: integer
        permissions:
          type: object
          properties:
            admin:
              type: boolean
            pull:
              type: boolean
            triage:
              type: boolean
            push:
              type: boolean
            maintain:
              type: boolean
          required:
            - admin
            - pull
            - push
        role_name:
          type: string
          example: admin
        owner:
          $ref: '#/components/schemas/nullable-simple-user'
        private:
          description: Whether the repository is private or public.
          default: false
          type: boolean
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World
        description:
          type: string
          example: This your first repo!
          nullable: true
        fork:
          type: boolean
        url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World
        archive_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
        assignees_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/assignees{/user}
        blobs_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
        branches_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/branches{/branch}
        collaborators_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
        comments_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/comments{/number}
        commits_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/commits{/sha}
        compare_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
        contents_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/contents/{+path}
        contributors_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/contributors
        deployments_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/deployments
        downloads_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/downloads
        events_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/events
        forks_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/forks
        git_commits_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
        git_refs_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
        git_tags_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
        git_url:
          type: string
          example: git:github.com/octocat/Hello-World.git
        issue_comment_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
        issue_events_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
        issues_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/issues{/number}
        keys_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
        labels_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/labels{/name}
        languages_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/languages
        merges_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/merges
        milestones_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/milestones{/number}
        notifications_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
        pulls_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/pulls{/number}
        releases_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/releases{/id}
        ssh_url:
          type: string
          example: git@github.com:octocat/Hello-World.git
        stargazers_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/stargazers
        statuses_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
        subscribers_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/subscribers
        subscription_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/subscription
        tags_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/tags
        teams_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/teams
        trees_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
        clone_url:
          type: string
          example: https://github.com/octocat/Hello-World.git
        mirror_url:
          type: string
          format: uri
          example: git:git.example.com/octocat/Hello-World
          nullable: true
        hooks_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/hooks
        svn_url:
          type: string
          format: uri
          example: https://svn.github.com/octocat/Hello-World
        homepage:
          type: string
          format: uri
          example: https://github.com
          nullable: true
        language:
          type: string
          nullable: true
        forks_count:
          type: integer
          example: 9
        stargazers_count:
          type: integer
          example: 80
        watchers_count:
          type: integer
          example: 80
        size:
          type: integer
          example: 108
        default_branch:
          description: The default branch of the repository.
          type: string
          example: master
        open_issues_count:
          type: integer
          example: 0
        is_template:
          description: >-
            Whether this repository acts as a template that can be used to
            generate new repositories.
          default: false
          type: boolean
          example: true
        topics:
          type: array
          items:
            type: string
        has_issues:
          description: Whether issues are enabled.
          default: true
          type: boolean
          example: true
        has_projects:
          description: Whether projects are enabled.
          default: true
          type: boolean
          example: true
        has_wiki:
          description: Whether the wiki is enabled.
          default: true
          type: boolean
          example: true
        has_pages:
          type: boolean
        has_downloads:
          description: Whether downloads are enabled.
          default: true
          type: boolean
          example: true
        archived:
          description: Whether the repository is archived.
          default: false
          type: boolean
        disabled:
          type: boolean
          description: Returns whether or not this repository disabled.
        visibility:
          description: 'The repository visibility: public, private, or internal.'
          default: public
          type: string
        pushed_at:
          type: string
          format: date-time
          example: '2011-01-26T19:06:43Z'
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2011-01-26T19:01:12Z'
          nullable: true
        updated_at:
          type: string
          format: date-time
          example: '2011-01-26T19:14:43Z'
          nullable: true
        allow_rebase_merge:
          description: Whether to allow rebase merges for pull requests.
          default: true
          type: boolean
          example: true
        temp_clone_token:
          type: string
        allow_squash_merge:
          description: Whether to allow squash merges for pull requests.
          default: true
          type: boolean
          example: true
        allow_auto_merge:
          description: Whether to allow Auto-merge to be used on pull requests.
          default: false
          type: boolean
          example: false
        delete_branch_on_merge:
          description: Whether to delete head branches when pull requests are merged
          default: false
          type: boolean
          example: false
        allow_merge_commit:
          description: Whether to allow merge commits for pull requests.
          default: true
          type: boolean
          example: true
        allow_forking:
          description: Whether to allow forking this repo
          default: false
          type: boolean
          example: false
        web_commit_signoff_required:
          description: Whether to require contributors to sign off on web-based commits
          default: false
          type: boolean
          example: false
        subscribers_count:
          type: integer
        network_count:
          type: integer
        open_issues:
          type: integer
        watchers:
          type: integer
        master_branch:
          type: string
      required:
        - archive_url
        - assignees_url
        - blobs_url
        - branches_url
        - collaborators_url
        - comments_url
        - commits_url
        - compare_url
        - contents_url
        - contributors_url
        - deployments_url
        - description
        - downloads_url
        - events_url
        - fork
        - forks_url
        - full_name
        - git_commits_url
        - git_refs_url
        - git_tags_url
        - hooks_url
        - html_url
        - id
        - node_id
        - issue_comment_url
        - issue_events_url
        - issues_url
        - keys_url
        - labels_url
        - languages_url
        - merges_url
        - milestones_url
        - name
        - notifications_url
        - owner
        - private
        - pulls_url
        - releases_url
        - stargazers_url
        - statuses_url
        - subscribers_url
        - subscription_url
        - tags_url
        - teams_url
        - trees_url
        - url
        - clone_url
        - default_branch
        - forks
        - forks_count
        - git_url
        - has_downloads
        - has_issues
        - has_projects
        - has_wiki
        - has_pages
        - homepage
        - language
        - archived
        - disabled
        - mirror_url
        - open_issues
        - open_issues_count
        - license
        - pushed_at
        - size
        - ssh_url
        - stargazers_count
        - svn_url
        - watchers
        - watchers_count
        - created_at
        - updated_at
    full-repository:
      title: Full Repository
      description: Full Repository
      type: object
      properties:
        id:
          type: integer
          example: 1296269
        node_id:
          type: string
          example: MDEwOlJlcG9zaXRvcnkxMjk2MjY5
        name:
          type: string
          example: Hello-World
        full_name:
          type: string
          example: octocat/Hello-World
        owner:
          $ref: '#/components/schemas/simple-user'
        private:
          type: boolean
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World
        description:
          type: string
          example: This your first repo!
          nullable: true
        fork:
          type: boolean
        url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World
        archive_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
        assignees_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/assignees{/user}
        blobs_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
        branches_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/branches{/branch}
        collaborators_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
        comments_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/comments{/number}
        commits_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/commits{/sha}
        compare_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
        contents_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/contents/{+path}
        contributors_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/contributors
        deployments_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/deployments
        downloads_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/downloads
        events_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/events
        forks_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/forks
        git_commits_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
        git_refs_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
        git_tags_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
        git_url:
          type: string
          example: git:github.com/octocat/Hello-World.git
        issue_comment_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
        issue_events_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/issues/events{/number}
        issues_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/issues{/number}
        keys_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/keys{/key_id}
        labels_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/labels{/name}
        languages_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/languages
        merges_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/merges
        milestones_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/milestones{/number}
        notifications_url:
          type: string
          example: >-
            http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
        pulls_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/pulls{/number}
        releases_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/releases{/id}
        ssh_url:
          type: string
          example: git@github.com:octocat/Hello-World.git
        stargazers_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/stargazers
        statuses_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/statuses/{sha}
        subscribers_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/subscribers
        subscription_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/subscription
        tags_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/tags
        teams_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/teams
        trees_url:
          type: string
          example: http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
        clone_url:
          type: string
          example: https://github.com/octocat/Hello-World.git
        mirror_url:
          type: string
          format: uri
          example: git:git.example.com/octocat/Hello-World
          nullable: true
        hooks_url:
          type: string
          format: uri
          example: http://api.github.com/repos/octocat/Hello-World/hooks
        svn_url:
          type: string
          format: uri
          example: https://svn.github.com/octocat/Hello-World
        homepage:
          type: string
          format: uri
          example: https://github.com
          nullable: true
        language:
          type: string
          nullable: true
        forks_count:
          type: integer
          example: 9
        stargazers_count:
          type: integer
          example: 80
        watchers_count:
          type: integer
          example: 80
        size:
          description: >-
            The size of the repository, in kilobytes. Size is calculated hourly.
            When a repository is initially created, the size is 0.
          type: integer
          example: 108
        default_branch:
          type: string
          example: master
        open_issues_count:
          type: integer
          example: 0
        is_template:
          type: boolean
          example: true
        topics:
          type: array
          items:
            type: string
          example:
            - octocat
            - atom
            - electron
            - API
        has_issues:
          type: boolean
          example: true
        has_projects:
          type: boolean
          example: true
        has_wiki:
          type: boolean
          example: true
        has_pages:
          type: boolean
        has_downloads:
          type: boolean
          example: true
        has_discussions:
          type: boolean
          example: true
        archived:
          type: boolean
        disabled:
          type: boolean
          description: Returns whether or not this repository disabled.
        visibility:
          description: 'The repository visibility: public, private, or internal.'
          type: string
          example: public
        pushed_at:
          type: string
          format: date-time
          example: '2011-01-26T19:06:43Z'
        created_at:
          type: string
          format: date-time
          example: '2011-01-26T19:01:12Z'
        updated_at:
          type: string
          format: date-time
          example: '2011-01-26T19:14:43Z'
        permissions:
          type: object
          properties:
            admin:
              type: boolean
            maintain:
              type: boolean
            push:
              type: boolean
            triage:
              type: boolean
            pull:
              type: boolean
          required:
            - admin
            - pull
            - push
        allow_rebase_merge:
          type: boolean
          example: true
        template_repository:
          $ref: '#/components/schemas/nullable-repository'
        temp_clone_token:
          type: string
          nullable: true
        allow_squash_merge:
          type: boolean
          example: true
        allow_auto_merge:
          type: boolean
          example: false
        delete_branch_on_merge:
          type: boolean
          example: false
        allow_merge_commit:
          type: boolean
          example: true
        allow_update_branch:
          type: boolean
          example: true
        use_squash_pr_title_as_default:
          type: boolean
          example: false
        squash_merge_commit_title:
          type: string
          example: PR_TITLE
          enum:
            - PR_TITLE
            - COMMIT_OR_PR_TITLE
          description: >-
            The default value for a squash merge commit title:


            - `PR_TITLE` - default to the pull request's title.

            - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one
            commit) or the pull request's title (when more than one commit).
        squash_merge_commit_message:
          type: string
          example: PR_BODY
          enum:
            - PR_BODY
            - COMMIT_MESSAGES
            - BLANK
          description: |-
            The default value for a squash merge commit message:

            - `PR_BODY` - default to the pull request's body.
            - `COMMIT_MESSAGES` - default to the branch's commit messages.
            - `BLANK` - default to a blank commit message.
        merge_commit_title:
          type: string
          example: PR_TITLE
          enum:
            - PR_TITLE
            - MERGE_MESSAGE
          description: |-
            The default value for a merge commit title.

              - `PR_TITLE` - default to the pull request's title.
              - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
        merge_commit_message:
          type: string
          example: PR_BODY
          enum:
            - PR_BODY
            - PR_TITLE
            - BLANK
          description: |-
            The default value for a merge commit message.

            - `PR_TITLE` - default to the pull request's title.
            - `PR_BODY` - default to the pull request's body.
            - `BLANK` - default to a blank commit message.
        allow_forking:
          type: boolean
          example: true
        web_commit_signoff_required:
          type: boolean
          example: false
        subscribers_count:
          type: integer
          example: 42
        network_count:
          type: integer
          example: 0
        license:
          $ref: '#/components/schemas/nullable-license-simple'
        organization:
          $ref: '#/components/schemas/nullable-simple-user'
        parent:
          $ref: '#/components/schemas/repository'
        source:
          $ref: '#/components/schemas/repository'
        forks:
          type: integer
        master_branch:
          type: string
        open_issues:
          type: integer
        watchers:
          type: integer
        anonymous_access_enabled:
          description: Whether anonymous git access is allowed.
          default: true
          type: boolean
        code_of_conduct:
          $ref: '#/components/schemas/code-of-conduct-simple'
        security_and_analysis:
          $ref: '#/components/schemas/security-and-analysis'
      required:
        - archive_url
        - assignees_url
        - blobs_url
        - branches_url
        - collaborators_url
        - comments_url
        - commits_url
        - compare_url
        - contents_url
        - contributors_url
        - deployments_url
        - description
        - downloads_url
        - events_url
        - fork
        - forks_url
        - full_name
        - git_commits_url
        - git_refs_url
        - git_tags_url
        - hooks_url
        - html_url
        - id
        - node_id
        - issue_comment_url
        - issue_events_url
        - issues_url
        - keys_url
        - labels_url
        - languages_url
        - merges_url
        - milestones_url
        - name
        - notifications_url
        - owner
        - private
        - pulls_url
        - releases_url
        - stargazers_url
        - statuses_url
        - subscribers_url
        - subscription_url
        - tags_url
        - teams_url
        - trees_url
        - url
        - clone_url
        - default_branch
        - forks
        - forks_count
        - git_url
        - has_issues
        - has_projects
        - has_wiki
        - has_pages
        - has_discussions
        - homepage
        - language
        - archived
        - disabled
        - mirror_url
        - open_issues
        - open_issues_count
        - license
        - pushed_at
        - size
        - ssh_url
        - stargazers_count
        - svn_url
        - watchers
        - watchers_count
        - created_at
        - updated_at
        - network_count
        - subscribers_count
    artifact:
      title: Artifact
      description: An artifact
      type: object
      properties:
        id:
          type: integer
          example: 5
        node_id:
          type: string
          example: MDEwOkNoZWNrU3VpdGU1
        name:
          description: The name of the artifact.
          type: string
          example: AdventureWorks.Framework
        size_in_bytes:
          description: The size in bytes of the artifact.
          type: integer
          example: 12345
        url:
          type: string
          example: https://api.github.com/repos/github/hello-world/actions/artifacts/5
        archive_download_url:
          type: string
          example: >-
            https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip
        expired:
          description: Whether or not the artifact has expired.
          type: boolean
        created_at:
          type: string
          format: date-time
          nullable: true
        expires_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
        workflow_run:
          type: object
          nullable: true
          properties:
            id:
              example: 10
              type: integer
            repository_id:
              example: 42
              type: integer
            head_repository_id:
              example: 42
              type: integer
            head_branch:
              example: main
              type: string
            head_sha:
              example: 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
              type: string
      required:
        - id
        - node_id
        - name
        - size_in_bytes
        - url
        - archive_download_url
        - expired
        - created_at
        - expires_at
        - updated_at
    actions-cache-usage-by-repository:
      title: Actions Cache Usage by repository
      description: GitHub Actions Cache Usage by repository.
      type: object
      properties:
        full_name:
          description: The repository owner and name for the cache usage being shown.
          type: string
          example: octo-org/Hello-World
        active_caches_size_in_bytes:
          description: >-
            The sum of the size in bytes of all the active cache items in the
            repository.
          type: integer
          example: 2322142
        active_caches_count:
          description: The number of active caches in the repository.
          type: integer
          example: 3
      required:
        - full_name
        - active_caches_size_in_bytes
        - active_caches_count
    actions-cache-usage-policy-for-repository:
      title: Actions cache usage policy for repository
      description: GitHub Actions cache usage policy for repository.
      type: object
      properties:
        repo_cache_size_limit_in_gb:
          description: The size limit for the sum of all caches, in gigabytes.
          type: integer
          example: 14
      required:
        - repo_cache_size_limit_in_gb
    actions-cache-list:
      title: Repository actions caches
      description: Repository actions caches
      type: object
      properties:
        total_count:
          description: Total number of caches
          type: integer
          example: 2
        actions_caches:
          description: Array of caches
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 2
              ref:
                type: string
                example: refs/heads/main
              key:
                type: string
                example: Linux-node-958aff96db2d75d67787d1e634ae70b659de937b
              version:
                type: string
                example: >-
                  73885106f58cc52a7df9ec4d4a5622a5614813162cb516c759a30af6bf56e6f0
              last_accessed_at:
                type: string
                format: date-time
                example: '2019-01-24T22:45:36.000Z'
              created_at:
                type: string
                format: date-time
                example: '2019-01-24T22:45:36.000Z'
              size_in_bytes:
                type: integer
                example: 1024
      required:
        - total_count
        - actions_caches
    job:
      title: Job
      description: Information of a job execution in a workflow run
      type: object
      properties:
        id:
          description: The id of the job.
          example: 21
          type: integer
        run_id:
          description: The id of the associated workflow run.
          example: 5
          type: integer
        run_url:
          type: string
          example: https://api.github.com/repos/github/hello-world/actions/runs/5
        run_attempt:
          type: integer
          description: >-
            Attempt number of the associated workflow run, 1 for first attempt
            and higher if the workflow was re-run.
          example: 1
        node_id:
          type: string
          example: MDg6Q2hlY2tSdW40
        head_sha:
          description: The SHA of the commit that is being run.
          example: 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
          type: string
        url:
          type: string
          example: https://api.github.com/repos/github/hello-world/actions/jobs/21
        html_url:
          type: string
          example: https://github.com/github/hello-world/runs/4
          nullable: true
        status:
          description: The phase of the lifecycle that the job is currently in.
          example: queued
          type: string
          enum:
            - queued
            - in_progress
            - completed
            - waiting
        conclusion:
          description: The outcome of the job.
          example: success
          type: string
          nullable: true
          enum:
            - success
            - failure
            - neutral
            - cancelled
            - skipped
            - timed_out
            - action_required
        created_at:
          description: The time that the job created, in ISO 8601 format.
          example: '2019-08-08T08:00:00-07:00'
          format: date-time
          type: string
        started_at:
          description: The time that the job started, in ISO 8601 format.
          example: '2019-08-08T08:00:00-07:00'
          format: date-time
          type: string
        completed_at:
          description: The time that the job finished, in ISO 8601 format.
          example: '2019-08-08T08:00:00-07:00'
          format: date-time
          type: string
          nullable: true
        name:
          description: The name of the job.
          example: test-coverage
          type: string
        steps:
          description: Steps in this job.
          type: array
          items:
            type: object
            required:
              - name
              - status
              - conclusion
              - number
            properties:
              status:
                description: The phase of the lifecycle that the job is currently in.
                example: queued
                type: string
                enum:
                  - queued
                  - in_progress
                  - completed
              conclusion:
                description: The outcome of the job.
                example: success
                type: string
                nullable: true
              name:
                description: The name of the job.
                example: test-coverage
                type: string
              number:
                type: integer
                example: 1
              started_at:
                description: The time that the step started, in ISO 8601 format.
                example: '2019-08-08T08:00:00-07:00'
                format: date-time
                type: string
                nullable: true
              completed_at:
                description: The time that the job finished, in ISO 8601 format.
                example: '2019-08-08T08:00:00-07:00'
                format: date-time
                type: string
                nullable: true
        check_run_url:
          type: string
          example: https://api.github.com/repos/github/hello-world/check-runs/4
        labels:
          type: array
          items:
            type: string
          description: >-
            Labels for the workflow job. Specified by the "runs_on" attribute in
            the action's workflow file.
          example:
            - self-hosted
            - foo
            - bar
        runner_id:
          type: integer
          nullable: true
          example: 1
          description: >-
            The ID of the runner to which this job has been assigned. (If a
            runner hasn't yet been assigned, this will be null.)
        runner_name:
          type: string
          nullable: true
          example: my runner
          description: >-
            The name of the runner to which this job has been assigned. (If a
            runner hasn't yet been assigned, this will be null.)
        runner_group_id:
          type: integer
          nullable: true
          example: 2
          description: >-
            The ID of the runner group to which this job has been assigned. (If
            a runner hasn't yet been assigned, this will be null.)
        runner_group_name:
          type: string
          nullable: true
          example: my runner group
          description: >-
            The name of the runner group to which this job has been assigned.
            (If a runner hasn't yet been assigned, this will be null.)
        workflow_name:
          type: string
          description: The name of the workflow.
          nullable: true
          example: Build
        head_branch:
          type: string
          description: The name of the current branch.
          nullable: true
          example: main
      required:
        - id
        - node_id
        - run_id
        - run_url
        - head_sha
        - workflow_name
        - head_branch
        - name
        - url
        - html_url
        - status
        - conclusion
        - started_at
        - completed_at
        - check_run_url
        - labels
        - runner_id
        - runner_name
        - runner_group_id
        - runner_group_name
        - created_at
    oidc-custom-sub-repo:
      title: Actions OIDC subject customization for a repository
      description: Actions OIDC subject customization for a repository
      type: object
      properties:
        use_default:
          description: >-
            Whether to use the default template or not. If `true`, the
            `include_claim_keys` field is ignored.
          type: boolean
        include_claim_keys:
          description: >-
            Array of unique strings. Each claim key can only contain
            alphanumeric characters and underscores.
          type: array
          items:
            type: string
      required:
        - use_default
    actions-repository-permissions:
      type: object
      properties:
        enabled:
          $ref: '#/components/schemas/actions-enabled'
        allowed_actions:
          $ref: '#/components/schemas/allowed-actions'
        selected_actions_url:
          $ref: '#/components/schemas/selected-actions-url'
      required:
        - enabled
    actions-workflow-access-to-repository:
      type: object
      properties:
        access_level:
          type: string
          description: >-
            Defines the level of access that workflows outside of the repository
            have to actions and reusable workflows within the

            repository.


            `none` means the access is only possible from workflows in this
            repository. `user` level access allows sharing across user owned
            private repositories only. `organization` level access allows
            sharing across the organization. `enterprise` level access allows
            sharing across the enterprise.
          enum:
            - none
            - user
            - organization
            - enterprise
      required:
        - access_level
    selected-actions:
      type: object
      properties:
        github_owned_allowed:
          type: boolean
          description: >-
            Whether GitHub-owned actions are allowed. For example, this includes
            the actions in the `actions` organization.
        patterns_allowed:
          type: array
          description: >-
            Specifies a list of string-matching patterns to allow specific
            action(s). Wildcards, tags, and SHAs are allowed. For example,
            `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.
          items:
            type: string
      required:
        - github_owned_allowed
        - patterns_allowed
    actions-get-default-workflow-permissions:
      type: object
      properties:
        default_workflow_permissions:
          $ref: '#/components/schemas/actions-default-workflow-permissions'
        can_approve_pull_request_reviews:
          $ref: '#/components/schemas/actions-can-approve-pull-request-reviews'
      required:
        - default_workflow_permissions
        - can_approve_pull_request_reviews
    runner:
      title: Self hosted runners
      description: A self hosted runner
      type: object
      properties:
        id:
          description: The id of the runner.
          type: integer
          example: 5
        runner_group_id:
          description: The id of the runner group.
          type: integer
          example: 1
        name:
          description: The name of the runner.
          type: string
          example: iMac
        os:
          description: The Operating System of the runner.
          type: string
          example: macos
        status:
          description: The status of the runner.
          type: string
          example: online
        busy:
          type: boolean
        labels:
          type: array
          items:
            $ref: '#/components/schemas/runner-label'
      required:
        - id
        - name
        - os
        - status
        - busy
        - labels
    workflow-run:
      title: Workflow Run
      description: An invocation of a workflow
      type: object
      properties:
        id:
          type: integer
          description: The ID of the workflow run.
          example: 5
        name:
          type: string
          description: The name of the workflow run.
          nullable: true
          example: Build
        node_id:
          type: string
          example: MDEwOkNoZWNrU3VpdGU1
        check_suite_id:
          type: integer
          description: The ID of the associated check suite.
          example: 42
        check_suite_node_id:
          type: string
          description: The node ID of the associated check suite.
          example: MDEwOkNoZWNrU3VpdGU0Mg==
        head_branch:
          type: string
          nullable: true
          example: master
        head_sha:
          description: >-
            The SHA of the head commit that points to the version of the
            workflow being run.
          example: 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
          type: string
        path:
          description: The full path of the workflow
          example: octocat/octo-repo/.github/workflows/ci.yml@main
          type: string
        run_number:
          type: integer
          description: The auto incrementing run number for the workflow run.
          example: 106
        run_attempt:
          type: integer
          description: >-
            Attempt number of the run, 1 for first attempt and higher if the
            workflow was re-run.
          example: 1
        referenced_workflows:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/referenced-workflow'
        event:
          type: string
          example: push
        status:
          type: string
          nullable: true
          example: completed
        conclusion:
          type: string
          nullable: true
          example: neutral
        workflow_id:
          type: integer
          description: The ID of the parent workflow.
          example: 5
        url:
          type: string
          description: The URL to the workflow run.
          example: https://api.github.com/repos/github/hello-world/actions/runs/5
        html_url:
          type: string
          example: https://github.com/github/hello-world/suites/4
        pull_requests:
          description: >-
            Pull requests that are open with a `head_sha` or `head_branch` that
            matches the workflow run. The returned pull requests do not
            necessarily indicate pull requests that triggered the run.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/pull-request-minimal'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        actor:
          $ref: '#/components/schemas/simple-user'
        triggering_actor:
          $ref: '#/components/schemas/simple-user'
        run_started_at:
          type: string
          format: date-time
          description: The start time of the latest run. Resets on re-run.
        jobs_url:
          description: The URL to the jobs for the workflow run.
          type: string
          example: https://api.github.com/repos/github/hello-world/actions/runs/5/jobs
        logs_url:
          description: The URL to download the logs for the workflow run.
          type: string
          example: https://api.github.com/repos/github/hello-world/actions/runs/5/logs
        check_suite_url:
          description: The URL to the associated check suite.
          type: string
          example: https://api.github.com/repos/github/hello-world/check-suites/12
        artifacts_url:
          description: The URL to the artifacts for the workflow run.
          type: string
          example: >-
            https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts
        cancel_url:
          description: The URL to cancel the workflow run.
          type: string
          example: >-
            https://api.github.com/repos/github/hello-world/actions/runs/5/cancel
        rerun_url:
          description: The URL to rerun the workflow run.
          type: string
          example: https://api.github.com/repos/github/hello-world/actions/runs/5/rerun
        previous_attempt_url:
          nullable: true
          description: >-
            The URL to the previous attempted run of this workflow, if one
            exists.
          type: string
          example: >-
            https://api.github.com/repos/github/hello-world/actions/runs/5/attempts/3
        workflow_url:
          description: The URL to the workflow.
          type: string
          example: >-
            https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml
        head_commit:
          $ref: '#/components/schemas/nullable-simple-commit'
        repository:
          $ref: '#/components/schemas/minimal-repository'
        head_repository:
          $ref: '#/components/schemas/minimal-repository'
        head_repository_id:
          type: integer
          example: 5
        display_title:
          type: string
          example: Simple Workflow
          description: >-
            The event-specific title associated with the run or the run-name if
            set, or the value of `run-name` if it is set in the workflow.
      required:
        - id
        - node_id
        - head_branch
        - run_number
        - display_title
        - event
        - status
        - conclusion
        - head_sha
        - path
        - workflow_id
        - url
        - html_url
        - created_at
        - updated_at
        - head_commit
        - head_repository
        - repository
        - jobs_url
        - logs_url
        - check_suite_url
        - cancel_url
        - rerun_url
        - artifacts_url
        - workflow_url
        - pull_requests
    actions-public-key:
      title: ActionsPublicKey
      description: The public key used for setting Actions Secrets.
      type: object
      properties:
        key_id:
          description: The identifier for the key.
          type: string
          example: '1234567'
        key:
          description: The Base64 encoded public key.
          type: string
          example: hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
        id:
          type: integer
          example: 2
        url:
          type: string
          example: https://api.github.com/user/keys/2
        title:
          type: string
          example: ssh-rsa AAAAB3NzaC1yc2EAAA
        created_at:
          type: string
          example: '2011-01-26T19:01:12Z'
      required:
        - key_id
        - key
    actions-secret:
      title: Actions Secret
      description: Set secrets for GitHub Actions.
      type: object
      properties:
        name:
          description: The name of the secret.
          example: SECRET_TOKEN
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - name
        - created_at
        - updated_at
    actions-variable:
      title: Actions Variable
      type: object
      properties:
        name:
          description: The name of the variable.
          example: USERNAME
          type: string
        value:
          description: The value of the variable.
          example: octocat
          type: string
        created_at:
          description: >-
            The date and time at which the variable was created, in ISO 8601
            format':' YYYY-MM-DDTHH:MM:SSZ.
          type: string
          format: date-time
          example: '2019-01-24T22:45:36.000Z'
        updated_at:
          description: >-
            The date and time at which the variable was last updated, in ISO
            8601 format':' YYYY-MM-DDTHH:MM:SSZ.
          type: string
          format: date-time
          example: '2019-01-24T22:45:36.000Z'
      required:
        - name
        - value
        - created_at
        - updated_at
    workflow:
      title: Workflow
      description: A GitHub Actions workflow
      type: object
      properties:
        id:
          type: integer
          example: 5
        node_id:
          type: string
          example: MDg6V29ya2Zsb3cxMg==
        name:
          type: string
          example: CI
        path:
          type: string
          example: ruby.yaml
        state:
          type: string
          example: active
          enum:
            - active
            - deleted
            - disabled_fork
            - disabled_inactivity
            - disabled_manually
        created_at:
          type: string
          format: date-time
          example: '2019-12-06T14:20:20.000Z'
        updated_at:
          type: string
          format: date-time
          example: '2019-12-06T14:20:20.000Z'
        url:
          type: string
          example: https://api.github.com/repos/actions/setup-ruby/workflows/5
        html_url:
          type: string
          example: >-
            https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml
        badge_url:
          type: string
          example: https://github.com/actions/setup-ruby/workflows/CI/badge.svg
        deleted_at:
          type: string
          format: date-time
          example: '2019-12-06T14:20:20.000Z'
      required:
        - id
        - node_id
        - name
        - path
        - state
        - url
        - html_url
        - badge_url
        - created_at
        - updated_at
    autolink:
      title: Autolink reference
      description: An autolink reference.
      type: object
      properties:
        id:
          type: integer
          example: 3
        key_prefix:
          description: The prefix of a key that is linkified.
          example: TICKET-
          type: string
        url_template:
          description: A template for the target URL that is generated if a key was found.
          example: https://example.com/TICKET?query=<num>
          type: string
        is_alphanumeric:
          description: >-
            Whether this autolink reference matches alphanumeric characters. If
            false, this autolink reference only matches numeric characters.
          example: true
          type: boolean
      required:
        - id
        - key_prefix
        - url_template
        - is_alphanumeric
    branch-with-protection:
      title: Branch With Protection
      description: Branch With Protection
      type: object
      properties:
        name:
          type: string
        commit:
          $ref: '#/components/schemas/commit'
        _links:
          type: object
          properties:
            html:
              type: string
            self:
              type: string
              format: uri
          required:
            - html
            - self
        protected:
          type: boolean
        protection:
          $ref: '#/components/schemas/branch-protection'
        protection_url:
          type: string
          format: uri
        pattern:
          type: string
          example: '"mas*"'
        required_approving_review_count:
          type: integer
          example: 1
      required:
        - name
        - commit
        - _links
        - protection
        - protected
        - protection_url
    branch-protection:
      title: Branch Protection
      description: Branch Protection
      type: object
      properties:
        url:
          type: string
        enabled:
          type: boolean
        required_status_checks:
          $ref: '#/components/schemas/protected-branch-required-status-check'
        enforce_admins:
          $ref: '#/components/schemas/protected-branch-admin-enforced'
        required_pull_request_reviews:
          $ref: '#/components/schemas/protected-branch-pull-request-review'
        restrictions:
          $ref: '#/components/schemas/branch-restriction-policy'
        required_linear_history:
          type: object
          properties:
            enabled:
              type: boolean
        allow_force_pushes:
          type: object
          properties:
            enabled:
              type: boolean
        allow_deletions:
          type: object
          properties:
            enabled:
              type: boolean
        block_creations:
          type: object
          properties:
            enabled:
              type: boolean
        required_conversation_resolution:
          type: object
          properties:
            enabled:
              type: boolean
        name:
          type: string
          example: '"branch/with/protection"'
        protection_url:
          type: string
          example: >-
            "https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"
        required_signatures:
          type: object
          properties:
            url:
              type: string
              format: uri
              example: >-
                https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures
            enabled:
              type: boolean
              example: true
          required:
            - url
            - enabled
        lock_branch:
          type: object
          description: >-
            Whether to set the branch as read-only. If this is true, users will
            not be able to push to the branch.
          properties:
            enabled:
              default: false
              type: boolean
        allow_fork_syncing:
          type: object
          description: >-
            Whether users can pull changes from upstream when the branch is
            locked. Set to `true` to allow fork syncing. Set to `false` to
            prevent fork syncing.
          properties:
            enabled:
              default: false
              type: boolean
    protected-branch:
      title: Protected Branch
      description: Branch protections protect branches
      type: object
      properties:
        url:
          type: string
          format: uri
        required_status_checks:
          $ref: '#/components/schemas/status-check-policy'
        required_pull_request_reviews:
          type: object
          properties:
            url:
              type: string
              format: uri
            dismiss_stale_reviews:
              type: boolean
            require_code_owner_reviews:
              type: boolean
            required_approving_review_count:
              type: integer
            require_last_push_approval:
              description: >-
                Whether the most recent push must be approved by someone other
                than the person who pushed it.
              type: boolean
              default: false
            dismissal_restrictions:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                users_url:
                  type: string
                  format: uri
                teams_url:
                  type: string
                  format: uri
                users:
                  type: array
                  items:
                    $ref: '#/components/schemas/simple-user'
                teams:
                  type: array
                  items:
                    $ref: '#/components/schemas/team'
                apps:
                  type: array
                  items:
                    $ref: '#/components/schemas/integration'
              required:
                - url
                - users_url
                - teams_url
                - users
                - teams
            bypass_pull_request_allowances:
              type: object
              properties:
                users:
                  type: array
                  items:
                    $ref: '#/components/schemas/simple-user'
                teams:
                  type: array
                  items:
                    $ref: '#/components/schemas/team'
                apps:
                  type: array
                  items:
                    $ref: '#/components/schemas/integration'
              required:
                - users
                - teams
          required:
            - url
        required_signatures:
          type: object
          properties:
            url:
              type: string
              format: uri
              example: >-
                https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures
            enabled:
              type: boolean
              example: true
          required:
            - url
            - enabled
        enforce_admins:
          type: object
          properties:
            url:
              type: string
              format: uri
            enabled:
              type: boolean
          additionalProperties: false
          required:
            - url
            - enabled
        required_linear_history:
          type: object
          properties:
            enabled:
              type: boolean
          additionalProperties: false
          required:
            - enabled
        allow_force_pushes:
          type: object
          properties:
            enabled:
              type: boolean
          additionalProperties: false
          required:
            - enabled
        allow_deletions:
          type: object
          properties:
            enabled:
              type: boolean
          additionalProperties: false
          required:
            - enabled
        restrictions:
          $ref: '#/components/schemas/branch-restriction-policy'
        required_conversation_resolution:
          type: object
          properties:
            enabled:
              type: boolean
          additionalProperties: false
        block_creations:
          type: object
          properties:
            enabled:
              type: boolean
          additionalProperties: false
          required:
            - enabled
        lock_branch:
          type: object
          description: >-
            Whether to set the branch as read-only. If this is true, users will
            not be able to push to the branch.
          properties:
            enabled:
              default: false
              type: boolean
          additionalProperties: false
        allow_fork_syncing:
          type: object
          description: >-
            Whether users can pull changes from upstream when the branch is
            locked. Set to `true` to allow fork syncing. Set to `false` to
            prevent fork syncing.
          properties:
            enabled:
              default: false
              type: boolean
          additionalProperties: false
      required:
        - url
    protected-branch-admin-enforced:
      title: Protected Branch Admin Enforced
      description: Protected Branch Admin Enforced
      type: object
      properties:
        url:
          type: string
          format: uri
          example: >-
            https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins
        enabled:
          type: boolean
          example: true
      required:
        - url
        - enabled
    protected-branch-pull-request-review:
      title: Protected Branch Pull Request Review
      description: Protected Branch Pull Request Review
      type: object
      properties:
        url:
          type: string
          format: uri
          example: >-
            https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions
        dismissal_restrictions:
          type: object
          properties:
            users:
              description: The list of users with review dismissal access.
              type: array
              items:
                $ref: '#/components/schemas/simple-user'
            teams:
              description: The list of teams with review dismissal access.
              type: array
              items:
                $ref: '#/components/schemas/team'
            apps:
              description: The list of apps with review dismissal access.
              type: array
              items:
                $ref: '#/components/schemas/integration'
            url:
              type: string
              example: >-
                "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"
            users_url:
              type: string
              example: >-
                "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"
            teams_url:
              type: string
              example: >-
                "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"
        bypass_pull_request_allowances:
          type: object
          description: >-
            Allow specific users, teams, or apps to bypass pull request
            requirements.
          properties:
            users:
              description: The list of users allowed to bypass pull request requirements.
              type: array
              items:
                $ref: '#/components/schemas/simple-user'
            teams:
              description: The list of teams allowed to bypass pull request requirements.
              type: array
              items:
                $ref: '#/components/schemas/team'
            apps:
              description: The list of apps allowed to bypass pull request requirements.
              type: array
              items:
                $ref: '#/components/schemas/integration'
        dismiss_stale_reviews:
          type: boolean
          example: true
        require_code_owner_reviews:
          type: boolean
          example: true
        required_approving_review_count:
          type: integer
          minimum: 0
          maximum: 6
          example: 2
        require_last_push_approval:
          description: >-
            Whether the most recent push must be approved by someone other than
            the person who pushed it.
          type: boolean
          example: true
          default: false
      required:
        - dismiss_stale_reviews
        - require_code_owner_reviews
    status-check-policy:
      title: Status Check Policy
      description: Status Check Policy
      type: object
      properties:
        url:
          type: string
          format: uri
          example: >-
            https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks
        strict:
          type: boolean
          example: true
        contexts:
          type: array
          example:
            - continuous-integration/travis-ci
          items:
            type: string
        checks:
          type: array
          items:
            type: object
            properties:
              context:
                type: string
                example: continuous-integration/travis-ci
              app_id:
                type: integer
                nullable: true
            required:
              - context
              - app_id
        contexts_url:
          type: string
          format: uri
          example: >-
            https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts
      required:
        - url
        - contexts_url
        - strict
        - contexts
        - checks
    branch-restriction-policy:
      title: Branch Restriction Policy
      description: Branch Restriction Policy
      type: object
      properties:
        url:
          type: string
          format: uri
        users_url:
          type: string
          format: uri
        teams_url:
          type: string
          format: uri
        apps_url:
          type: string
          format: uri
        users:
          type: array
          items:
            type: object
            properties:
              login:
                type: string
              id:
                type: integer
              node_id:
                type: string
              avatar_url:
                type: string
              gravatar_id:
                type: string
              url:
                type: string
              html_url:
                type: string
              followers_url:
                type: string
              following_url:
                type: string
              gists_url:
                type: string
              starred_url:
                type: string
              subscriptions_url:
                type: string
              organizations_url:
                type: string
              repos_url:
                type: string
              events_url:
                type: string
              received_events_url:
                type: string
              type:
                type: string
              site_admin:
                type: boolean
        teams:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              node_id:
                type: string
              url:
                type: string
              html_url:
                type: string
              name:
                type: string
              slug:
                type: string
              description:
                type: string
                nullable: true
              privacy:
                type: string
              permission:
                type: string
              members_url:
                type: string
              repositories_url:
                type: string
              parent:
                type: string
                nullable: true
        apps:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              slug:
                type: string
              node_id:
                type: string
              owner:
                type: object
                properties:
                  login:
                    type: string
                  id:
                    type: integer
                  node_id:
                    type: string
                  url:
                    type: string
                  repos_url:
                    type: string
                  events_url:
                    type: string
                  hooks_url:
                    type: string
                  issues_url:
                    type: string
                  members_url:
                    type: string
                  public_members_url:
                    type: string
                  avatar_url:
                    type: string
                  description:
                    type: string
                  gravatar_id:
                    type: string
                    example: '""'
                  html_url:
                    type: string
                    example: '"https://github.com/testorg-ea8ec76d71c3af4b"'
                  followers_url:
                    type: string
                    example: >-
                      "https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"
                  following_url:
                    type: string
                    example: >-
                      "https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"
                  gists_url:
                    type: string
                    example: >-
                      "https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"
                  starred_url:
                    type: string
                    example: >-
                      "https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"
                  subscriptions_url:
                    type: string
                    example: >-
                      "https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"
                  organizations_url:
                    type: string
                    example: >-
                      "https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"
                  received_events_url:
                    type: string
                    example: >-
                      "https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"
                  type:
                    type: string
                    example: '"Organization"'
                  site_admin:
                    type: boolean
                    example: false
              name:
                type: string
              description:
                type: string
              external_url:
                type: string
              html_url:
                type: string
              created_at:
                type: string
              updated_at:
                type: string
              permissions:
                type: object
                properties:
                  metadata:
                    type: string
                  contents:
                    type: string
                  issues:
                    type: string
                  single_file:
                    type: string
              events:
                type: array
                items:
                  type: string
      required:
        - url
        - users_url
        - teams_url
        - apps_url
        - users
        - teams
        - apps
    check-run:
      title: CheckRun
      description: A check performed on the code of a given code change
      type: object
      properties:
        id:
          description: The id of the check.
          example: 21
          type: integer
        head_sha:
          description: The SHA of the commit that is being checked.
          example: 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
          type: string
        node_id:
          type: string
          example: MDg6Q2hlY2tSdW40
        external_id:
          type: string
          example: '42'
          nullable: true
        url:
          type: string
          example: https://api.github.com/repos/github/hello-world/check-runs/4
        html_url:
          type: string
          example: https://github.com/github/hello-world/runs/4
          nullable: true
        details_url:
          type: string
          example: https://example.com
          nullable: true
        status:
          description: The phase of the lifecycle that the check is currently in.
          example: queued
          type: string
          enum:
            - queued
            - in_progress
            - completed
        conclusion:
          type: string
          example: neutral
          enum:
            - success
            - failure
            - neutral
            - cancelled
            - skipped
            - timed_out
            - action_required
          nullable: true
        started_at:
          type: string
          format: date-time
          example: '2018-05-04T01:14:52Z'
          nullable: true
        completed_at:
          type: string
          format: date-time
          example: '2018-05-04T01:14:52Z'
          nullable: true
        output:
          type: object
          properties:
            title:
              type: string
              nullable: true
            summary:
              type: string
              nullable: true
            text:
              type: string
              nullable: true
            annotations_count:
              type: integer
            annotations_url:
              type: string
              format: uri
          required:
            - title
            - summary
            - text
            - annotations_count
            - annotations_url
        name:
          description: The name of the check.
          example: test-coverage
          type: string
        check_suite:
          type: object
          properties:
            id:
              type: integer
          required:
            - id
          nullable: true
        app:
          $ref: '#/components/schemas/nullable-integration'
        pull_requests:
          description: >-
            Pull requests that are open with a `head_sha` or `head_branch` that
            matches the check. The returned pull requests do not necessarily
            indicate pull requests that triggered the check.
          type: array
          items:
            $ref: '#/components/schemas/pull-request-minimal'
        deployment:
          $ref: '#/components/schemas/deployment-simple'
      required:
        - id
        - node_id
        - head_sha
        - name
        - url
        - html_url
        - details_url
        - status
        - conclusion
        - started_at
        - completed_at
        - external_id
        - check_suite
        - output
        - app
        - pull_requests
    check-suite:
      title: CheckSuite
      description: A suite of checks performed on the code of a given code change
      type: object
      properties:
        id:
          type: integer
          example: 5
        node_id:
          type: string
          example: MDEwOkNoZWNrU3VpdGU1
        head_branch:
          type: string
          example: master
          nullable: true
        head_sha:
          description: The SHA of the head commit that is being checked.
          example: 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
          type: string
        status:
          type: string
          example: completed
          enum:
            - queued
            - in_progress
            - completed
          nullable: true
        conclusion:
          type: string
          example: neutral
          enum:
            - success
            - failure
            - neutral
            - cancelled
            - skipped
            - timed_out
            - action_required
            - startup_failure
            - stale
            - null
          nullable: true
        url:
          type: string
          example: https://api.github.com/repos/github/hello-world/check-suites/5
          nullable: true
        before:
          type: string
          example: 146e867f55c26428e5f9fade55a9bbf5e95a7912
          nullable: true
        after:
          type: string
          example: d6fde92930d4715a2b49857d24b940956b26d2d3
          nullable: true
        pull_requests:
          type: array
          items:
            $ref: '#/components/schemas/pull-request-minimal'
          nullable: true
        app:
          $ref: '#/components/schemas/nullable-integration'
        repository:
          $ref: '#/components/schemas/minimal-repository'
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
        head_commit:
          $ref: '#/components/schemas/simple-commit'
        latest_check_runs_count:
          type: integer
        check_runs_url:
          type: string
        rerequestable:
          type: boolean
        runs_rerequestable:
          type: boolean
      required:
        - id
        - node_id
        - head_branch
        - status
        - conclusion
        - head_sha
        - url
        - before
        - after
        - created_at
        - updated_at
        - app
        - head_commit
        - repository
        - latest_check_runs_count
        - check_runs_url
        - pull_requests
    check-suite-preference:
      title: Check Suite Preference
      description: Check suite configuration preferences for a repository.
      type: object
      required:
        - preferences
        - repository
      properties:
        preferences:
          type: object
          properties:
            auto_trigger_checks:
              type: array
              items:
                type: object
                properties:
                  app_id:
                    type: integer
                  setting:
                    type: boolean
                required:
                  - app_id
                  - setting
        repository:
          $ref: '#/components/schemas/minimal-repository'
    code-scanning-alert:
      type: object
      properties:
        number:
          $ref: '#/components/schemas/alert-number'
        created_at:
          $ref: '#/components/schemas/alert-created-at'
        updated_at:
          $ref: '#/components/schemas/alert-updated-at'
        url:
          $ref: '#/components/schemas/alert-url'
        html_url:
          $ref: '#/components/schemas/alert-html-url'
        instances_url:
          $ref: '#/components/schemas/alert-instances-url'
        state:
          $ref: '#/components/schemas/code-scanning-alert-state'
        fixed_at:
          $ref: '#/components/schemas/alert-fixed-at'
        dismissed_by:
          $ref: '#/components/schemas/nullable-simple-user'
        dismissed_at:
          $ref: '#/components/schemas/alert-dismissed-at'
        dismissed_reason:
          $ref: '#/components/schemas/code-scanning-alert-dismissed-reason'
        dismissed_comment:
          $ref: '#/components/schemas/code-scanning-alert-dismissed-comment'
        rule:
          $ref: '#/components/schemas/code-scanning-alert-rule'
        tool:
          $ref: '#/components/schemas/code-scanning-analysis-tool'
        most_recent_instance:
          $ref: '#/components/schemas/code-scanning-alert-instance'
      required:
        - number
        - created_at
        - url
        - html_url
        - instances_url
        - state
        - dismissed_by
        - dismissed_at
        - dismissed_reason
        - rule
        - tool
        - most_recent_instance
    code-scanning-analysis:
      type: object
      properties:
        ref:
          $ref: '#/components/schemas/code-scanning-ref'
        commit_sha:
          $ref: '#/components/schemas/code-scanning-analysis-commit-sha'
        analysis_key:
          $ref: '#/components/schemas/code-scanning-analysis-analysis-key'
        environment:
          $ref: '#/components/schemas/code-scanning-analysis-environment'
        category:
          $ref: '#/components/schemas/code-scanning-analysis-category'
        error:
          type: string
          example: error reading field xyz
        created_at:
          $ref: '#/components/schemas/code-scanning-analysis-created-at'
        results_count:
          type: integer
          description: The total number of results in the analysis.
        rules_count:
          type: integer
          description: The total number of rules used in the analysis.
        id:
          type: integer
          description: Unique identifier for this analysis.
        url:
          $ref: '#/components/schemas/code-scanning-analysis-url'
        sarif_id:
          $ref: '#/components/schemas/code-scanning-analysis-sarif-id'
        tool:
          $ref: '#/components/schemas/code-scanning-analysis-tool'
        deletable:
          type: boolean
        warning:
          type: string
          description: Warning generated when processing the analysis
          example: 123 results were ignored
      required:
        - ref
        - commit_sha
        - analysis_key
        - environment
        - error
        - created_at
        - results_count
        - rules_count
        - id
        - url
        - sarif_id
        - tool
        - deletable
        - warning
    code-scanning-analysis-deletion:
      title: Analysis deletion
      description: Successful deletion of a code scanning analysis
      type: object
      properties:
        next_analysis_url:
          type: string
          description: >-
            Next deletable analysis in chain, without last analysis deletion
            confirmation
          format: uri
          readOnly: true
          nullable: true
        confirm_delete_url:
          type: string
          description: >-
            Next deletable analysis in chain, with last analysis deletion
            confirmation
          format: uri
          readOnly: true
          nullable: true
      required:
        - next_analysis_url
        - confirm_delete_url
    code-scanning-default-setup:
      description: Configuration for code scanning default setup.
      type: object
      properties:
        state:
          description: Code scanning default setup has been configured or not.
          type: string
          enum:
            - configured
            - not-configured
        languages:
          description: Languages to be analyzed.
          type: array
          items:
            type: string
            enum:
              - c-cpp
              - csharp
              - go
              - java-kotlin
              - javascript-typescript
              - javascript
              - python
              - ruby
              - typescript
              - swift
        query_suite:
          description: CodeQL query suite to be used.
          type: string
          enum:
            - default
            - extended
        updated_at:
          description: Timestamp of latest configuration update.
          nullable: true
          type: string
          format: date-time
          example: '2023-12-06T14:20:20.000Z'
    empty-object:
      title: Empty Object
      description: An object without any properties.
      type: object
      properties: {}
      additionalProperties: false
    code-scanning-sarifs-status:
      type: object
      properties:
        processing_status:
          type: string
          enum:
            - pending
            - complete
            - failed
          description: >-
            `pending` files have not yet been processed, while `complete` means
            results from the SARIF have been stored. `failed` files have either
            not been processed at all, or could only be partially processed.
        analyses_url:
          type: string
          description: >-
            The REST API URL for getting the analyses associated with the
            upload.
          format: uri
          readOnly: true
          nullable: true
        errors:
          type: array
          items:
            type: string
          description: Any errors that ocurred during processing of the delivery.
          readOnly: true
          nullable: true
    codeowners-errors:
      title: CODEOWNERS errors
      description: A list of errors found in a repo's CODEOWNERS file
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              line:
                description: The line number where this errors occurs.
                type: integer
                example: 7
              column:
                description: The column number where this errors occurs.
                type: integer
                example: 3
              source:
                description: The contents of the line where the error occurs.
                type: string
                example: '* user'
              kind:
                description: The type of error.
                type: string
                example: Invalid owner
              suggestion:
                description: >-
                  Suggested action to fix the error. This will usually be
                  `null`, but is provided for some common errors.
                type: string
                nullable: true
                example: >-
                  The pattern `/` will never match anything, did you mean `*`
                  instead?
              message:
                description: >-
                  A human-readable description of the error, combining
                  information from multiple fields, laid out for display in a
                  monospaced typeface (for example, a command-line setting).
                type: string
                example: |-
                  Invalid owner on line 7:

                    * user
                      ^
              path:
                description: The path of the file where the error occured.
                type: string
                example: .github/CODEOWNERS
            required:
              - line
              - column
              - kind
              - message
              - path
      required:
        - errors
    repository-collaborator-permission:
      title: Repository Collaborator Permission
      description: Repository Collaborator Permission
      type: object
      properties:
        permission:
          type: string
        role_name:
          type: string
          example: admin
        user:
          $ref: '#/components/schemas/nullable-collaborator'
      required:
        - permission
        - role_name
        - user
    commit-comment:
      title: Commit Comment
      description: Commit Comment
      type: object
      properties:
        html_url:
          type: string
          format: uri
        url:
          type: string
          format: uri
        id:
          type: integer
        node_id:
          type: string
        body:
          type: string
        path:
          type: string
          nullable: true
        position:
          type: integer
          nullable: true
        line:
          type: integer
          nullable: true
        commit_id:
          type: string
        user:
          $ref: '#/components/schemas/nullable-simple-user'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        author_association:
          $ref: '#/components/schemas/author-association'
        reactions:
          $ref: '#/components/schemas/reaction-rollup'
      required:
        - url
        - html_url
        - id
        - node_id
        - user
        - position
        - line
        - path
        - commit_id
        - body
        - author_association
        - created_at
        - updated_at
    reaction:
      title: Reaction
      description: >-
        Reactions to conversations provide a way to help people express their
        feelings more simply and effectively.
      type: object
      properties:
        id:
          type: integer
          example: 1
        node_id:
          type: string
          example: MDg6UmVhY3Rpb24x
        user:
          $ref: '#/components/schemas/nullable-simple-user'
        content:
          description: The reaction to use
          example: heart
          type: string
          enum:
            - '+1'
            - '-1'
            - laugh
            - confused
            - heart
            - hooray
            - rocket
            - eyes
        created_at:
          type: string
          format: date-time
          example: '2016-05-20T20:09:31Z'
      required:
        - id
        - node_id
        - user
        - content
        - created_at
    commit:
      title: Commit
      description: Commit
      type: object
      properties:
        url:
          type: string
          format: uri
          example: >-
            https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
        sha:
          type: string
          example: 6dcb09b5b57875f334f61aebed695e2e4193db5e
        node_id:
          type: string
          example: MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==
        html_url:
          type: string
          format: uri
          example: >-
            https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e
        comments_url:
          type: string
          format: uri
          example: >-
            https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments
        commit:
          type: object
          properties:
            url:
              type: string
              format: uri
              example: >-
                https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
            author:
              $ref: '#/components/schemas/nullable-git-user'
            committer:
              $ref: '#/components/schemas/nullable-git-user'
            message:
              type: string
              example: Fix all the bugs
            comment_count:
              type: integer
              example: 0
            tree:
              type: object
              properties:
                sha:
                  type: string
                  example: 827efc6d56897b048c772eb4087f854f46256132
                url:
                  type: string
                  format: uri
                  example: >-
                    https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132
              required:
                - sha
                - url
            verification:
              $ref: '#/components/schemas/verification'
          required:
            - author
            - committer
            - comment_count
            - message
            - tree
            - url
        author:
          $ref: '#/components/schemas/nullable-simple-user'
        committer:
          $ref: '#/components/schemas/nullable-simple-user'
        parents:
          type: array
          items:
            type: object
            properties:
              sha:
                type: string
                example: 7638417db6d59f3c431d3e1f261cc637155684cd
              url:
                type: string
                format: uri
                example: >-
                  https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd
              html_url:
                type: string
                format: uri
                example: >-
                  https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd
            required:
              - sha
              - url
        stats:
          type: object
          properties:
            additions:
              type: integer
            deletions:
              type: integer
            total:
              type: integer
        files:
          type: array
          items:
            $ref: '#/components/schemas/diff-entry'
      required:
        - url
        - sha
        - node_id
        - html_url
        - comments_url
        - commit
        - author
        - committer
        - parents
    combined-commit-status:
      title: Combined Commit Status
      description: Combined Commit Status
      type: object
      properties:
        state:
          type: string
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/simple-commit-status'
        sha:
          type: string
        total_count:
          type: integer
        repository:
          $ref: '#/components/schemas/minimal-repository'
        commit_url:
          type: string
          format: uri
        url:
          type: string
          format: uri
      required:
        - state
        - sha
        - total_count
        - statuses
        - repository
        - commit_url
        - url
    commit-comparison:
      title: Commit Comparison
      description: Commit Comparison
      type: object
      properties:
        url:
          type: string
          format: uri
          example: >-
            https://api.github.com/repos/octocat/Hello-World/compare/master...topic
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World/compare/master...topic
        permalink_url:
          type: string
          format: uri
          example: >-
            https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17
        diff_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World/compare/master...topic.diff
        patch_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World/compare/master...topic.patch
        base_commit:
          $ref: '#/components/schemas/commit'
        merge_base_commit:
          $ref: '#/components/schemas/commit'
        status:
          type: string
          enum:
            - diverged
            - ahead
            - behind
            - identical
          example: ahead
        ahead_by:
          type: integer
          example: 4
        behind_by:
          type: integer
          example: 5
        total_commits:
          type: integer
          example: 6
        commits:
          type: array
          items:
            $ref: '#/components/schemas/commit'
        files:
          type: array
          items:
            $ref: '#/components/schemas/diff-entry'
      required:
        - url
        - html_url
        - permalink_url
        - diff_url
        - patch_url
        - base_commit
        - merge_base_commit
        - status
        - ahead_by
        - behind_by
        - total_commits
        - commits
    file-commit:
      title: File Commit
      description: File Commit
      type: object
      required:
        - content
        - commit
      properties:
        content:
          type: object
          properties:
            name:
              type: string
            path:
              type: string
            sha:
              type: string
            size:
              type: integer
            url:
              type: string
            html_url:
              type: string
            git_url:
              type: string
            download_url:
              type: string
            type:
              type: string
            _links:
              type: object
              properties:
                self:
                  type: string
                git:
                  type: string
                html:
                  type: string
          nullable: true
        commit:
          type: object
          properties:
            sha:
              type: string
            node_id:
              type: string
            url:
              type: string
            html_url:
              type: string
            author:
              type: object
              properties:
                date:
                  type: string
                name:
                  type: string
                email:
                  type: string
            committer:
              type: object
              properties:
                date:
                  type: string
                name:
                  type: string
                email:
                  type: string
            message:
              type: string
            tree:
              type: object
              properties:
                url:
                  type: string
                sha:
                  type: string
            parents:
              type: array
              items:
                type: object
                properties:
                  url:
                    type: string
                  html_url:
                    type: string
                  sha:
                    type: string
            verification:
              type: object
              properties:
                verified:
                  type: boolean
                reason:
                  type: string
                signature:
                  type: string
                  nullable: true
                payload:
                  type: string
                  nullable: true
    dependabot-alert:
      type: object
      description: A Dependabot alert.
      properties:
        number:
          $ref: '#/components/schemas/alert-number'
        state:
          type: string
          description: The state of the Dependabot alert.
          readOnly: true
          enum:
            - auto_dismissed
            - dismissed
            - fixed
            - open
        dependency:
          type: object
          description: Details for the vulnerable dependency.
          readOnly: true
          properties:
            package:
              $ref: '#/components/schemas/dependabot-alert-package'
            manifest_path:
              type: string
              description: >-
                The full path to the dependency manifest file, relative to the
                root of the repository.
              readOnly: true
            scope:
              type: string
              description: The execution scope of the vulnerable dependency.
              readOnly: true
              nullable: true
              enum:
                - development
                - runtime
        security_advisory:
          $ref: '#/components/schemas/dependabot-alert-security-advisory'
        security_vulnerability:
          $ref: '#/components/schemas/dependabot-alert-security-vulnerability'
        url:
          $ref: '#/components/schemas/alert-url'
        html_url:
          $ref: '#/components/schemas/alert-html-url'
        created_at:
          $ref: '#/components/schemas/alert-created-at'
        updated_at:
          $ref: '#/components/schemas/alert-updated-at'
        dismissed_at:
          $ref: '#/components/schemas/alert-dismissed-at'
        dismissed_by:
          $ref: '#/components/schemas/nullable-simple-user'
        dismissed_reason:
          type: string
          description: The reason that the alert was dismissed.
          nullable: true
          enum:
            - fix_started
            - inaccurate
            - no_bandwidth
            - not_used
            - tolerable_risk
        dismissed_comment:
          type: string
          description: An optional comment associated with the alert's dismissal.
          nullable: true
          maxLength: 280
        fixed_at:
          $ref: '#/components/schemas/alert-fixed-at'
        auto_dismissed_at:
          $ref: '#/components/schemas/alert-auto-dismissed-at'
      required:
        - number
        - state
        - dependency
        - security_advisory
        - security_vulnerability
        - url
        - html_url
        - created_at
        - updated_at
        - dismissed_at
        - dismissed_by
        - dismissed_reason
        - dismissed_comment
        - fixed_at
      additionalProperties: false
    dependabot-public-key:
      title: DependabotPublicKey
      description: The public key used for setting Dependabot Secrets.
      type: object
      properties:
        key_id:
          description: The identifier for the key.
          type: string
          example: '1234567'
        key:
          description: The Base64 encoded public key.
          type: string
          example: hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
      required:
        - key_id
        - key
    dependabot-secret:
      title: Dependabot Secret
      description: Set secrets for Dependabot.
      type: object
      properties:
        name:
          description: The name of the secret.
          example: MY_ARTIFACTORY_PASSWORD
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - name
        - created_at
        - updated_at
    dependency-graph-diff:
      title: Dependency Graph Diff
      description: A diff of the dependencies between two commits.
      type: array
      items:
        type: object
        properties:
          change_type:
            type: string
            enum:
              - added
              - removed
          manifest:
            type: string
            example: path/to/package-lock.json
          ecosystem:
            type: string
            example: npm
          name:
            type: string
            example: '@actions/core'
          version:
            type: string
            example: 1.0.0
          package_url:
            type: string
            nullable: true
            example: pkg:/npm/%40actions/core@1.1.0
          license:
            type: string
            nullable: true
            example: MIT
          source_repository_url:
            type: string
            nullable: true
            example: https://github.com/github/actions
          vulnerabilities:
            type: array
            items:
              type: object
              properties:
                severity:
                  type: string
                  example: critical
                advisory_ghsa_id:
                  type: string
                  example: GHSA-rf4j-j272-fj86
                advisory_summary:
                  type: string
                  example: A summary of the advisory.
                advisory_url:
                  type: string
                  example: https://github.com/advisories/GHSA-rf4j-j272-fj86
              required:
                - severity
                - advisory_ghsa_id
                - advisory_summary
                - advisory_url
          scope:
            description: >-
              Where the dependency is utilized. `development` means that the
              dependency is only utilized in the development environment.
              `runtime` means that the dependency is utilized at runtime and in
              the development environment.
            type: string
            enum:
              - unknown
              - runtime
              - development
        required:
          - change_type
          - manifest
          - ecosystem
          - name
          - version
          - package_url
          - license
          - source_repository_url
          - vulnerabilities
          - scope
    dependency-graph-spdx-sbom:
      title: Dependency Graph SPDX SBOM
      description: A schema for the SPDX JSON format returned by the Dependency Graph.
      type: object
      properties:
        sbom:
          type: object
          properties:
            SPDXID:
              type: string
              example: SPDXRef-DOCUMENT
              description: The SPDX identifier for the SPDX document.
            spdxVersion:
              type: string
              example: SPDX-2.3
              description: >-
                The version of the SPDX specification that this document
                conforms to.
            creationInfo:
              type: object
              properties:
                created:
                  type: string
                  example: '2021-11-03T00:00:00Z'
                  description: The date and time the SPDX document was created.
                creators:
                  type: array
                  items:
                    type: string
                    example: GitHub
                  description: The tools that were used to generate the SPDX document.
              required:
                - created
                - creators
            name:
              type: string
              example: github/github
              description: The name of the SPDX document.
            dataLicense:
              type: string
              example: CC0-1.0
              description: The license under which the SPDX document is licensed.
            documentDescribes:
              type: array
              items:
                type: string
                example: github/github
              description: The name of the repository that the SPDX document describes.
            documentNamespace:
              type: string
              example: https://github.com/example/dependency_graph/sbom-123
              description: The namespace for the SPDX document.
            packages:
              type: array
              items:
                type: object
                properties:
                  SPDXID:
                    type: string
                    example: SPDXRef-Package
                    description: A unique SPDX identifier for the package.
                  name:
                    type: string
                    example: rubygems:github/github
                    description: The name of the package.
                  versionInfo:
                    type: string
                    example: 1.0.0
                    description: >-
                      The version of the package. If the package does not have
                      an exact version specified,

                      a version range is given.
                  downloadLocation:
                    type: string
                    example: NOASSERTION
                    description: |-
                      The location where the package can be downloaded,
                      or NOASSERTION if this has not been determined.
                  filesAnalyzed:
                    type: boolean
                    example: false
                    description: |-
                      Whether the package's file content has been subjected to
                      analysis during the creation of the SPDX document.
                  licenseConcluded:
                    type: string
                    example: MIT
                    description: >-
                      The license of the package as determined while creating
                      the SPDX document.
                  licenseDeclared:
                    type: string
                    example: NOASSERTION
                    description: >-
                      The license of the package as declared by its author, or
                      NOASSERTION if this information

                      was not available when the SPDX document was created.
                  supplier:
                    type: string
                    example: NOASSERTION
                    description: >-
                      The distribution source of this package, or NOASSERTION if
                      this was not determined.
                  externalRefs:
                    type: array
                    items:
                      type: object
                      properties:
                        referenceCategory:
                          type: string
                          example: PACKAGE-MANAGER
                          description: >-
                            The category of reference to an external resource
                            this reference refers to.
                        referenceLocator:
                          type: string
                          example: pkg:gem/rails@6.0.1
                          description: >-
                            A locator for the particular external resource this
                            reference refers to.
                        referenceType:
                          type: string
                          example: purl
                          description: >-
                            The category of reference to an external resource
                            this reference refers to.
                      required:
                        - referenceCategory
                        - referenceLocator
                        - referenceType
              required:
                - SPDXID
                - name
                - versionInfo
                - downloadLocation
                - filesAnalyzed
                - licenseConcluded
                - licenseDeclared
                - supplier
          required:
            - SPDXID
            - spdxVersion
            - creationInfo
            - name
            - dataLicense
            - documentDescribes
            - documentNamespace
            - packages
      required:
        - sbom
    deployment:
      title: Deployment
      description: A request for a specific ref(branch,sha,tag) to be deployed
      type: object
      properties:
        url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/example/deployments/1
        id:
          description: Unique identifier of the deployment
          example: 42
          type: integer
        node_id:
          type: string
          example: MDEwOkRlcGxveW1lbnQx
        sha:
          type: string
          example: a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d
        ref:
          description: The ref to deploy. This can be a branch, tag, or sha.
          example: topic-branch
          type: string
        task:
          description: Parameter to specify a task to execute
          example: deploy
          type: string
        payload:
          oneOf:
            - type: object
              additionalProperties: true
            - type: string
        original_environment:
          type: string
          example: staging
        environment:
          description: Name for the target deployment environment.
          example: production
          type: string
        description:
          type: string
          example: Deploy request from hubot
          nullable: true
        creator:
          $ref: '#/components/schemas/nullable-simple-user'
        created_at:
          type: string
          format: date-time
          example: '2012-07-20T01:19:13Z'
        updated_at:
          type: string
          format: date-time
          example: '2012-07-20T01:19:13Z'
        statuses_url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/example/deployments/1/statuses
        repository_url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/example
        transient_environment:
          description: >-
            Specifies if the given environment is will no longer exist at some
            point in the future. Default: false.
          example: true
          type: boolean
        production_environment:
          description: >-
            Specifies if the given environment is one that end-users directly
            interact with. Default: false.
          example: true
          type: boolean
        performed_via_github_app:
          $ref: '#/components/schemas/nullable-integration'
      required:
        - id
        - node_id
        - sha
        - ref
        - task
        - environment
        - creator
        - payload
        - description
        - statuses_url
        - repository_url
        - url
        - created_at
        - updated_at
    deployment-status:
      title: Deployment Status
      description: The status of a deployment.
      type: object
      properties:
        url:
          type: string
          format: uri
          example: >-
            https://api.github.com/repos/octocat/example/deployments/42/statuses/1
        id:
          type: integer
          example: 1
        node_id:
          type: string
          example: MDE2OkRlcGxveW1lbnRTdGF0dXMx
        state:
          description: The state of the status.
          enum:
            - error
            - failure
            - inactive
            - pending
            - success
            - queued
            - in_progress
          example: success
          type: string
        creator:
          $ref: '#/components/schemas/nullable-simple-user'
        description:
          description: A short description of the status.
          default: ''
          type: string
          maxLength: 140
          example: Deployment finished successfully.
        environment:
          description: The environment of the deployment that the status is for.
          default: ''
          type: string
          example: production
        target_url:
          description: 'Deprecated: the URL to associate with this status.'
          default: ''
          type: string
          format: uri
          example: https://example.com/deployment/42/output
        created_at:
          type: string
          format: date-time
          example: '2012-07-20T01:19:13Z'
        updated_at:
          type: string
          format: date-time
          example: '2012-07-20T01:19:13Z'
        deployment_url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/example/deployments/42
        repository_url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/example
        environment_url:
          description: The URL for accessing your environment.
          default: ''
          type: string
          format: uri
          example: https://staging.example.com/
        log_url:
          description: The URL to associate with this status.
          default: ''
          type: string
          format: uri
          example: https://example.com/deployment/42/output
        performed_via_github_app:
          $ref: '#/components/schemas/nullable-integration'
      required:
        - id
        - node_id
        - state
        - creator
        - description
        - deployment_url
        - target_url
        - repository_url
        - url
        - created_at
        - updated_at
    environment:
      title: Environment
      description: Details of a deployment environment
      type: object
      properties:
        id:
          description: The id of the environment.
          example: 56780428
          type: integer
        node_id:
          type: string
          example: MDExOkVudmlyb25tZW50NTY3ODA0Mjg=
        name:
          description: The name of the environment.
          example: staging
          type: string
        url:
          type: string
          example: https://api.github.com/repos/github/hello-world/environments/staging
        html_url:
          type: string
          example: >-
            https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging
        created_at:
          description: The time that the environment was created, in ISO 8601 format.
          example: '2020-11-23T22:00:40Z'
          format: date-time
          type: string
        updated_at:
          description: The time that the environment was last updated, in ISO 8601 format.
          example: '2020-11-23T22:00:40Z'
          format: date-time
          type: string
        protection_rules:
          type: array
          description: Built-in deployment protection rules for the environment.
          items:
            anyOf:
              - type: object
                properties:
                  id:
                    type: integer
                    example: 3515
                  node_id:
                    type: string
                    example: MDQ6R2F0ZTM1MTU=
                  type:
                    type: string
                    example: wait_timer
                  wait_timer:
                    $ref: '#/components/schemas/wait-timer'
                required:
                  - id
                  - node_id
                  - type
              - type: object
                properties:
                  id:
                    type: integer
                    example: 3755
                  node_id:
                    type: string
                    example: MDQ6R2F0ZTM3NTU=
                  type:
                    type: string
                    example: required_reviewers
                  reviewers:
                    type: array
                    description: >-
                      The people or teams that may approve jobs that reference
                      the environment. You can list up to six users or teams as
                      reviewers. The reviewers must have at least read access to
                      the repository. Only one of the required reviewers needs
                      to approve the job for it to proceed.
                    items:
                      type: object
                      properties:
                        type:
                          $ref: '#/components/schemas/deployment-reviewer-type'
                        reviewer:
                          anyOf:
                            - $ref: '#/components/schemas/simple-user'
                            - $ref: '#/components/schemas/team'
                required:
                  - id
                  - node_id
                  - type
              - type: object
                properties:
                  id:
                    type: integer
                    example: 3515
                  node_id:
                    type: string
                    example: MDQ6R2F0ZTM1MTU=
                  type:
                    type: string
                    example: branch_policy
                required:
                  - id
                  - node_id
                  - type
        deployment_branch_policy:
          $ref: '#/components/schemas/deployment-branch-policy-settings'
      required:
        - id
        - node_id
        - name
        - url
        - html_url
        - created_at
        - updated_at
    deployment-branch-policy:
      title: Deployment branch policy
      description: Details of a deployment branch policy.
      type: object
      properties:
        id:
          description: The unique identifier of the branch policy.
          type: integer
          example: 361471
        node_id:
          type: string
          example: MDE2OkdhdGVCcmFuY2hQb2xpY3kzNjE0NzE=
        name:
          description: >-
            The name pattern that branches must match in order to deploy to the
            environment.
          type: string
          example: release/*
    blob:
      title: Blob
      description: Blob
      type: object
      properties:
        content:
          type: string
        encoding:
          type: string
        url:
          type: string
          format: uri
        sha:
          type: string
        size:
          type: integer
          nullable: true
        node_id:
          type: string
        highlighted_content:
          type: string
      required:
        - sha
        - url
        - node_id
        - size
        - content
        - encoding
    git-commit:
      title: Git Commit
      description: Low-level Git commit operations within a repository
      type: object
      properties:
        sha:
          description: SHA for the commit
          example: 7638417db6d59f3c431d3e1f261cc637155684cd
          type: string
        node_id:
          type: string
        url:
          type: string
          format: uri
        author:
          description: Identifying information for the git-user
          type: object
          properties:
            date:
              description: Timestamp of the commit
              example: '2014-08-09T08:02:04+12:00'
              format: date-time
              type: string
            email:
              type: string
              description: Git email address of the user
              example: monalisa.octocat@example.com
            name:
              description: Name of the git user
              example: Monalisa Octocat
              type: string
          required:
            - email
            - name
            - date
        committer:
          description: Identifying information for the git-user
          type: object
          properties:
            date:
              description: Timestamp of the commit
              example: '2014-08-09T08:02:04+12:00'
              format: date-time
              type: string
            email:
              type: string
              description: Git email address of the user
              example: monalisa.octocat@example.com
            name:
              description: Name of the git user
              example: Monalisa Octocat
              type: string
          required:
            - email
            - name
            - date
        message:
          description: Message describing the purpose of the commit
          example: 'Fix #42'
          type: string
        tree:
          type: object
          properties:
            sha:
              description: SHA for the commit
              example: 7638417db6d59f3c431d3e1f261cc637155684cd
              type: string
            url:
              type: string
              format: uri
          required:
            - sha
            - url
        parents:
          type: array
          items:
            type: object
            properties:
              sha:
                description: SHA for the commit
                example: 7638417db6d59f3c431d3e1f261cc637155684cd
                type: string
              url:
                type: string
                format: uri
              html_url:
                type: string
                format: uri
            required:
              - sha
              - url
              - html_url
        verification:
          type: object
          properties:
            verified:
              type: boolean
            reason:
              type: string
            signature:
              type: string
              nullable: true
            payload:
              type: string
              nullable: true
          required:
            - verified
            - reason
            - signature
            - payload
        html_url:
          type: string
          format: uri
      required:
        - sha
        - node_id
        - url
        - html_url
        - author
        - committer
        - tree
        - message
        - parents
        - verification
    git-ref:
      title: Git Reference
      description: Git references within a repository
      type: object
      properties:
        ref:
          type: string
        node_id:
          type: string
        url:
          type: string
          format: uri
        object:
          type: object
          properties:
            type:
              type: string
            sha:
              description: SHA for the reference
              example: 7638417db6d59f3c431d3e1f261cc637155684cd
              type: string
              minLength: 40
              maxLength: 40
            url:
              type: string
              format: uri
          required:
            - type
            - sha
            - url
      required:
        - ref
        - node_id
        - url
        - object
    git-tag:
      title: Git Tag
      description: Metadata for a Git tag
      type: object
      properties:
        node_id:
          type: string
          example: MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==
        tag:
          description: Name of the tag
          example: v0.0.1
          type: string
        sha:
          type: string
          example: 940bd336248efae0f9ee5bc7b2d5c985887b16ac
        url:
          description: URL for the tag
          example: >-
            https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac
          type: string
          format: uri
        message:
          description: Message describing the purpose of the tag
          example: Initial public release
          type: string
        tagger:
          type: object
          properties:
            date:
              type: string
            email:
              type: string
            name:
              type: string
          required:
            - date
            - email
            - name
        object:
          type: object
          properties:
            sha:
              type: string
            type:
              type: string
            url:
              type: string
              format: uri
          required:
            - sha
            - type
            - url
        verification:
          $ref: '#/components/schemas/verification'
      required:
        - sha
        - url
        - node_id
        - tagger
        - object
        - tag
        - message
    git-tree:
      title: Git Tree
      description: The hierarchy between files in a Git repository.
      type: object
      properties:
        sha:
          type: string
        url:
          type: string
          format: uri
        truncated:
          type: boolean
        tree:
          description: Objects specifying a tree structure
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                example: test/file.rb
              mode:
                type: string
                example: '040000'
              type:
                type: string
                example: tree
              sha:
                type: string
                example: 23f6827669e43831def8a7ad935069c8bd418261
              size:
                type: integer
                example: 12
              url:
                type: string
                example: >-
                  https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261
          example:
            - path: file.rb
              mode: '100644'
              type: blob
              size: 30
              sha: 44b4fc6d56897b048c772eb4087f854f46256132
              url: >-
                https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132
              properties:
                path:
                  type: string
                mode:
                  type: string
                type:
                  type: string
                size:
                  type: integer
                sha:
                  type: string
                url:
                  type: string
              required:
                - path
                - mode
                - type
                - sha
                - url
                - size
      required:
        - sha
        - url
        - tree
        - truncated
    hook:
      title: Webhook
      description: Webhooks for repositories.
      type: object
      properties:
        type:
          type: string
        id:
          description: Unique identifier of the webhook.
          example: 42
          type: integer
        name:
          description: The name of a valid service, use 'web' for a webhook.
          example: web
          type: string
        active:
          description: Determines whether the hook is actually triggered on pushes.
          type: boolean
          example: true
        events:
          description: 'Determines what events the hook is triggered for. Default: [''push''].'
          type: array
          items:
            type: string
          example:
            - push
            - pull_request
        config:
          $ref: '#/components/schemas/webhook-config'
        updated_at:
          type: string
          format: date-time
          example: '2011-09-06T20:39:23Z'
        created_at:
          type: string
          format: date-time
          example: '2011-09-06T17:26:27Z'
        url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/hooks/1
        test_url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/hooks/1/test
        ping_url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/hooks/1/pings
        deliveries_url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries
        last_response:
          $ref: '#/components/schemas/hook-response'
      required:
        - id
        - url
        - type
        - name
        - active
        - events
        - config
        - ping_url
        - created_at
        - updated_at
        - last_response
        - test_url
    webhook-config:
      title: Webhook Configuration
      description: Configuration object of the webhook
      type: object
      properties:
        url:
          $ref: '#/components/schemas/webhook-config-url'
        content_type:
          $ref: '#/components/schemas/webhook-config-content-type'
        secret:
          $ref: '#/components/schemas/webhook-config-secret'
        insecure_ssl:
          $ref: '#/components/schemas/webhook-config-insecure-ssl'
    hook-delivery:
      title: Webhook delivery
      description: Delivery made by a webhook.
      type: object
      properties:
        id:
          description: Unique identifier of the delivery.
          type: integer
          example: 42
        guid:
          description: >-
            Unique identifier for the event (shared with all deliveries for all
            webhooks that subscribe to this event).
          type: string
          example: 58474f00-b361-11eb-836d-0e4f3503ccbe
        delivered_at:
          description: Time when the delivery was delivered.
          type: string
          format: date-time
          example: '2021-05-12T20:33:44Z'
        redelivery:
          description: Whether the delivery is a redelivery.
          type: boolean
          example: false
        duration:
          description: Time spent delivering.
          type: number
          example: 0.03
        status:
          description: Description of the status of the attempted delivery
          type: string
          example: failed to connect
        status_code:
          description: Status code received when delivery was made.
          type: integer
          example: 502
        event:
          description: The event that triggered the delivery.
          type: string
          example: issues
        action:
          description: The type of activity for the event that triggered the delivery.
          type: string
          example: opened
          nullable: true
        installation_id:
          description: The id of the GitHub App installation associated with this event.
          type: integer
          example: 123
          nullable: true
        repository_id:
          description: The id of the repository associated with this event.
          type: integer
          example: 123
          nullable: true
        url:
          description: The URL target of the delivery.
          type: string
          example: https://www.example.com
        request:
          type: object
          properties:
            headers:
              description: The request headers sent with the webhook delivery.
              type: object
              nullable: true
              additionalProperties: true
            payload:
              description: The webhook payload.
              type: object
              nullable: true
              additionalProperties: true
          required:
            - headers
            - payload
        response:
          type: object
          properties:
            headers:
              description: The response headers received when the delivery was made.
              type: object
              nullable: true
              additionalProperties: true
            payload:
              description: The response payload received.
              type: string
              nullable: true
              additionalProperties: true
          required:
            - headers
            - payload
      required:
        - id
        - guid
        - delivered_at
        - redelivery
        - duration
        - status
        - status_code
        - event
        - action
        - installation_id
        - repository_id
        - request
        - response
    installation:
      title: Installation
      description: Installation
      type: object
      properties:
        id:
          description: The ID of the installation.
          type: integer
          example: 1
        account:
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/simple-user'
            - $ref: '#/components/schemas/enterprise'
        repository_selection:
          description: >-
            Describe whether all repositories have been selected or there's a
            selection involved
          type: string
          enum:
            - all
            - selected
        access_tokens_url:
          type: string
          format: uri
          example: https://api.github.com/app/installations/1/access_tokens
        repositories_url:
          type: string
          format: uri
          example: https://api.github.com/installation/repositories
        html_url:
          type: string
          format: uri
          example: https://github.com/organizations/github/settings/installations/1
        app_id:
          type: integer
          example: 1
        target_id:
          description: The ID of the user or organization this token is being scoped to.
          type: integer
        target_type:
          type: string
          example: Organization
        permissions:
          $ref: '#/components/schemas/app-permissions'
        events:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        single_file_name:
          type: string
          example: config.yaml
          nullable: true
        has_multiple_single_files:
          type: boolean
          example: true
        single_file_paths:
          type: array
          items:
            type: string
          example:
            - config.yml
            - .github/issue_TEMPLATE.md
        app_slug:
          type: string
          example: github-actions
        suspended_by:
          $ref: '#/components/schemas/nullable-simple-user'
        suspended_at:
          type: string
          format: date-time
          nullable: true
        contact_email:
          type: string
          example: '"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"'
          nullable: true
      required:
        - id
        - app_id
        - app_slug
        - target_id
        - target_type
        - single_file_name
        - repository_selection
        - access_tokens_url
        - html_url
        - repositories_url
        - events
        - account
        - permissions
        - created_at
        - updated_at
        - suspended_by
        - suspended_at
    repository-invitation:
      title: Repository Invitation
      description: Repository invitations let you manage who you collaborate with.
      type: object
      properties:
        id:
          description: Unique identifier of the repository invitation.
          example: 42
          type: integer
        repository:
          $ref: '#/components/schemas/minimal-repository'
        invitee:
          $ref: '#/components/schemas/nullable-simple-user'
        inviter:
          $ref: '#/components/schemas/nullable-simple-user'
        permissions:
          description: The permission associated with the invitation.
          example: read
          type: string
          enum:
            - read
            - write
            - admin
            - triage
            - maintain
        created_at:
          type: string
          format: date-time
          example: '2016-06-13T14:52:50-05:00'
        expired:
          description: Whether or not the invitation has expired
          type: boolean
        url:
          description: URL for the repository invitation
          example: https://api.github.com/user/repository-invitations/1
          type: string
        html_url:
          type: string
          example: https://github.com/octocat/Hello-World/invitations
        node_id:
          type: string
      required:
        - id
        - node_id
        - permissions
        - inviter
        - invitee
        - repository
        - url
        - html_url
        - created_at
    issue-comment:
      title: Issue Comment
      description: Comments provide a way for people to collaborate on an issue.
      type: object
      properties:
        id:
          description: Unique identifier of the issue comment
          example: 42
          type: integer
          format: int64
        node_id:
          type: string
        url:
          description: URL for the issue comment
          example: https://api.github.com/repositories/42/issues/comments/1
          type: string
          format: uri
        body:
          description: Contents of the issue comment
          example: What version of Safari were you using when you observed this bug?
          type: string
        body_text:
          type: string
        body_html:
          type: string
        html_url:
          type: string
          format: uri
        user:
          $ref: '#/components/schemas/nullable-simple-user'
        created_at:
          type: string
          format: date-time
          example: '2011-04-14T16:00:49Z'
        updated_at:
          type: string
          format: date-time
          example: '2011-04-14T16:00:49Z'
        issue_url:
          type: string
          format: uri
        author_association:
          $ref: '#/components/schemas/author-association'
        performed_via_github_app:
          $ref: '#/components/schemas/nullable-integration'
        reactions:
          $ref: '#/components/schemas/reaction-rollup'
      required:
        - id
        - node_id
        - html_url
        - issue_url
        - author_association
        - user
        - url
        - created_at
        - updated_at
    issue-event:
      title: Issue Event
      description: Issue Event
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        node_id:
          type: string
          example: MDEwOklzc3VlRXZlbnQx
        url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/issues/events/1
        actor:
          $ref: '#/components/schemas/nullable-simple-user'
        event:
          type: string
          example: closed
        commit_id:
          type: string
          example: 6dcb09b5b57875f334f61aebed695e2e4193db5e
          nullable: true
        commit_url:
          type: string
          example: >-
            https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2011-04-14T16:00:49Z'
        issue:
          $ref: '#/components/schemas/nullable-issue'
        label:
          $ref: '#/components/schemas/issue-event-label'
        assignee:
          $ref: '#/components/schemas/nullable-simple-user'
        assigner:
          $ref: '#/components/schemas/nullable-simple-user'
        review_requester:
          $ref: '#/components/schemas/nullable-simple-user'
        requested_reviewer:
          $ref: '#/components/schemas/nullable-simple-user'
        requested_team:
          $ref: '#/components/schemas/team'
        dismissed_review:
          $ref: '#/components/schemas/issue-event-dismissed-review'
        milestone:
          $ref: '#/components/schemas/issue-event-milestone'
        project_card:
          $ref: '#/components/schemas/issue-event-project-card'
        rename:
          $ref: '#/components/schemas/issue-event-rename'
        author_association:
          $ref: '#/components/schemas/author-association'
        lock_reason:
          type: string
          nullable: true
        performed_via_github_app:
          $ref: '#/components/schemas/nullable-integration'
      required:
        - id
        - node_id
        - url
        - actor
        - event
        - commit_id
        - commit_url
        - created_at
    issue:
      title: Issue
      description: >-
        Issues are a great way to keep track of tasks, enhancements, and bugs
        for your projects.
      type: object
      properties:
        id:
          type: integer
          format: int64
        node_id:
          type: string
        url:
          description: URL for the issue
          example: https://api.github.com/repositories/42/issues/1
          type: string
          format: uri
        repository_url:
          type: string
          format: uri
        labels_url:
          type: string
        comments_url:
          type: string
          format: uri
        events_url:
          type: string
          format: uri
        html_url:
          type: string
          format: uri
        number:
          description: Number uniquely identifying the issue within its repository
          example: 42
          type: integer
        state:
          description: State of the issue; either 'open' or 'closed'
          example: open
          type: string
        state_reason:
          description: The reason for the current state
          example: not_planned
          type: string
          nullable: true
          enum:
            - completed
            - reopened
            - not_planned
        title:
          description: Title of the issue
          example: Widget creation fails in Safari on OS X 10.8
          type: string
        body:
          description: Contents of the issue
          example: >-
            It looks like the new widget form is broken on Safari. When I try
            and create the widget, Safari crashes. This is reproducible on 10.8,
            but not 10.9. Maybe a browser bug?
          type: string
          nullable: true
        user:
          $ref: '#/components/schemas/nullable-simple-user'
        labels:
          description: >-
            Labels to associate with this issue; pass one or more label names to
            replace the set of labels on this issue; send an empty array to
            clear all labels from the issue; note that the labels are silently
            dropped for users without push access to the repository
          example:
            - bug
            - registration
          type: array
          items:
            oneOf:
              - type: string
              - type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  node_id:
                    type: string
                  url:
                    type: string
                    format: uri
                  name:
                    type: string
                  description:
                    type: string
                    nullable: true
                  color:
                    type: string
                    nullable: true
                  default:
                    type: boolean
        assignee:
          $ref: '#/components/schemas/nullable-simple-user'
        assignees:
          type: array
          items:
            $ref: '#/components/schemas/simple-user'
          nullable: true
        milestone:
          $ref: '#/components/schemas/nullable-milestone'
        locked:
          type: boolean
        active_lock_reason:
          type: string
          nullable: true
        comments:
          type: integer
        pull_request:
          type: object
          properties:
            merged_at:
              type: string
              format: date-time
              nullable: true
            diff_url:
              type: string
              format: uri
              nullable: true
            html_url:
              type: string
              format: uri
              nullable: true
            patch_url:
              type: string
              format: uri
              nullable: true
            url:
              type: string
              format: uri
              nullable: true
          required:
            - diff_url
            - html_url
            - patch_url
            - url
        closed_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        draft:
          type: boolean
        closed_by:
          $ref: '#/components/schemas/nullable-simple-user'
        body_html:
          type: string
        body_text:
          type: string
        timeline_url:
          type: string
          format: uri
        repository:
          $ref: '#/components/schemas/repository'
        performed_via_github_app:
          $ref: '#/components/schemas/nullable-integration'
        author_association:
          $ref: '#/components/schemas/author-association'
        reactions:
          $ref: '#/components/schemas/reaction-rollup'
      required:
        - assignee
        - closed_at
        - comments
        - comments_url
        - events_url
        - html_url
        - id
        - node_id
        - labels
        - labels_url
        - milestone
        - number
        - repository_url
        - state
        - locked
        - title
        - url
        - user
        - author_association
        - created_at
        - updated_at
    deploy-key:
      title: Deploy Key
      description: An SSH key granting access to a single repository.
      type: object
      properties:
        id:
          type: integer
        key:
          type: string
        url:
          type: string
        title:
          type: string
        verified:
          type: boolean
        created_at:
          type: string
        read_only:
          type: boolean
        added_by:
          type: string
          nullable: true
        last_used:
          type: string
          nullable: true
      required:
        - id
        - key
        - url
        - title
        - verified
        - created_at
        - read_only
    label:
      title: Label
      description: >-
        Color-coded labels help you categorize and filter your issues (just like
        labels in Gmail).
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 208045946
        node_id:
          type: string
          example: MDU6TGFiZWwyMDgwNDU5NDY=
        url:
          description: URL for the label
          example: https://api.github.com/repositories/42/labels/bug
          type: string
          format: uri
        name:
          description: The name of the label.
          example: bug
          type: string
        description:
          type: string
          example: Something isn't working
          nullable: true
        color:
          description: '6-character hex code, without the leading #, identifying the color'
          example: FFFFFF
          type: string
        default:
          type: boolean
          example: true
      required:
        - id
        - node_id
        - url
        - name
        - description
        - color
        - default
    language:
      title: Language
      description: Language
      type: object
      additionalProperties:
        type: integer
    license-content:
      title: License Content
      description: License Content
      type: object
      properties:
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        size:
          type: integer
        url:
          type: string
          format: uri
        html_url:
          type: string
          format: uri
          nullable: true
        git_url:
          type: string
          format: uri
          nullable: true
        download_url:
          type: string
          format: uri
          nullable: true
        type:
          type: string
        content:
          type: string
        encoding:
          type: string
        _links:
          type: object
          properties:
            git:
              type: string
              format: uri
              nullable: true
            html:
              type: string
              format: uri
              nullable: true
            self:
              type: string
              format: uri
          required:
            - git
            - html
            - self
        license:
          $ref: '#/components/schemas/nullable-license-simple'
      required:
        - _links
        - git_url
        - html_url
        - download_url
        - name
        - path
        - sha
        - size
        - type
        - url
        - content
        - encoding
        - license
    merged-upstream:
      title: Merged upstream
      description: Results of a successful merge upstream request
      type: object
      properties:
        message:
          type: string
        merge_type:
          type: string
          enum:
            - merge
            - fast-forward
            - none
        base_branch:
          type: string
    milestone:
      title: Milestone
      description: A collection of related issues and pull requests.
      type: object
      properties:
        url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/milestones/1
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World/milestones/v1.0
        labels_url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/milestones/1/labels
        id:
          type: integer
          example: 1002604
        node_id:
          type: string
          example: MDk6TWlsZXN0b25lMTAwMjYwNA==
        number:
          description: The number of the milestone.
          type: integer
          example: 42
        state:
          description: The state of the milestone.
          example: open
          type: string
          enum:
            - open
            - closed
          default: open
        title:
          description: The title of the milestone.
          example: v1.0
          type: string
        description:
          type: string
          example: Tracking milestone for version 1.0
          nullable: true
        creator:
          $ref: '#/components/schemas/nullable-simple-user'
        open_issues:
          type: integer
          example: 4
        closed_issues:
          type: integer
          example: 8
        created_at:
          type: string
          format: date-time
          example: '2011-04-10T20:09:31Z'
        updated_at:
          type: string
          format: date-time
          example: '2014-03-03T18:58:10Z'
        closed_at:
          type: string
          format: date-time
          example: '2013-02-12T13:22:01Z'
          nullable: true
        due_on:
          type: string
          format: date-time
          example: '2012-10-09T23:39:01Z'
          nullable: true
      required:
        - closed_issues
        - creator
        - description
        - due_on
        - closed_at
        - id
        - node_id
        - labels_url
        - html_url
        - number
        - open_issues
        - state
        - title
        - url
        - created_at
        - updated_at
    page:
      title: GitHub Pages
      description: The configuration for GitHub Pages for a repository.
      type: object
      properties:
        url:
          type: string
          description: The API address for accessing this Page resource.
          format: uri
          example: https://api.github.com/repos/github/hello-world/pages
        status:
          type: string
          description: The status of the most recent build of the Page.
          example: built
          enum:
            - built
            - building
            - errored
          nullable: true
        cname:
          description: The Pages site's custom domain
          example: example.com
          type: string
          nullable: true
        protected_domain_state:
          type: string
          description: The state if the domain is verified
          example: pending
          nullable: true
          enum:
            - pending
            - verified
            - unverified
        pending_domain_unverified_at:
          type: string
          description: The timestamp when a pending domain becomes unverified.
          nullable: true
          format: date-time
        custom_404:
          type: boolean
          description: Whether the Page has a custom 404 page.
          example: false
          default: false
        html_url:
          type: string
          description: The web address the Page can be accessed from.
          format: uri
          example: https://example.com
        build_type:
          type: string
          description: The process in which the Page will be built.
          example: legacy
          nullable: true
          enum:
            - legacy
            - workflow
        source:
          $ref: '#/components/schemas/pages-source-hash'
        public:
          type: boolean
          description: >-
            Whether the GitHub Pages site is publicly visible. If set to `true`,
            the site is accessible to anyone on the internet. If set to `false`,
            the site will only be accessible to users who have at least `read`
            access to the repository that published the site.
          example: true
        https_certificate:
          $ref: '#/components/schemas/pages-https-certificate'
        https_enforced:
          type: boolean
          description: Whether https is enabled on the domain
          example: true
      required:
        - url
        - status
        - cname
        - custom_404
        - public
    page-build:
      title: Page Build
      description: Page Build
      type: object
      properties:
        url:
          type: string
          format: uri
        status:
          type: string
        error:
          type: object
          properties:
            message:
              type: string
              nullable: true
          required:
            - message
        pusher:
          $ref: '#/components/schemas/nullable-simple-user'
        commit:
          type: string
        duration:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - url
        - status
        - error
        - pusher
        - commit
        - duration
        - created_at
        - updated_at
    page-deployment:
      title: GitHub Pages
      description: The GitHub Pages deployment status.
      type: object
      properties:
        status_url:
          type: string
          description: The URI to monitor GitHub Pages deployment status.
          format: uri
          example: >-
            https://api.github.com/repos/github/hello-world/pages/deployment/status/4fd754f7e594640989b406850d0bc8f06a121251
        page_url:
          type: string
          description: The URI to the deployed GitHub Pages.
          format: uri
          example: hello-world.github.io
        preview_url:
          type: string
          description: The URI to the deployed GitHub Pages preview.
          format: uri
          example: monalisa-1231a2312sa32-23sda74.drafts.github.io
      required:
        - status_url
        - page_url
    repository-pre-receive-hook:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        enforcement:
          type: string
        configuration_url:
          type: string
    pull-request-review-comment:
      title: Pull Request Review Comment
      description: >-
        Pull Request Review Comments are comments on a portion of the Pull
        Request's diff.
      type: object
      properties:
        url:
          description: URL for the pull request review comment
          example: https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
          type: string
        pull_request_review_id:
          description: The ID of the pull request review to which the comment belongs.
          example: 42
          type: integer
          nullable: true
        id:
          description: The ID of the pull request review comment.
          example: 1
          type: integer
        node_id:
          description: The node ID of the pull request review comment.
          type: string
          example: MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw
        diff_hunk:
          description: The diff of the line that the comment refers to.
          type: string
          example: '@@ -16,33 +16,40 @@ public class Connection : IConnection...'
        path:
          description: The relative path of the file to which the comment applies.
          example: config/database.yaml
          type: string
        position:
          description: >-
            The line index in the diff to which the comment applies. This field
            is deprecated; use `line` instead.
          example: 1
          type: integer
        original_position:
          description: >-
            The index of the original line in the diff to which the comment
            applies. This field is deprecated; use `original_line` instead.
          example: 4
          type: integer
        commit_id:
          description: The SHA of the commit to which the comment applies.
          example: 6dcb09b5b57875f334f61aebed695e2e4193db5e
          type: string
        original_commit_id:
          description: The SHA of the original commit to which the comment applies.
          example: 9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840
          type: string
        in_reply_to_id:
          description: The comment ID to reply to.
          example: 8
          type: integer
        user:
          $ref: '#/components/schemas/simple-user'
        body:
          description: The text of the comment.
          example: We should probably include a check for null values here.
          type: string
        created_at:
          type: string
          format: date-time
          example: '2011-04-14T16:00:49Z'
        updated_at:
          type: string
          format: date-time
          example: '2011-04-14T16:00:49Z'
        html_url:
          description: HTML URL for the pull request review comment.
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
        pull_request_url:
          description: URL for the pull request that the review comment belongs to.
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/pulls/1
        author_association:
          $ref: '#/components/schemas/author-association'
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  format: uri
                  example: >-
                    https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
              required:
                - href
            html:
              type: object
              properties:
                href:
                  type: string
                  format: uri
                  example: >-
                    https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
              required:
                - href
            pull_request:
              type: object
              properties:
                href:
                  type: string
                  format: uri
                  example: https://api.github.com/repos/octocat/Hello-World/pulls/1
              required:
                - href
          required:
            - self
            - html
            - pull_request
        start_line:
          type: integer
          description: The first line of the range for a multi-line comment.
          example: 2
          nullable: true
        original_start_line:
          type: integer
          description: The first line of the range for a multi-line comment.
          example: 2
          nullable: true
        start_side:
          type: string
          description: The side of the first line of the range for a multi-line comment.
          enum:
            - LEFT
            - RIGHT
          default: RIGHT
          nullable: true
        line:
          description: >-
            The line of the blob to which the comment applies. The last line of
            the range for a multi-line comment
          example: 2
          type: integer
        original_line:
          description: >-
            The line of the blob to which the comment applies. The last line of
            the range for a multi-line comment
          example: 2
          type: integer
        side:
          description: >-
            The side of the diff to which the comment applies. The side of the
            last line of the range for a multi-line comment
          enum:
            - LEFT
            - RIGHT
          default: RIGHT
          type: string
        subject_type:
          description: >-
            The level at which the comment is targeted, can be a diff line or a
            file.
          type: string
          enum:
            - line
            - file
        reactions:
          $ref: '#/components/schemas/reaction-rollup'
        body_html:
          type: string
          example: '"<p>comment body</p>"'
        body_text:
          type: string
          example: '"comment body"'
      required:
        - url
        - id
        - node_id
        - pull_request_review_id
        - diff_hunk
        - path
        - commit_id
        - original_commit_id
        - user
        - body
        - created_at
        - updated_at
        - html_url
        - pull_request_url
        - author_association
        - _links
    pull-request:
      type: object
      title: Pull Request
      description: >-
        Pull requests let you tell others about changes you've pushed to a
        repository on GitHub. Once a pull request is sent, interested parties
        can review the set of changes, discuss potential modifications, and even
        push follow-up commits if necessary.
      properties:
        url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/pulls/1347
        id:
          type: integer
          example: 1
        node_id:
          type: string
          example: MDExOlB1bGxSZXF1ZXN0MQ==
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World/pull/1347
        diff_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World/pull/1347.diff
        patch_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World/pull/1347.patch
        issue_url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/issues/1347
        commits_url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits
        review_comments_url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments
        review_comment_url:
          type: string
          example: >-
            https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}
        comments_url:
          type: string
          format: uri
          example: >-
            https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
        statuses_url:
          type: string
          format: uri
          example: >-
            https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e
        number:
          description: Number uniquely identifying the pull request within its repository.
          example: 42
          type: integer
        state:
          description: State of this Pull Request. Either `open` or `closed`.
          enum:
            - open
            - closed
          example: open
          type: string
        locked:
          type: boolean
          example: true
        title:
          description: The title of the pull request.
          example: Amazing new feature
          type: string
        user:
          $ref: '#/components/schemas/simple-user'
        body:
          type: string
          example: Please pull these awesome changes
          nullable: true
        labels:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              node_id:
                type: string
              url:
                type: string
              name:
                type: string
              description:
                type: string
                nullable: true
              color:
                type: string
              default:
                type: boolean
            required:
              - id
              - node_id
              - url
              - name
              - description
              - color
              - default
        milestone:
          $ref: '#/components/schemas/nullable-milestone'
        active_lock_reason:
          type: string
          example: too heated
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2011-01-26T19:01:12Z'
        updated_at:
          type: string
          format: date-time
          example: '2011-01-26T19:01:12Z'
        closed_at:
          type: string
          format: date-time
          example: '2011-01-26T19:01:12Z'
          nullable: true
        merged_at:
          type: string
          format: date-time
          example: '2011-01-26T19:01:12Z'
          nullable: true
        merge_commit_sha:
          type: string
          example: e5bd3914e2e596debea16f433f57875b5b90bcd6
          nullable: true
        assignee:
          $ref: '#/components/schemas/nullable-simple-user'
        assignees:
          type: array
          items:
            $ref: '#/components/schemas/simple-user'
          nullable: true
        requested_reviewers:
          type: array
          items:
            $ref: '#/components/schemas/simple-user'
          nullable: true
        requested_teams:
          type: array
          items:
            $ref: '#/components/schemas/team-simple'
          nullable: true
        head:
          type: object
          properties:
            label:
              type: string
            ref:
              type: string
            repo:
              type: object
              nullable: true
              properties:
                archive_url:
                  type: string
                assignees_url:
                  type: string
                blobs_url:
                  type: string
                branches_url:
                  type: string
                collaborators_url:
                  type: string
                comments_url:
                  type: string
                commits_url:
                  type: string
                compare_url:
                  type: string
                contents_url:
                  type: string
                contributors_url:
                  type: string
                  format: uri
                deployments_url:
                  type: string
                  format: uri
                description:
                  type: string
                  nullable: true
                downloads_url:
                  type: string
                  format: uri
                events_url:
                  type: string
                  format: uri
                fork:
                  type: boolean
                forks_url:
                  type: string
                  format: uri
                full_name:
                  type: string
                git_commits_url:
                  type: string
                git_refs_url:
                  type: string
                git_tags_url:
                  type: string
                hooks_url:
                  type: string
                  format: uri
                html_url:
                  type: string
                  format: uri
                id:
                  type: integer
                node_id:
                  type: string
                issue_comment_url:
                  type: string
                issue_events_url:
                  type: string
                issues_url:
                  type: string
                keys_url:
                  type: string
                labels_url:
                  type: string
                languages_url:
                  type: string
                  format: uri
                merges_url:
                  type: string
                  format: uri
                milestones_url:
                  type: string
                name:
                  type: string
                notifications_url:
                  type: string
                owner:
                  type: object
                  properties:
                    avatar_url:
                      type: string
                      format: uri
                    events_url:
                      type: string
                    followers_url:
                      type: string
                      format: uri
                    following_url:
                      type: string
                    gists_url:
                      type: string
                    gravatar_id:
                      type: string
                      nullable: true
                    html_url:
                      type: string
                      format: uri
                    id:
                      type: integer
                    node_id:
                      type: string
                    login:
                      type: string
                    organizations_url:
                      type: string
                      format: uri
                    received_events_url:
                      type: string
                      format: uri
                    repos_url:
                      type: string
                      format: uri
                    site_admin:
                      type: boolean
                    starred_url:
                      type: string
                    subscriptions_url:
                      type: string
                      format: uri
                    type:
                      type: string
                    url:
                      type: string
                      format: uri
                  required:
                    - avatar_url
                    - events_url
                    - followers_url
                    - following_url
                    - gists_url
                    - gravatar_id
                    - html_url
                    - id
                    - node_id
                    - login
                    - organizations_url
                    - received_events_url
                    - repos_url
                    - site_admin
                    - starred_url
                    - subscriptions_url
                    - type
                    - url
                private:
                  type: boolean
                pulls_url:
                  type: string
                releases_url:
                  type: string
                stargazers_url:
                  type: string
                  format: uri
                statuses_url:
                  type: string
                subscribers_url:
                  type: string
                  format: uri
                subscription_url:
                  type: string
                  format: uri
                tags_url:
                  type: string
                  format: uri
                teams_url:
                  type: string
                  format: uri
                trees_url:
                  type: string
                url:
                  type: string
                  format: uri
                clone_url:
                  type: string
                default_branch:
                  type: string
                forks:
                  type: integer
                forks_count:
                  type: integer
                git_url:
                  type: string
                has_downloads:
                  type: boolean
                has_issues:
                  type: boolean
                has_projects:
                  type: boolean
                has_wiki:
                  type: boolean
                has_pages:
                  type: boolean
                has_discussions:
                  type: boolean
                homepage:
                  type: string
                  format: uri
                  nullable: true
                language:
                  type: string
                  nullable: true
                master_branch:
                  type: string
                archived:
                  type: boolean
                disabled:
                  type: boolean
                visibility:
                  description: 'The repository visibility: public, private, or internal.'
                  type: string
                mirror_url:
                  type: string
                  format: uri
                  nullable: true
                open_issues:
                  type: integer
                open_issues_count:
                  type: integer
                permissions:
                  type: object
                  properties:
                    admin:
                      type: boolean
                    maintain:
                      type: boolean
                    push:
                      type: boolean
                    triage:
                      type: boolean
                    pull:
                      type: boolean
                  required:
                    - admin
                    - pull
                    - push
                temp_clone_token:
                  type: string
                allow_merge_commit:
                  type: boolean
                allow_squash_merge:
                  type: boolean
                allow_rebase_merge:
                  type: boolean
                license:
                  type: object
                  properties:
                    key:
                      type: string
                    name:
                      type: string
                    url:
                      type: string
                      format: uri
                      nullable: true
                    spdx_id:
                      type: string
                      nullable: true
                    node_id:
                      type: string
                  required:
                    - key
                    - name
                    - url
                    - spdx_id
                    - node_id
                  nullable: true
                pushed_at:
                  type: string
                  format: date-time
                size:
                  type: integer
                ssh_url:
                  type: string
                stargazers_count:
                  type: integer
                svn_url:
                  type: string
                  format: uri
                topics:
                  type: array
                  items:
                    type: string
                watchers:
                  type: integer
                watchers_count:
                  type: integer
                created_at:
                  type: string
                  format: date-time
                updated_at:
                  type: string
                  format: date-time
                allow_forking:
                  type: boolean
                is_template:
                  type: boolean
                web_commit_signoff_required:
                  type: boolean
              required:
                - archive_url
                - assignees_url
                - blobs_url
                - branches_url
                - collaborators_url
                - comments_url
                - commits_url
                - compare_url
                - contents_url
                - contributors_url
                - deployments_url
                - description
                - downloads_url
                - events_url
                - fork
                - forks_url
                - full_name
                - git_commits_url
                - git_refs_url
                - git_tags_url
                - hooks_url
                - html_url
                - id
                - node_id
                - issue_comment_url
                - issue_events_url
                - issues_url
                - keys_url
                - labels_url
                - languages_url
                - merges_url
                - milestones_url
                - name
                - notifications_url
                - owner
                - private
                - pulls_url
                - releases_url
                - stargazers_url
                - statuses_url
                - subscribers_url
                - subscription_url
                - tags_url
                - teams_url
                - trees_url
                - url
                - clone_url
                - default_branch
                - forks
                - forks_count
                - git_url
                - has_downloads
                - has_issues
                - has_projects
                - has_wiki
                - has_pages
                - has_discussions
                - homepage
                - language
                - archived
                - disabled
                - mirror_url
                - open_issues
                - open_issues_count
                - license
                - pushed_at
                - size
                - ssh_url
                - stargazers_count
                - svn_url
                - watchers
                - watchers_count
                - created_at
                - updated_at
            sha:
              type: string
            user:
              type: object
              properties:
                avatar_url:
                  type: string
                  format: uri
                events_url:
                  type: string
                followers_url:
                  type: string
                  format: uri
                following_url:
                  type: string
                gists_url:
                  type: string
                gravatar_id:
                  type: string
                  nullable: true
                html_url:
                  type: string
                  format: uri
                id:
                  type: integer
                node_id:
                  type: string
                login:
                  type: string
                organizations_url:
                  type: string
                  format: uri
                received_events_url:
                  type: string
                  format: uri
                repos_url:
                  type: string
                  format: uri
                site_admin:
                  type: boolean
                starred_url:
                  type: string
                subscriptions_url:
                  type: string
                  format: uri
                type:
                  type: string
                url:
                  type: string
                  format: uri
              required:
                - avatar_url
                - events_url
                - followers_url
                - following_url
                - gists_url
                - gravatar_id
                - html_url
                - id
                - node_id
                - login
                - organizations_url
                - received_events_url
                - repos_url
                - site_admin
                - starred_url
                - subscriptions_url
                - type
                - url
          required:
            - label
            - ref
            - repo
            - sha
            - user
        base:
          type: object
          properties:
            label:
              type: string
            ref:
              type: string
            repo:
              type: object
              properties:
                archive_url:
                  type: string
                assignees_url:
                  type: string
                blobs_url:
                  type: string
                branches_url:
                  type: string
                collaborators_url:
                  type: string
                comments_url:
                  type: string
                commits_url:
                  type: string
                compare_url:
                  type: string
                contents_url:
                  type: string
                contributors_url:
                  type: string
                  format: uri
                deployments_url:
                  type: string
                  format: uri
                description:
                  type: string
                  nullable: true
                downloads_url:
                  type: string
                  format: uri
                events_url:
                  type: string
                  format: uri
                fork:
                  type: boolean
                forks_url:
                  type: string
                  format: uri
                full_name:
                  type: string
                git_commits_url:
                  type: string
                git_refs_url:
                  type: string
                git_tags_url:
                  type: string
                hooks_url:
                  type: string
                  format: uri
                html_url:
                  type: string
                  format: uri
                id:
                  type: integer
                is_template:
                  type: boolean
                node_id:
                  type: string
                issue_comment_url:
                  type: string
                issue_events_url:
                  type: string
                issues_url:
                  type: string
                keys_url:
                  type: string
                labels_url:
                  type: string
                languages_url:
                  type: string
                  format: uri
                merges_url:
                  type: string
                  format: uri
                milestones_url:
                  type: string
                name:
                  type: string
                notifications_url:
                  type: string
                owner:
                  type: object
                  properties:
                    avatar_url:
                      type: string
                      format: uri
                    events_url:
                      type: string
                    followers_url:
                      type: string
                      format: uri
                    following_url:
                      type: string
                    gists_url:
                      type: string
                    gravatar_id:
                      type: string
                      nullable: true
                    html_url:
                      type: string
                      format: uri
                    id:
                      type: integer
                    node_id:
                      type: string
                    login:
                      type: string
                    organizations_url:
                      type: string
                      format: uri
                    received_events_url:
                      type: string
                      format: uri
                    repos_url:
                      type: string
                      format: uri
                    site_admin:
                      type: boolean
                    starred_url:
                      type: string
                    subscriptions_url:
                      type: string
                      format: uri
                    type:
                      type: string
                    url:
                      type: string
                      format: uri
                  required:
                    - avatar_url
                    - events_url
                    - followers_url
                    - following_url
                    - gists_url
                    - gravatar_id
                    - html_url
                    - id
                    - node_id
                    - login
                    - organizations_url
                    - received_events_url
                    - repos_url
                    - site_admin
                    - starred_url
                    - subscriptions_url
                    - type
                    - url
                private:
                  type: boolean
                pulls_url:
                  type: string
                releases_url:
                  type: string
                stargazers_url:
                  type: string
                  format: uri
                statuses_url:
                  type: string
                subscribers_url:
                  type: string
                  format: uri
                subscription_url:
                  type: string
                  format: uri
                tags_url:
                  type: string
                  format: uri
                teams_url:
                  type: string
                  format: uri
                trees_url:
                  type: string
                url:
                  type: string
                  format: uri
                clone_url:
                  type: string
                default_branch:
                  type: string
                forks:
                  type: integer
                forks_count:
                  type: integer
                git_url:
                  type: string
                has_downloads:
                  type: boolean
                has_issues:
                  type: boolean
                has_projects:
                  type: boolean
                has_wiki:
                  type: boolean
                has_pages:
                  type: boolean
                has_discussions:
                  type: boolean
                homepage:
                  type: string
                  format: uri
                  nullable: true
                language:
                  type: string
                  nullable: true
                master_branch:
                  type: string
                archived:
                  type: boolean
                disabled:
                  type: boolean
                visibility:
                  description: 'The repository visibility: public, private, or internal.'
                  type: string
                mirror_url:
                  type: string
                  format: uri
                  nullable: true
                open_issues:
                  type: integer
                open_issues_count:
                  type: integer
                permissions:
                  type: object
                  properties:
                    admin:
                      type: boolean
                    maintain:
                      type: boolean
                    push:
                      type: boolean
                    triage:
                      type: boolean
                    pull:
                      type: boolean
                  required:
                    - admin
                    - pull
                    - push
                temp_clone_token:
                  type: string
                allow_merge_commit:
                  type: boolean
                allow_squash_merge:
                  type: boolean
                allow_rebase_merge:
                  type: boolean
                license:
                  $ref: '#/components/schemas/nullable-license-simple'
                pushed_at:
                  type: string
                  format: date-time
                size:
                  type: integer
                ssh_url:
                  type: string
                stargazers_count:
                  type: integer
                svn_url:
                  type: string
                  format: uri
                topics:
                  type: array
                  items:
                    type: string
                watchers:
                  type: integer
                watchers_count:
                  type: integer
                created_at:
                  type: string
                  format: date-time
                updated_at:
                  type: string
                  format: date-time
                allow_forking:
                  type: boolean
                web_commit_signoff_required:
                  type: boolean
              required:
                - archive_url
                - assignees_url
                - blobs_url
                - branches_url
                - collaborators_url
                - comments_url
                - commits_url
                - compare_url
                - contents_url
                - contributors_url
                - deployments_url
                - description
                - downloads_url
                - events_url
                - fork
                - forks_url
                - full_name
                - git_commits_url
                - git_refs_url
                - git_tags_url
                - hooks_url
                - html_url
                - id
                - node_id
                - issue_comment_url
                - issue_events_url
                - issues_url
                - keys_url
                - labels_url
                - languages_url
                - merges_url
                - milestones_url
                - name
                - notifications_url
                - owner
                - private
                - pulls_url
                - releases_url
                - stargazers_url
                - statuses_url
                - subscribers_url
                - subscription_url
                - tags_url
                - teams_url
                - trees_url
                - url
                - clone_url
                - default_branch
                - forks
                - forks_count
                - git_url
                - has_downloads
                - has_issues
                - has_projects
                - has_wiki
                - has_pages
                - has_discussions
                - homepage
                - language
                - archived
                - disabled
                - mirror_url
                - open_issues
                - open_issues_count
                - license
                - pushed_at
                - size
                - ssh_url
                - stargazers_count
                - svn_url
                - watchers
                - watchers_count
                - created_at
                - updated_at
            sha:
              type: string
            user:
              type: object
              properties:
                avatar_url:
                  type: string
                  format: uri
                events_url:
                  type: string
                followers_url:
                  type: string
                  format: uri
                following_url:
                  type: string
                gists_url:
                  type: string
                gravatar_id:
                  type: string
                  nullable: true
                html_url:
                  type: string
                  format: uri
                id:
                  type: integer
                node_id:
                  type: string
                login:
                  type: string
                organizations_url:
                  type: string
                  format: uri
                received_events_url:
                  type: string
                  format: uri
                repos_url:
                  type: string
                  format: uri
                site_admin:
                  type: boolean
                starred_url:
                  type: string
                subscriptions_url:
                  type: string
                  format: uri
                type:
                  type: string
                url:
                  type: string
                  format: uri
              required:
                - avatar_url
                - events_url
                - followers_url
                - following_url
                - gists_url
                - gravatar_id
                - html_url
                - id
                - node_id
                - login
                - organizations_url
                - received_events_url
                - repos_url
                - site_admin
                - starred_url
                - subscriptions_url
                - type
                - url
          required:
            - label
            - ref
            - repo
            - sha
            - user
        _links:
          type: object
          properties:
            comments:
              $ref: '#/components/schemas/link'
            commits:
              $ref: '#/components/schemas/link'
            statuses:
              $ref: '#/components/schemas/link'
            html:
              $ref: '#/components/schemas/link'
            issue:
              $ref: '#/components/schemas/link'
            review_comments:
              $ref: '#/components/schemas/link'
            review_comment:
              $ref: '#/components/schemas/link'
            self:
              $ref: '#/components/schemas/link'
          required:
            - comments
            - commits
            - statuses
            - html
            - issue
            - review_comments
            - review_comment
            - self
        author_association:
          $ref: '#/components/schemas/author-association'
        auto_merge:
          $ref: '#/components/schemas/auto-merge'
        draft:
          description: Indicates whether or not the pull request is a draft.
          example: false
          type: boolean
        merged:
          type: boolean
        mergeable:
          type: boolean
          example: true
          nullable: true
        rebaseable:
          type: boolean
          example: true
          nullable: true
        mergeable_state:
          type: string
          example: clean
        merged_by:
          $ref: '#/components/schemas/nullable-simple-user'
        comments:
          type: integer
          example: 10
        review_comments:
          type: integer
          example: 0
        maintainer_can_modify:
          description: Indicates whether maintainers can modify the pull request.
          example: true
          type: boolean
        commits:
          type: integer
          example: 3
        additions:
          type: integer
          example: 100
        deletions:
          type: integer
          example: 3
        changed_files:
          type: integer
          example: 5
      required:
        - _links
        - assignee
        - labels
        - base
        - body
        - closed_at
        - comments_url
        - commits_url
        - created_at
        - diff_url
        - head
        - html_url
        - id
        - node_id
        - issue_url
        - merge_commit_sha
        - merged_at
        - milestone
        - number
        - patch_url
        - review_comment_url
        - review_comments_url
        - statuses_url
        - state
        - locked
        - title
        - updated_at
        - url
        - user
        - author_association
        - auto_merge
        - additions
        - changed_files
        - comments
        - commits
        - deletions
        - mergeable
        - mergeable_state
        - merged
        - maintainer_can_modify
        - merged_by
        - review_comments
    pull-request-merge-result:
      title: Pull Request Merge Result
      description: Pull Request Merge Result
      type: object
      properties:
        sha:
          type: string
        merged:
          type: boolean
        message:
          type: string
      required:
        - merged
        - message
        - sha
    pull-request-review-request:
      title: Pull Request Review Request
      description: Pull Request Review Request
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/simple-user'
        teams:
          type: array
          items:
            $ref: '#/components/schemas/team'
      required:
        - users
        - teams
    pull-request-simple:
      title: Pull Request Simple
      description: Pull Request Simple
      type: object
      properties:
        url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/pulls/1347
        id:
          type: integer
          example: 1
        node_id:
          type: string
          example: MDExOlB1bGxSZXF1ZXN0MQ==
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World/pull/1347
        diff_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World/pull/1347.diff
        patch_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World/pull/1347.patch
        issue_url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/issues/1347
        commits_url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits
        review_comments_url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments
        review_comment_url:
          type: string
          example: >-
            https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}
        comments_url:
          type: string
          format: uri
          example: >-
            https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
        statuses_url:
          type: string
          format: uri
          example: >-
            https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e
        number:
          type: integer
          example: 1347
        state:
          type: string
          example: open
        locked:
          type: boolean
          example: true
        title:
          type: string
          example: new-feature
        user:
          $ref: '#/components/schemas/nullable-simple-user'
        body:
          type: string
          example: Please pull these awesome changes
          nullable: true
        labels:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              node_id:
                type: string
              url:
                type: string
              name:
                type: string
              description:
                type: string
              color:
                type: string
              default:
                type: boolean
            required:
              - id
              - node_id
              - url
              - name
              - description
              - color
              - default
        milestone:
          $ref: '#/components/schemas/nullable-milestone'
        active_lock_reason:
          type: string
          example: too heated
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2011-01-26T19:01:12Z'
        updated_at:
          type: string
          format: date-time
          example: '2011-01-26T19:01:12Z'
        closed_at:
          type: string
          format: date-time
          example: '2011-01-26T19:01:12Z'
          nullable: true
        merged_at:
          type: string
          format: date-time
          example: '2011-01-26T19:01:12Z'
          nullable: true
        merge_commit_sha:
          type: string
          example: e5bd3914e2e596debea16f433f57875b5b90bcd6
          nullable: true
        assignee:
          $ref: '#/components/schemas/nullable-simple-user'
        assignees:
          type: array
          items:
            $ref: '#/components/schemas/simple-user'
          nullable: true
        requested_reviewers:
          type: array
          items:
            $ref: '#/components/schemas/simple-user'
          nullable: true
        requested_teams:
          type: array
          items:
            $ref: '#/components/schemas/team'
          nullable: true
        head:
          type: object
          properties:
            label:
              type: string
            ref:
              type: string
            repo:
              $ref: '#/components/schemas/repository'
            sha:
              type: string
            user:
              $ref: '#/components/schemas/nullable-simple-user'
          required:
            - label
            - ref
            - repo
            - sha
            - user
        base:
          type: object
          properties:
            label:
              type: string
            ref:
              type: string
            repo:
              $ref: '#/components/schemas/repository'
            sha:
              type: string
            user:
              $ref: '#/components/schemas/nullable-simple-user'
          required:
            - label
            - ref
            - repo
            - sha
            - user
        _links:
          type: object
          properties:
            comments:
              $ref: '#/components/schemas/link'
            commits:
              $ref: '#/components/schemas/link'
            statuses:
              $ref: '#/components/schemas/link'
            html:
              $ref: '#/components/schemas/link'
            issue:
              $ref: '#/components/schemas/link'
            review_comments:
              $ref: '#/components/schemas/link'
            review_comment:
              $ref: '#/components/schemas/link'
            self:
              $ref: '#/components/schemas/link'
          required:
            - comments
            - commits
            - statuses
            - html
            - issue
            - review_comments
            - review_comment
            - self
        author_association:
          $ref: '#/components/schemas/author-association'
        auto_merge:
          $ref: '#/components/schemas/auto-merge'
        draft:
          description: Indicates whether or not the pull request is a draft.
          example: false
          type: boolean
      required:
        - _links
        - assignee
        - labels
        - base
        - body
        - closed_at
        - comments_url
        - commits_url
        - created_at
        - diff_url
        - head
        - html_url
        - id
        - node_id
        - issue_url
        - merge_commit_sha
        - merged_at
        - milestone
        - number
        - patch_url
        - review_comment_url
        - review_comments_url
        - statuses_url
        - state
        - locked
        - title
        - updated_at
        - url
        - user
        - author_association
        - auto_merge
    pull-request-review:
      title: Pull Request Review
      description: Pull Request Reviews are reviews on pull requests.
      type: object
      properties:
        id:
          description: Unique identifier of the review
          example: 42
          type: integer
        node_id:
          type: string
          example: MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=
        user:
          $ref: '#/components/schemas/nullable-simple-user'
        body:
          description: The text of the review.
          example: This looks great.
          type: string
        state:
          type: string
          example: CHANGES_REQUESTED
        html_url:
          type: string
          format: uri
          example: https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80
        pull_request_url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/Hello-World/pulls/12
        _links:
          type: object
          properties:
            html:
              type: object
              properties:
                href:
                  type: string
              required:
                - href
            pull_request:
              type: object
              properties:
                href:
                  type: string
              required:
                - href
          required:
            - html
            - pull_request
        submitted_at:
          type: string
          format: date-time
        commit_id:
          description: >-
            A commit SHA for the review. If the commit object was garbage
            collected or forcibly deleted, then it no longer exists in Git and
            this value will be `null`.
          example: 54bb654c9e6025347f57900a4a5c2313a96b8035
          type: string
          nullable: true
        body_html:
          type: string
        body_text:
          type: string
        author_association:
          $ref: '#/components/schemas/author-association'
      required:
        - id
        - node_id
        - user
        - body
        - state
        - commit_id
        - html_url
        - pull_request_url
        - _links
        - author_association
    content-file:
      title: Content File
      description: Content File
      type: object
      properties:
        type:
          type: string
          enum:
            - file
        encoding:
          type: string
        size:
          type: integer
        name:
          type: string
        path:
          type: string
        content:
          type: string
        sha:
          type: string
        url:
          type: string
          format: uri
        git_url:
          type: string
          format: uri
          nullable: true
        html_url:
          type: string
          format: uri
          nullable: true
        download_url:
          type: string
          format: uri
          nullable: true
        _links:
          type: object
          properties:
            git:
              type: string
              format: uri
              nullable: true
            html:
              type: string
              format: uri
              nullable: true
            self:
              type: string
              format: uri
          required:
            - git
            - html
            - self
        target:
          type: string
          example: '"actual/actual.md"'
        submodule_git_url:
          type: string
          example: '"git://example.com/defunkt/dotjs.git"'
      required:
        - _links
        - git_url
        - html_url
        - download_url
        - name
        - path
        - sha
        - size
        - type
        - url
        - content
        - encoding
    release-asset:
      title: Release Asset
      description: Data related to a release.
      type: object
      properties:
        url:
          type: string
          format: uri
        browser_download_url:
          type: string
          format: uri
        id:
          type: integer
        node_id:
          type: string
        name:
          description: The file name of the asset.
          type: string
          example: Team Environment
        label:
          type: string
          nullable: true
        state:
          description: State of the release asset.
          type: string
          enum:
            - uploaded
            - open
        content_type:
          type: string
        size:
          type: integer
        download_count:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        uploader:
          $ref: '#/components/schemas/nullable-simple-user'
      required:
        - id
        - name
        - content_type
        - size
        - state
        - url
        - node_id
        - download_count
        - label
        - uploader
        - browser_download_url
        - created_at
        - updated_at
    release-notes-content:
      title: Generated Release Notes Content
      description: Generated name and body describing a release
      type: object
      properties:
        name:
          description: The generated name of the release
          type: string
          example: Release v1.0.0 is now available!
        body:
          description: >-
            The generated body describing the contents of the release supporting
            markdown formatting
          type: string
      required:
        - name
        - body
    release:
      title: Release
      description: A release.
      type: object
      properties:
        url:
          type: string
          format: uri
        html_url:
          type: string
          format: uri
        assets_url:
          type: string
          format: uri
        upload_url:
          type: string
        tarball_url:
          type: string
          format: uri
          nullable: true
        zipball_url:
          type: string
          format: uri
          nullable: true
        id:
          type: integer
        node_id:
          type: string
        tag_name:
          description: The name of the tag.
          example: v1.0.0
          type: string
        target_commitish:
          description: >-
            Specifies the commitish value that determines where the Git tag is
            created from.
          example: master
          type: string
        name:
          type: string
          nullable: true
        body:
          type: string
          nullable: true
        draft:
          description: >-
            true to create a draft (unpublished) release, false to create a
            published one.
          example: false
          type: boolean
        prerelease:
          description: Whether to identify the release as a prerelease or a full release.
          example: false
          type: boolean
        created_at:
          type: string
          format: date-time
        published_at:
          type: string
          format: date-time
          nullable: true
        author:
          $ref: '#/components/schemas/simple-user'
        assets:
          type: array
          items:
            $ref: '#/components/schemas/release-asset'
        body_html:
          type: string
        body_text:
          type: string
        mentions_count:
          type: integer
        reactions:
          $ref: '#/components/schemas/reaction-rollup'
      required:
        - assets_url
        - upload_url
        - tarball_url
        - zipball_url
        - created_at
        - published_at
        - draft
        - id
        - node_id
        - author
        - html_url
        - name
        - prerelease
        - tag_name
        - target_commitish
        - assets
        - url
    secret-scanning-alert:
      type: object
      properties:
        number:
          $ref: '#/components/schemas/alert-number'
        created_at:
          $ref: '#/components/schemas/alert-created-at'
        updated_at:
          $ref: '#/components/schemas/nullable-alert-updated-at'
        url:
          $ref: '#/components/schemas/alert-url'
        html_url:
          $ref: '#/components/schemas/alert-html-url'
        locations_url:
          type: string
          format: uri
          description: The REST API URL of the code locations for this alert.
        state:
          $ref: '#/components/schemas/secret-scanning-alert-state'
        resolution:
          $ref: '#/components/schemas/secret-scanning-alert-resolution'
        resolved_at:
          type: string
          format: date-time
          description: >-
            The time that the alert was resolved in ISO 8601 format:
            `YYYY-MM-DDTHH:MM:SSZ`.
          nullable: true
        resolved_by:
          $ref: '#/components/schemas/nullable-simple-user'
        resolution_comment:
          type: string
          description: An optional comment to resolve an alert.
          nullable: true
        secret_type:
          type: string
          description: The type of secret that secret scanning detected.
        secret_type_display_name:
          type: string
          description: >-
            User-friendly name for the detected secret, matching the
            `secret_type`.

            For a list of built-in patterns, see "[Secret scanning
            patterns](https://docs.github.com/enterprise-server@3.9/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
        secret:
          type: string
          description: The secret that was detected.
        push_protection_bypassed:
          type: boolean
          description: Whether push protection was bypassed for the detected secret.
          nullable: true
        push_protection_bypassed_by:
          $ref: '#/components/schemas/nullable-simple-user'
        push_protection_bypassed_at:
          type: string
          format: date-time
          description: >-
            The time that push protection was bypassed in ISO 8601 format:
            `YYYY-MM-DDTHH:MM:SSZ`.
          nullable: true
    participation-stats:
      title: Participation Stats
      type: object
      properties:
        all:
          type: array
          items:
            type: integer
        owner:
          type: array
          items:
            type: integer
      required:
        - all
        - owner
    repository-subscription:
      title: Repository Invitation
      description: Repository invitations let you manage who you collaborate with.
      type: object
      properties:
        subscribed:
          description: Determines if notifications should be received from this repository.
          type: boolean
          example: true
        ignored:
          description: >-
            Determines if all notifications should be blocked from this
            repository.
          type: boolean
        reason:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2012-10-06T21:34:12Z'
        url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/example/subscription
        repository_url:
          type: string
          format: uri
          example: https://api.github.com/repos/octocat/example
      required:
        - created_at
        - ignored
        - reason
        - subscribed
        - url
        - repository_url
    topic:
      title: Topic
      description: A topic aggregates entities that are related to a subject.
      type: object
      properties:
        names:
          type: array
          items:
            type: string
      required:
        - names
